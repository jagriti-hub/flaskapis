{"version":3,"sources":["Utils/ApiDomain.js","Pages/Cognito/CognitoDetails.js","Components/MinMax.js","Utils/UserRoles.js","Pages/Git/GitAPIs.js","Pages/Cognito/Index.js","Pages/Cognito/ForgotPassword.js","Utils/DataList.js","Pages/Product/ProductAPIs.js","Pages/Product/AddProduct.js","Pages/Product/ProductTopBar.js","Pages/Services/ServiceAPIs.js","Pages/Services/AddService.js","Pages/Services/ServiceTopBar.js","Pages/Git/Commit.js","Components/AppNav.js","Components/Footer/Layout.js","Components/Footer/index.js","assets/styles/ContainerStyles.js","Pages/Product/ProductIndex.js","Pages/Services/ServicesList.js","Pages/Services/ServiceCatalog.js","Pages/Services/NewTestCase.js","Pages/CodeEditor/NewEditor.js","Pages/Services/ServiceDetails.js","Pages/Deployment/actions.js","Components/Form.js","Pages/Deployment/index.js","Pages/Git/GitSetUp.js","Pages/Home.js","App.js","index.js","Utils/Apipath.js","assets/images/ap-logo.png","Components/Loader.js","assets/styles/StatusStyles.js","Components/Alert.js","Utils/HandleApi.js","assets/styles/TypographySyles.js","Pages/Cognito/GoogleSigninDetails.js","Pages/Cognito/LoadGoogleAPIScript.js","Pages/Cognito/CognitoFunctions.js","Utils/AmplifyData.js","Pages/DataLayer/TableDetails.js","Pages/DataLayer/Form.js","Components/Confirm.js"],"names":["apiUrl","url","vmurl","CognitoDetails","email","accessToken","User","GetRole","asyncfunction","HandleAPI","handleAPI","JSON","stringify","sessionStorage","getItem","then","result","status","setItem","window","btoa","body","Roles","catch","err","CheckRole","key","Cognitofunctions","CurrentUser","success","data","parse","atob","indexOf","location","href","origin","GetUser","apidata","GetUserTenants","EmailId","Action","GetGitDetails","path","method","headers","message","hasOwnProperty","statusCode","errorMessage","CreateOrPullBranches","CommitCode","ConfigureGit","ValidateCredentials","GetBranches","GetBranchesByType","GetTemplateGitDetails","ConfigureTemplateGit","GetRepoBranches","imgStyles","makeStyles","theme","logo","height","containerStyles","root","padding","backgroundColor","maxWidth","display","justifyContent","boxStyles","width","breakpoints","down","wrapper","margin","formStyles","form","marginTop","inputError","label","textAlign","common","borderRadius","commonStyles","LoginIndex","useState","setEmail","password","setPassword","confPass","setConfPass","openLogin","setOpenLogin","openNewPassword","setOpenNewPassword","openNotValidated","chooseTenants","currentUser","setCurrentUser","loader","setLoader","openAlert","setOpenAlert","severity","setSeverrity","setMessage","imgClasses","containerClasses","boxClasses","formClasses","commonClasses","useEffect","init","setInterval","getCurrentUser","clearInterval","Login","Signin","challengeName","code","NewPassword","Completenewpassword","handlePasswordChange","event","target","value","UserRoles","Signout","handleEnterClick","clickHandler","keyCode","which","preventDefault","Helmet","Loader","open","type","Alert","handler","Container","className","Box","boxShadow","bgcolor","alignItems","src","APLogo","alt","style","autoComplete","FormControl","required","htmlFor","placeholder","onChange","onKeyPress","bind","color","Button","variant","onClick","mt","to","textDecoration","ForgotPasswordIndex","verificationCode","setVerificationCode","openVerficationCode","setOpenVerficationCode","history","useHistory","forgotPasswordTrigger","ForgotPasswordTrigger","forgotPasswordSubmit","ForgotPasswordConfirm","setTimeout","push","Data","ProductList","ActiveProduct","ServiceList","ActiveService","SharedBranches","EnvBranches","GetAllProducts","length","DataList","error","GetSpecificProduct","AddProduct","DeleteProduct","Handler","dialog","setDialog","formData","setFormData","prodname","setprodname","handleFormDataChage","field","formFields","test","toLowerCase","SubmitHandler","canSubmit","requireAttrs","i","undefined","apipath","apidomain","ProductAPIs","response","prods","removeItem","productid","Dialog","onClose","aria-labelledby","fullWidth","DialogTitle","id","DialogContent","mb","TextField","helperText","multiline","rows","DialogActions","ProductIndex","confirmation","setConfirmation","confApiData","setConfApiData","productList","setProductList","newProd","setNewProd","Object","keys","curProd","setCurProd","anchorEl","setAnchorEl","openPopover","Boolean","typographyClasses","TypographyStyles","manageAPIs","ref","GitAPIs","reload","handleActions","confirmText","mr","position","currentTarget","p","pl","pr","cursor","Typography","text","fontWeight","productname","fontSize","Popover","anchorOrigin","vertical","horizontal","transformOrigin","overflow","map","prod","index","product","flexDirection","align","smallText","stopPropagation","Divider","gitapidata","Confirm","GetAllServices","GetSpecificService","AddService","DeleteService","servName","setServName","servjson","ServiceAPIs","servs","serviceid","flexWrap","ServiceIndex","serviceList","setServiceList","newServ","setNewServ","curServ","setCurServ","servicename","serv","service","CommitDesign","isGitConfigured","setIsGitConfigured","useStyles","drawer","flexShrink","drawerPaper","drawerContainer","content","flexGrow","spacing","appBar","background","zIndex","borderBottom","List","ListItem","backgroundImage","ListIcon","lineHeight","ListText","typographyStyles","whiteSpace","subtitle1","popoverStyles","MiniDrawer","React","classes","popoverClasses","userData","CssBaseline","AppBar","clsx","appBarShift","Toolbar","minHeight","ApLogo","Commit","pt","pb","FooterLayout","props","heading","bold","h6","ct","rel","FooterData","Footer","page","Grid","container","ft","item","xs","md","Layout","m","Date","getFullYear","bottom","ContainerStyles","ServicesList","loadTimeout","setLoadTimeout","checkrole","nextapidata","h5","actionData","e","des","description","slice","sm","lg","match","params","Breadcrumbs","separator","aria-label","selectTemplate","setSelectTemplate","HandleApi","serviceTemplates","temps","zz","error_message","show","ProcessServiceTemplateList","border","borderColor","is_coming_soon","opacity","handleSelectTemplate","justify","name","fld","flindex","marginBottom","disabled","sidebarStyles","onhoveritem","tabStyles","header","Accordion","withStyles","expanded","MuiAccordion","AccordionSummary","MuiAccordionSummary","AccordionDetails","MuiAccordionDetails","TabPanel","children","other","role","hidden","a11yProps","TestCases","resourceid","methods","btnAction","resourceStatus","mainBlkTrigger","resourcename","versionname","apiid","versionid","formDialog","setFormDialog","formName","setFormName","tecsList","setTecsList","tecsJSON","setTecsJSON","methodtype","curMethod","setCurMethod","showMethods","setShowMethods","setShowOutput","curApiUrl","templates","updPathParams","setUpdPathParams","tabClasses","sideBarClasses","apidata1","tecsjson","testcaseid","tecs","editor","tecslist","resp","handleEditcode","saveCode","testcase","methodid","onChangeCode","handleTecsSubTab","newValue","TestCaseTab","tablist","Tabs","scrollButtons","tab","tabindex","Tab","mode","setOptions","minLines","maxLines","enableBasicAutocompletion","enableLiveAutocompletion","useSoftTabs","tabSize","showPrintMargin","wrap","readOnly","dragEnabled","editorProps","$blockScrolling","ptparam","ptindex","updatekey","updatevalue","TestCasesList","methodpath","actualurl","quepams","urlparams","patparams","pathparameters","spliturl","split","tecsIp","queryparameters","readonly","prevcode","values","tecsOp","showoutput","square","TransitionProps","unmountOnExit","defaultExpanded","handleTecsPanelChange","expansionProps","expandIcon","minWidth","testcasename","TriggerAPITest","title","TestAPI","api","fetch","json","heads","$","ajax","ipstr","PopulateMethods","borderTop","met","tcsjson","defaultValue","updpr","FormDialogSubmit","join","NewEditor","datasource","showFiles","setShowFiles","showSnippets","setShowSnippets","methodJson","setMethodJson","snippets","snippetorder","snippetList","setSnippetList","snippetJson","setSnippetJson","preSnippets","setPreSnippets","dialogContent","setDialogContent","activeBlk","setActiveBlk","activeData","setActiveData","activeReqList","setActiveReqList","setEditorProps","reqList","setReqList","code_map","sidebarClasses","nextapi","servicetype","dbtype","snippetid","snpjson","requirements","snlist","table","handleAddSnippet","snip","db","dbid","tableid","snippet","ProcessSideBar","order","ord","ml","handleFuncClick","EditorActions","code_key","editprops","ips","handleAddAttr","borderRight","Infinity","req","reqlist","splice","handleReqDelete","cdlist","modulename","list","handleAttrInputChange","handleRemAttr","concat","ipdata","accordionStyles","POST","PUT","PATCH","UPDATE","GET","Get","DELETE","bdPOST","bdPUT","bdPATCH","bdUPDATE","bdGET","bdGet","bdDELETE","bgGET","bgGet","bgPOST","bgPUT","bgPATCH","bgUPDATE","bgDELETE","ServiceDetails","versions","setVersions","curVersion","setCurVersion","resources","setResources","curRes","setCurRes","resObj","setResObj","showVersions","setShowVersions","showRes","setShowRes","Methods","setMethods","resname","setresname","vername","setvername","methodProps","setMethodProps","setBtnAction","showSidebar","setShowSideBar","mainBlk","setMainBlk","resJSON","setResJSON","jsontohtml","setJsontoHtml","curState","setCurstate","setApiJson","servstatus","setServStatus","deployId","setDeployId","methodJSON","setMethodJSON","liveInterval","setLiveInterval","setResourceStatus","delInterval","setDelInterval","branches","setBranches","showBranches","setShowBranches","curBr","setCurBr","statusClasses","StatusStyles","accordionClassess","interval","intervalFlag","liveinterval","liveintervalflag","deltimeout","eachparam","dummy","verid","vers","ress","nextAPIdata","tenantid","TenantId","userid","resjson","nextAPidata","nextAPIdata1","reslist","meths","res","clearTimeout","metjson","deployid","handleAPIInterval","logname","actions","containerstatus","showMessage","formname","allresjson","resource_output","job_status","Sidebar","top","left","ver","handleSidebarPopover","metindex","ipeditor","inputschema","opeditor","outputschema","apiurl","methprops","document","getElementById","scrollIntoView","handlePanelChange","IconButton","strtocp","copyText","state","output","logpath","MethodTabs","codetype","language","methodjson","tempIp","createElement","setAttribute","appendChild","select","execCommand","remove","handleMethoTab","ResourceOpStatus","CheckResourceForLive","PopulateBranches","br","Branchname","handleBranchesPopover","cat","CircularProgress","size","TableDetails","callapi","trigger","tablejson","tablename","indexes","schema","tableClassName","Select","native","OutlinedInput","startAdornment","InputAdornment","fmdata","Actions","setTab","cptext","maxHeight","showLineNumbers","showGutter","highlightActiveLine","highlightGutterLine","highlightSelectedWord","$blockSelectEnabled","$enableMultiselect","act","disableFocusRipple","disableRipple","disableTouchRipple","TabProps","h2","typography","h3","h4","Form","UserParameters","formProps","setFormProps","setDisableBtn","paramList","Type","minvalue","maxvalue","parseInt","handleFormSubmit","cansubmit","ProcessInput","KeyName","AllowedValues","MinValue","MaxValue","ConstraintDescription","labelId","valItem","valIndex","FormHelperText","Description","Keyindex","Default","codeChange","DeployIndex","optTab","setOptTab","showForm","setShowForm","curFormObj","setCurFormObj","stepJson","setStepJson","options","activeStep","setActiveStep","curStep","setCurStep","activeTask","setActiveTask","isPublish","setIsPublish","curOption","setCurOption","showPublish","setShowPublish","HandleForms","finaljson","optionjson","tasks","taskno","stepjson","actstep","jobstatus","actorder","handleStepClick","ProcesssTasks","step","dpindex","tasksarr","tsk","actionjson","steps","flag","stor","CheckForPublish","marginLeft","borderLeft","dporder","ipparams","task","GitSetup","gitrepourl","setgitrepourl","gitusername","setgitusername","gitpassword","setgitpassword","shName","setShName","brName","setBrName","setStep","gitstep","setGitStep","showCred","setShowCred","mybranch","setMybranch","shBrs","setShBrs","envBrs","setEnvBrs","templateGit","setTemplateGit","repoBranches","setRepoBranches","branchexists","setBranchExists","sharedbranch","environmentdeploybranch","apidata2","Datalist","templategiturl","templategitusername","templategitpassword","templategitbranch","connectiontype","gitdata","finaldata","DeleteBranch","brs","catbrs","repobrs","handleChangeBranch","substr","FormSubmit","brname","shbrs","envbrs","CheckBranch","AppRoute","exact","component","ForgotPassword","ServiceTemplate","DeployementUI","Component","App","Home","ReactDOM","render","designapi","liveapi","datastore","publish","templatestore","module","exports","backdrop","snackbar","BackdropLoader","elevation","Info","autoHideDuration","token","Apidomain","Cognitofucntions","additionalHeaders","Headers","append","set","localStorage","h1","GoogleSigninDetails","initGapi","g","load","auth2","client_id","scope","gapi","getAuthInstance","signOut","CheckGoogleAPI","ga","script","async","onload","ginterval","getGapi","createScript","refreshSession","RetrieveSession","Auth","currentSession","idToken","jwtToken","console","log","payload","exp","Math","round","getTime","asyncfuntion","signIn","username","user","currentAuthenticatedUser","attributes","signInUserSession","Signup","signUp","forgotPassword","Confirmsignup","confirmSignUp","completeNewPassword","currentuser","Resendcode","resendSignUp","GoogleCred","GoogleAPIScript","GetGoogleCredentials","federatedInfo","dataJSON","identityPoolId","region","userPoolId","userPoolWebClientId","vmdomain","Amplify","configure","tableColumns","tableIcons","Add","forwardRef","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","LibraryAdd","dbjson","setDB","tableList","setTableList","tableExpObj","setTableExpObj","tableTab","setTableTab","attrIpList","setAttrIpList","curTable","setCurTable","delAttrs","setDelAttrs","setIndexes","tabname","settabname","schemas","setSchemas","curSchema","setCurSchema","curAttr","setcurAttr","delCheck","setDelCheck","dbmap","setTableJson","tablestatus","setTableStatus","dbstatus","setDbStatus","liveflag","callOP","dbb","PopulateAllowedValues","dbJson","tableJSON","tableJson","tablelist","tbjson","curtable","db_output","tbs","handleAlert","handleConfirmation","handleTableTab","handleSelectAttrs","TableTabs","Table","attributename","columns","icons","search","pageSize","pageSizeOptions","actionsColumnIndex","onSelectionChange","icon","tooltip","isFreeAction","rowData","attributetype","delattrs","delcheck","evt","deleteschema","components","action","TableIndex","IndexInfo","primary","sortkey","infra","ondemand","toString","iops","read","write","secondary","indexname","finalList","tabexp","tables","alval","acttable","sch","cons","fields","condition","allowedvalues","attr","j","con","replace","eval","secindex","k","handleSchemaActions","updatepath","CheckDeleteLiveDB","CheckDeleteLiveTable","CheckLiveTable","constraints","TemplateIp","abc","setAbc","curPath","setCurPath","setOrder","formValues","setFormValues","handleDelete","Processobject","Obj","parent","objkey","objindex","mandatory","autopopulate","val","fmv","ProcessNormalInput","Field","handleAddJSOn","Processarrayofjson","arritem","arrindex","onDelete","handleFormChange","pop","oper","onchange","control","obj","tmporder","handleRemJson","temparr","tmppath","startIcon","handleEditForm","IterateJSON","ords","boolean","setText"],"mappings":"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","file":"static/js/main.66b7dcff.chunk.js","sourcesContent":["\r\nconst apiUrl = {\r\n    url:'',\r\n    vmurl:''\r\n};\r\n// const apiUrl = 'https://fjq8kwr4a5.execute-api.us-east-1.amazonaws.com/v1';\r\n\r\nexport default apiUrl;","const CognitoDetails = {\r\n    email:'',\r\n    accessToken:'',\r\n    User:{},\r\n}\r\n\r\nexport default CognitoDetails;","import React from 'react';\r\n\r\n//Material UI\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n//Material Icons\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\n\r\nconst MinMax = ({ props }) => {\r\n    const handleMinMax = (key) => {\r\n        if (key === 'add') {\r\n            let val = props.value + 1\r\n            props.clickHandler(props.field, val)\r\n        }\r\n        else if (key === 'minus') {\r\n            let val = props.value - 1\r\n            props.clickHandler(props.field, val)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box display=\"flex\" mb={1}>\r\n            <Box mr={1}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={() => handleMinMax('minus')}\r\n                    disabled={props.value - 1 < props.minvalue ? true : false}\r\n                >\r\n                    <RemoveIcon />\r\n                </Button>\r\n            </Box>\r\n            <Box mr={1}>\r\n                <Typography variant=\"h4\" color=\"primary\">{props.value}</Typography>\r\n            </Box>\r\n            <Box mr={1}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => handleMinMax('add')}\r\n                    color=\"primary\"\r\n                    disabled={props.value + 1 > props.maxvalue ? true : false}\r\n                >\r\n                    <AddIcon />\r\n                </Button>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default MinMax;","// Custom Components\r\nimport HandleAPI from './HandleApi';\r\nimport CognitoDetails from '../Pages/Cognito/CognitoDetails';\r\nimport Cognitofunctions from '../Pages/Cognito/CognitoFunctions';\r\n\r\n\r\n\r\nfunction GetRole(asyncfunction) {\r\n    HandleAPI.handleAPI(\"/users/users\", \"POST\", JSON.stringify({ \"EmailId\": CognitoDetails.email, \"TenantId\": sessionStorage.getItem('TenantId'), \"Action\": \"getroles\" }))\r\n        .then(result => {\r\n            if (result.status === 200) {\r\n                sessionStorage.setItem('roles', window.btoa(JSON.stringify(result.body.Roles)))\r\n                asyncfunction(true, result.body.Roles)\r\n            }\r\n            else {\r\n                asyncfunction(false, result)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, err)\r\n        })\r\n}\r\n\r\nfunction CheckRole(key, asyncfunction) {\r\n    Cognitofunctions.CurrentUser(function (success, data) {\r\n        if (success) {\r\n            if (sessionStorage.getItem('roles')) {\r\n                if ((JSON.parse(window.atob(sessionStorage.getItem('roles')))).indexOf(key) === -1) {\r\n                    window.location.href = window.location.origin + \"/#/app/login\"\r\n                }\r\n                else {\r\n                    asyncfunction(true)\r\n                }\r\n            }\r\n            else {\r\n                GetRole(function (success, data) {\r\n                    if (data.indexOf(key) === -1) {\r\n                        // asyncfunction(false)\r\n                        window.location.href = window.location.origin + \"/#/app/login\"\r\n                    }\r\n                    else {\r\n                        asyncfunction(true)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            window.location.href = window.location.origin + \"/#/app/login\"\r\n            // Cognitofunctions.GetGoogleCredentials(function (success) {\r\n            //     if (success) {\r\n            //         if (sessionStorage.getItem('roles')) {\r\n            //             if ((JSON.parse(window.atob(sessionStorage.getItem('roles')))).indexOf(key) === -1) {\r\n            //                 window.location.href = window.location.origin + \"/#/app/login\"\r\n            //             }\r\n            //             else {\r\n            //                 asyncfunction(true)\r\n            //             }\r\n            //         }\r\n            //         else {\r\n            //             GetRole(function (success, data) {\r\n            //                 if (data.indexOf(key) === -1) {\r\n            //                     // asyncfunction(false)\r\n            //                     window.location.href = window.location.origin + \"/#/app/login\"\r\n            //                 }\r\n            //                 else {\r\n            //                     asyncfunction(true)\r\n            //                 }\r\n            //             })\r\n            //         }\r\n            //     }\r\n            //     else {\r\n            //         window.location.href = window.location.origin + \"/#/app/login\"\r\n            //     }\r\n            // })\r\n        }\r\n    })\r\n}\r\n\r\nfunction GetUser(asyncfunction) {\r\n    let apidata = {\r\n        \"Action\": \"getuser\",\r\n        \"EmailId\": CognitoDetails.email,\r\n        \"TenantId\": sessionStorage.getItem('TenantId')\r\n    }\r\n    HandleAPI.handleAPI(\"/archeuser/user\", \"POST\", JSON.stringify(apidata))\r\n        .then(result => {\r\n            asyncfunction(true, result)\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, err)\r\n        })\r\n}\r\n\r\nfunction GetUserTenants(EmailId, asyncfunction) {\r\n    let apidata = {\r\n        EmailId: EmailId,\r\n        Action: \"getusertenants\"\r\n    }\r\n    HandleAPI.handleAPI(\"/users/users\", \"POST\", JSON.stringify(apidata))\r\n        .then(result => {\r\n            asyncfunction(true, result)\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, err)\r\n        })\r\n}\r\n\r\nexport default { GetRole, CheckRole, GetUser, GetUserTenants }","import HandleAPI from '../../Utils/HandleApi';\r\n\r\n\r\nfunction GetGitDetails(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                asyncfunction(true, { data: result.body, message: result.hasOwnProperty('message') ? result.message : \"\" })\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nfunction GetTemplateGitDetails(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                asyncfunction(true, { data: result.body, message: result.hasOwnProperty('message') ? result.message : \"\" })\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nfunction CreateOrPullBranches(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                asyncfunction(true, { data: result.body, message: result.hasOwnProperty('message') ? result.message : \"\" })\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nfunction CommitCode(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                asyncfunction(true, { data: result.body, message: result.hasOwnProperty('message') ? result.message : \"\" })\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nfunction ConfigureGit(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                asyncfunction(true, { data: result.body, message: result.hasOwnProperty('message') ? result.message : \"\" })\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nfunction ConfigureTemplateGit(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                asyncfunction(true, { data: result.body, message: result.hasOwnProperty('message') ? result.message : \"\" })\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nfunction ValidateCredentials(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                asyncfunction(true, { data: result.body, message: result.hasOwnProperty('message') ? result.message : \"\" })\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nfunction GetBranches(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                asyncfunction(true, { data: result.body, message: result.hasOwnProperty('message') ? result.message : \"\" })\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nfunction GetBranchesByType(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                asyncfunction(true, { data: result.body, message: result.hasOwnProperty('message') ? result.message : \"\" })\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nfunction GetRepoBranches(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                asyncfunction(true, { data: result.body, message: result.hasOwnProperty('message') ? result.message : \"\" })\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nexport default { GetGitDetails, CreateOrPullBranches, CommitCode, ConfigureGit, ValidateCredentials, GetBranches, GetBranchesByType, GetTemplateGitDetails, ConfigureTemplateGit,GetRepoBranches }","import React, { useState, useEffect } from 'react';\r\n\r\n// Custom Components\r\nimport Cognitofunctions from './CognitoFunctions';\r\nimport UserRoles from '../../Utils/UserRoles';\r\nimport CognitoDetails from './CognitoDetails';\r\nimport Loader from '../../Components/Loader';\r\nimport Alert from '../../Components/Alert';\r\n// import GoogleSignin from './GoogleSign';\r\nimport GitAPIs from '../Git/GitAPIs';\r\nimport apipath from '../../Utils/Apipath';\r\nimport apidomain from '../../Utils/ApiDomain';\r\n\r\n// Assets\r\nimport APLogo from '../../assets/images/ap-logo.png'\r\n\r\n// Material UI\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\n// import Typography from '@material-ui/core/Typography';\r\n\r\n// Router\r\nimport { NavLink } from 'react-router-dom';\r\n// import { useHistory } from \"react-router-dom\";\r\n\r\n// React Helmet\r\nimport Helmet from \"react-helmet/es/Helmet\";\r\n\r\n\r\nconst imgStyles = makeStyles((theme) => ({\r\n    logo: {\r\n        height: '32px'\r\n    }\r\n}))\r\n\r\nconst containerStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: '2rem',\r\n        backgroundColor: 'white',\r\n        maxWidth: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    }\r\n}))\r\n\r\nconst boxStyles = makeStyles((theme) => ({\r\n    root: {\r\n        maxWidth: '100rem',\r\n        width: '50%',\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            width: '75%'\r\n        },\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            width: '95%'\r\n        }\r\n    },\r\n    wrapper: {\r\n        margin: 'auto',\r\n        padding: '1rem 2rem',\r\n    }\r\n}))\r\n\r\nconst formStyles = makeStyles((theme) => ({\r\n    form: {\r\n        marginTop: '2rem',\r\n        width: '100%'\r\n    },\r\n    inputError: {\r\n        padding: '5px',\r\n        height: '2rem',\r\n    },\r\n    label: {\r\n        textAlign: 'left',\r\n        margin: '0 0 10px 0 !important',\r\n    },\r\n    common: {\r\n        width: '100%',\r\n        margin: '10px 0',\r\n        borderRadius: 0\r\n    }\r\n}));\r\n\r\nconst commonStyles = makeStyles((theme) => ({\r\n    wrapper: {\r\n        width: 'calc(100% - 64px)',\r\n        padding: '1rem',\r\n        margin: 'auto'\r\n    }\r\n}))\r\n\r\nconst LoginIndex = () => {\r\n    const [verificationCode, setVerificationCode] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confPass, setConfPass] = useState('')\r\n    const [openLogin, setOpenLogin] = useState(false)\r\n    const [openNewPassword, setOpenNewPassword] = useState(false)\r\n    const [openNotValidated, setOpenNotValidated] = useState(false)\r\n    const [openVerficationCode, setOpenVerficationCode] = useState(false)\r\n    const [chooseTenants, setChooseTenants] = useState(false)\r\n    const [tenantList, setTenantList] = useState([])\r\n    const [currentUser, setCurrentUser] = useState('')\r\n    const [loader, setLoader] = useState(false)\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [severity, setSeverrity] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const imgClasses = imgStyles()\r\n    const containerClasses = containerStyles()\r\n    const boxClasses = boxStyles()\r\n    const formClasses = formStyles()\r\n    const commonClasses = commonStyles()\r\n\r\n    // let history = useHistory();\r\n\r\n    // ReactGA.initialize('UA-156108870-1');\r\n\r\n    useEffect(() => {\r\n        // const ga = window.gapi && window.gapi.auth2 ?\r\n        //     window.gapi.auth2.getAuthInstance() :\r\n        //     null;\r\n        // if (!ga) {\r\n        //     createScript();\r\n        // }\r\n        let init = setInterval(function () {\r\n            if (sessionStorage.getItem('cognitoauth')) {\r\n                getCurrentUser()\r\n                clearInterval(init)\r\n            }\r\n        }, 100)\r\n        setOpenLogin(true)\r\n    }, [])\r\n\r\n    // function initGapi(g) {\r\n    //     g.load('auth2', function () {\r\n    //         g.auth2.init({\r\n    //             client_id: '38263492319-j1p2qgsvt2cr412jjfb6hstdjkslg81e.apps.googleusercontent.com',\r\n    //             // authorized scopes\r\n    //             scope: 'profile email openid'\r\n    //         }).then(res => {\r\n    //             sessionStorage.setItem('cookie-enabled', \"true\")\r\n    //         }).catch(err => {\r\n    //             if (err.hasOwnProperty('error') && err.error === \"idpiframe_initialization_failed\") {\r\n    //                 sessionStorage.setItem('cookie-enabled', \"false\")\r\n    //             }\r\n    //             setLoader(false)\r\n    //         })\r\n    //         getCurrentUser()\r\n    //     });\r\n    // }\r\n\r\n    // function createScript() {\r\n    //     // load the Google SDK\r\n    //     const script = document.createElement('script');\r\n    //     script.src = 'https://apis.google.com/js/platform.js';\r\n    //     script.async = true;\r\n    //     script.onload = getGapi();\r\n    //     document.body.appendChild(script);\r\n    // }\r\n\r\n    // function getGapi() {\r\n    //     // init the Google SDK client\r\n    //     let ginterval = setInterval(function () {\r\n    //         const g = window.gapi\r\n    //         if (g !== undefined) {\r\n    //             initGapi(g)\r\n    //             clearInterval(ginterval)\r\n    //         }\r\n    //     }, 1000)\r\n    // }\r\n\r\n    const handleAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n\r\n    const getCurrentUser = () => {\r\n        setLoader(true)\r\n        Cognitofunctions.CurrentUser(function (success, data) {\r\n            if (success) {\r\n                setCurrentUser(data)\r\n                // Getrole();\r\n                // GetTenants(data.attributes.email);\r\n                GetUser();\r\n                // setLoader(false)\r\n            }\r\n            else {\r\n                setLoader(false)\r\n                window.location.href = window.location.origin + \"/#/app/login\"\r\n                // Cognitofunctions.GetGoogleCredentials(function (success) {\r\n                //     if (success) {\r\n                //         GetUser();\r\n                //     }\r\n                //     else {\r\n                //         setLoader(false)\r\n                //     }\r\n                // })\r\n                // Cognitofunctions.GetCognitoIdentityCredentials()\r\n            }\r\n        })\r\n    }\r\n\r\n    const Login = () => {\r\n        setLoader(true)\r\n        Cognitofunctions.Signin({ \"email\": email, \"password\": password }, function (success, data) {\r\n            if (success) {\r\n                if (data.challengeName === 'NEW_PASSWORD_REQUIRED') {\r\n                    setCurrentUser(data)\r\n                    setOpenLogin(false)\r\n                    setLoader(false)\r\n                    setOpenNewPassword(true)\r\n                }\r\n                else {\r\n                    getCurrentUser()\r\n                }\r\n            }\r\n            else {\r\n                setLoader(false)\r\n                if (data.code !== 'UserNotConfirmedException') {\r\n                    setMessage(data.message)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n                // if (data.code === \"UserNotConfirmedException\") {\r\n                //     // setOpenLogin(false)\r\n                //     // setOpenNotValidated(true)\r\n                //     getCurrentUser()\r\n                // }\r\n            }\r\n        })\r\n    }\r\n\r\n    const NewPassword = () => {\r\n        setLoader(true)\r\n        if (password === confPass) {\r\n            Cognitofunctions.Completenewpassword({ \"currentuser\": currentUser, \"password\": password }, function (success, data) {\r\n                if (success) {\r\n                    setMessage(\"Password Changed successfully\")\r\n                    setSeverrity('success')\r\n                    setOpenAlert(true)\r\n                    getCurrentUser()\r\n                }\r\n                else {\r\n                    setMessage(data.message)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                    setLoader(false)\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            setMessage('Password and Confirm Password did not match')\r\n            setSeverrity('error')\r\n            setOpenAlert(true)\r\n            setLoader(false)\r\n        }\r\n    }\r\n\r\n    const ResendCode = () => {\r\n        setLoader(true)\r\n        Cognitofunctions.Resendcode({ 'email': email }, function (success, data) {\r\n            if (success) {\r\n                setLoader(false)\r\n                setOpenVerficationCode(true)\r\n                setVerificationCode('')\r\n                setMessage(\"Code resent successfully\")\r\n                setSeverrity('success')\r\n                setOpenAlert(true)\r\n            }\r\n            else {\r\n                setMessage(data.message)\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n                setLoader(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    const ConfirmSignUp = () => {\r\n        setLoader(true)\r\n        Cognitofunctions.Confirmsignup({ 'email': email, 'code': verificationCode }, function (success, data) {\r\n            if (success) {\r\n                setOpenVerficationCode(false)\r\n                setVerificationCode('')\r\n                setOpenNotValidated(false)\r\n                setOpenLogin(true)\r\n                setMessage(\"Account verified successfully.\")\r\n                setSeverrity('success')\r\n                setOpenAlert(true)\r\n                setLoader(false)\r\n            }\r\n            else {\r\n                setMessage(data.message)\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n                setLoader(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    // const validateEmail = (value) => {\r\n    //     let reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/;\r\n    //     if (reg.test(value) === false) {\r\n    //         return false;\r\n    //     }\r\n    //     else {\r\n    //         return true;\r\n    //     }\r\n    // }\r\n\r\n    // const validatePassword = (value) => {\r\n\r\n    // }\r\n\r\n    const handleEmailChange = (event) => {\r\n        setEmail(event.target.value)\r\n    }\r\n\r\n    const handlePasswordChange = (event) => {\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const handleConfPasswordChange = (event) => {\r\n        setConfPass(event.target.value)\r\n    }\r\n\r\n    const handleVerficationCodeChange = (event) => {\r\n        setVerificationCode(event.target.value)\r\n    }\r\n\r\n    const GetUser = () => {\r\n        UserRoles.GetUser(function (success, result) {\r\n            if (success) {\r\n                if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                    CognitoDetails.User = result.body\r\n                    sessionStorage.setItem('user', window.btoa(JSON.stringify(result.body)))\r\n                    window.location.href = window.location.origin + \"/#/app/gitsetup\"\r\n                    // if (sessionStorage.getItem('subscribe')) {\r\n                    //     window.location.href = window.location.origin + \"/#/user/addsubscriptions?planId=\" + sessionStorage.getItem('subscribe')\r\n                    // }\r\n                    // else {\r\n                    //     if (result.body.Trial === \"NotDone\") {\r\n                    //         window.location.href = window.location.origin + \"/#/user\"\r\n                    //     }\r\n                    //     else {\r\n                    //     }\r\n                    // }\r\n                }\r\n                else {\r\n                    setMessage(result.errorMessage)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                    setLoader(false)\r\n                    if (result.errorMessage === \"User Not Present in Company\") {\r\n                        Cognitofunctions.Signout()\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    const GetTenants = (EmailId) => {\r\n        UserRoles.GetUserTenants(EmailId, function (success, result) {\r\n            if (success) {\r\n                if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                    CognitoDetails.TenantsList = result.body.Tenants\r\n                    if (result.body.Tenants.length > 0 && result.body.Tenants.length === 1) {\r\n                        sessionStorage.setItem('Tenants', window.btoa(JSON.stringify(result.body.Tenants)))\r\n                        sessionStorage.setItem('TenantId', result.body.Tenants[0].TenantId)\r\n                        GetUser();\r\n                    }\r\n                    else if (result.body.Tenants.length > 0) {\r\n                        sessionStorage.setItem('Tenants', window.btoa(JSON.stringify(result.body.Tenants)))\r\n                        sessionStorage.setItem('TenantId', result.body.Tenants[0].TenantId)\r\n                        GetUser();\r\n                    }\r\n                    else {\r\n                        GetUser();\r\n                    }\r\n                }\r\n                else {\r\n                    setMessage(result.errorMessage)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                    setLoader(false)\r\n                    console.log(\"something\")\r\n                    if (result.errorMessage === \"User Not Present in Company\") {\r\n                        Cognitofunctions.Signout()\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    // const Getrole = () => {\r\n    //     UserRoles.GetRole(function (success, data) {\r\n    //         if (success) {\r\n    //             if (sessionStorage.getItem('subscribe')) {\r\n    //                 window.location.href = window.location.origin + \"/#/user/addsubscriptions?planId=\" + sessionStorage.getItem('subscribe')\r\n    //             }\r\n    //             else {\r\n    //                 window.location.href = window.location.origin + \"/#/app/products\"\r\n    //             }\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    const handleEnterClick = (clickHandler, event) => {\r\n        var code = event.keyCode || event.which;\r\n        if (code === 13) {\r\n            event.preventDefault()\r\n            clickHandler()\r\n        }\r\n    }\r\n\r\n    // const handleTenantSelect = (TenantId) => {\r\n    //     setLoader(true)\r\n    //     sessionStorage.setItem('TenantId', TenantId)\r\n    //     GetUser()\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <Helmet>\r\n                <title>Login to Archeplay</title>\r\n            </Helmet>\r\n            <Loader open={loader} type=\"page\" />\r\n            <Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n            <Container className={containerClasses.root}>\r\n                <Box className={boxClasses.root} boxShadow={2} bgcolor=\"#fcfcfc\">\r\n                    <Box className={boxClasses.wrapper}>\r\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                            <Box display=\"flex\">\r\n                                <img className={imgClasses.logo} src={APLogo} alt=\"Archeplay\" />\r\n                            </Box>\r\n                            <Box>\r\n                                {\r\n                                    openLogin === true ?\r\n                                        <h2 style={{ margin: '7px' }}>Login</h2>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                {\r\n                                    openNewPassword === true ?\r\n                                        <h2>Complete New Password</h2>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                {\r\n                                    openNotValidated === true ?\r\n                                        <h2>Verify User</h2>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                {\r\n                                    chooseTenants === true ?\r\n                                        <h2>Choose Tenant</h2>\r\n                                        :\r\n                                        null\r\n                                }\r\n                            </Box>\r\n                        </Box>\r\n\r\n                        <Box>\r\n                            {\r\n                                openLogin === true ?\r\n                                    <div className={commonClasses.wrapper}>\r\n                                        <form className={formClasses.form} autoComplete=\"off\">\r\n                                            <FormControl className={formClasses.common}>\r\n                                                <label required className={`${formClasses.label} ${formClasses.common}`} htmlFor=\"login-email\">Email Address</label>\r\n                                                <input type=\"email\" placeholder=\"example@domain.com\" onChange={handleEmailChange} autoComplete=\"off\"></input>\r\n                                            </FormControl>\r\n                                            <FormControl className={formClasses.common}>\r\n                                                <label required className={`${formClasses.label} ${formClasses.common}`} htmlFor=\"login-pass\">Password</label>\r\n                                                <input type=\"password\" placeholder=\"********\" onChange={handlePasswordChange} autoComplete=\"off\" onKeyPress={handleEnterClick.bind(this, Login)}></input>\r\n                                                <small style={{ color: 'darkgrey', textAlign: 'left' }}>Your password should be more than seven characters and it should contain\r\n                                                atleast one uppercase,one lowercase,one special\r\n                                        character and one numeric value.</small>\r\n                                            </FormControl>\r\n                                            <Button\r\n                                                className={formClasses.common}\r\n                                                color=\"primary\"\r\n                                                variant=\"contained\"\r\n                                                onClick={Login}\r\n                                            >\r\n                                                Login\r\n                                        </Button>\r\n                                            {/* <Box mt={1} mb={2} display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                                            or\r\n                                        </Box> */}\r\n                                            {/* <Button\r\n                                            className={formClasses.common}\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                            onClick={() => {\r\n                                                Cognitofunctions.FederatedSignin()\r\n                                            }}\r\n                                        >\r\n                                            Google\r\n                                        </Button> */}\r\n                                            {/* <GoogleSignin /> */}\r\n                                        </form>\r\n                                        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mt={2}>\r\n                                            <NavLink to=\"/app/login/forgot-password\" style={{ textDecoration: 'none' }}>\r\n                                                Forgot Password?\r\n                                        </NavLink>\r\n                                            {/* <NavLink to=\"/app/signup\" style={{ textDecoration: 'none' }}>\r\n                                                Don't have an account? Register\r\n                                        </NavLink> */}\r\n                                        </Box>\r\n                                    </div>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            {\r\n                                openNewPassword === true ?\r\n                                    <div>\r\n                                        <form className={formClasses.form} autoComplete=\"off\">\r\n                                            <FormControl className={formClasses.common}>\r\n                                                <label required className={`${formClasses.label} ${formClasses.common}`} htmlFor=\"login-pass\">New Password</label>\r\n                                                <input type=\"password\" placeholder=\"********\" onChange={handlePasswordChange} autoComplete=\"off\"></input>\r\n                                                <small style={{ color: 'darkgrey', textAlign: 'left' }}>Your password should be more than seven characters and it should contain\r\n                                                atleast one uppercase,one lowercase,one special\r\n                                        character and one numeric value.</small>\r\n                                            </FormControl>\r\n                                            <FormControl className={formClasses.common}>\r\n                                                <label required className={`${formClasses.label} ${formClasses.common}`} htmlFor=\"login-pass\">Confirm Password</label>\r\n                                                <input type=\"password\" placeholder=\"********\" onChange={handleConfPasswordChange} onKeyPress={handleEnterClick.bind(this, NewPassword)} autoComplete=\"off\"></input>\r\n                                                <small style={{ color: 'darkgrey', textAlign: 'left' }}>Confirm Password should match with the above password</small>\r\n                                            </FormControl>\r\n                                            <Button\r\n                                                className={formClasses.common}\r\n                                                color=\"primary\"\r\n                                                variant=\"contained\"\r\n                                                onClick={NewPassword}\r\n                                            >\r\n                                                Submit\r\n                                    </Button>\r\n                                        </form>\r\n                                    </div>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginIndex","import React, { useState, useEffect } from 'react';\r\n\r\n// Assets\r\nimport APLogo from '../../assets/images/ap-logo.png'\r\n\r\n// Material UI\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n// Custom Components\r\nimport Cognitofunctions from './CognitoFunctions';\r\nimport Loader from '../../Components/Loader';\r\nimport Alert from '../../Components/Alert';\r\n\r\n// React Helmet\r\nimport Helmet from \"react-helmet/es/Helmet\";\r\n\r\n// Router\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst imgStyles = makeStyles((theme) => ({\r\n    logo: {\r\n        height: '32px'\r\n    }\r\n}))\r\n\r\nconst containerStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: '2rem',\r\n        backgroundColor: 'white',\r\n        maxWidth: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    }\r\n}))\r\n\r\nconst boxStyles = makeStyles((theme) => ({\r\n    root: {\r\n        maxWidth: '100rem',\r\n        width: '50%',\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            width: '75%'\r\n        },\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            width: '95%'\r\n        }\r\n    },\r\n    wrapper: {\r\n        margin: 'auto',\r\n        padding: '2rem',\r\n    }\r\n}))\r\n\r\nconst formStyles = makeStyles((theme) => ({\r\n    form: {\r\n        marginTop: '2rem',\r\n        width: '100%'\r\n    },\r\n    inputError: {\r\n        padding: '5px',\r\n        height: '2rem',\r\n    },\r\n    label: {\r\n        textAlign: 'left',\r\n        margin: '0 0 10px 0 !important',\r\n    },\r\n    common: {\r\n        width: '100%',\r\n        margin: '10px 0',\r\n        borderRadius: 0\r\n    }\r\n}));\r\n\r\nconst commonStyles = makeStyles((theme) => ({\r\n    wrapper: {\r\n        width: 'calc(100% - 64px)',\r\n        padding: '1rem',\r\n        margin: 'auto'\r\n    }\r\n}))\r\n\r\nconst ForgotPasswordIndex = () => {\r\n    const [verificationCode, setVerificationCode] = useState('')\r\n    const [openVerficationCode, setOpenVerficationCode] = useState(false)\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [loader, setLoader] = useState(false)\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [severity, setSeverrity] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [confPass, setConfPass] = useState('')\r\n\r\n    const imgClasses = imgStyles()\r\n    const containerClasses = containerStyles()\r\n    const boxClasses = boxStyles()\r\n    const formClasses = formStyles()\r\n    const commonClasses = commonStyles()\r\n    let history = useHistory();\r\n\r\n    useEffect(() => {\r\n        setOpenVerficationCode(false)\r\n    }, [])\r\n\r\n    const handleAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n\r\n    // const validateEmail = (value) => {\r\n    //     let reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/;\r\n    //     if (reg.test(value) === false) {\r\n    //         return false;\r\n    //     }\r\n    //     else {\r\n    //         return true;\r\n    //     }\r\n    // }\r\n    // const validatePassword = (value) => {\r\n\r\n    // }\r\n\r\n    const forgotPasswordTrigger = () => {\r\n        setLoader(true)\r\n        Cognitofunctions.ForgotPasswordTrigger({ \"email\": email }, function (success, data) {\r\n            if (success) {\r\n                setMessage(\"Verification code sent to your email.\")\r\n                setSeverrity('success')\r\n                setOpenAlert(true)\r\n                setLoader(false)\r\n                setOpenVerficationCode(true)\r\n            }\r\n            else {\r\n                setMessage(data.message)\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n                setLoader(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    const forgotPasswordSubmit = () => {\r\n        setLoader(true)\r\n        if (password === confPass) {\r\n            Cognitofunctions.ForgotPasswordConfirm({ \"email\": email, \"code\": verificationCode, \"password\": password }, function (success, data) {\r\n                if (success) {\r\n                    setMessage(\"Password Changed successfully.\")\r\n                    setSeverrity('success')\r\n                    setOpenAlert(true)\r\n                    setTimeout(function () {\r\n                        // window.location.href = window.location.origin + \"/login\"\r\n                        // window.location.href = window.location.origin\r\n                        history.push('/app/login')\r\n                    }, 1000)\r\n                }\r\n                else {\r\n                    setMessage(data.message)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                    setLoader(false)\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            setMessage('Password and Confirm Password did not match')\r\n            setSeverrity('error')\r\n            setOpenAlert(true)\r\n            setLoader(false)\r\n        }\r\n    }\r\n\r\n    const handleEmailChange = (event) => {\r\n        setEmail(event.target.value)\r\n    }\r\n\r\n    const handlePasswordChange = (event) => {\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    const handleVerficationCodeChange = (event) => {\r\n        setVerificationCode(event.target.value)\r\n    }\r\n\r\n    const handleConfPasswordChange = (event) => {\r\n        setConfPass(event.target.value)\r\n    }\r\n\r\n    const handleEnterClick = (clickHandler, event) => {\r\n        var code = event.keyCode || event.which;\r\n        if (code === 13) {\r\n            event.preventDefault()\r\n            clickHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Loader open={loader} type=\"page\" />\r\n            <Helmet>\r\n                <title>Archeplay - Reset Password</title>\r\n            </Helmet>\r\n            <Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n            <Container className={containerClasses.root}>\r\n                <Box className={boxClasses.root} boxShadow={2} bgcolor=\"#fcfcfc\">\r\n                    <Box className={boxClasses.wrapper}>\r\n                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                            <Box display=\"flex\">\r\n                                <img className={imgClasses.logo} src={APLogo} alt=\"Archeplay\" />\r\n                            </Box>\r\n                            <Box display=\"flex\">\r\n                                <h2 style={{ margin: '7px' }}>Forgot Password</h2>\r\n                            </Box>\r\n                        </Box>\r\n                        <Box>\r\n                            <div className={commonClasses.wrapper}>\r\n                                <form className={formClasses.form} autoComplete=\"off\">\r\n                                    <FormControl className={formClasses.common}>\r\n                                        <label required className={`${formClasses.label} ${formClasses.common}`} htmlFor=\"login-email\">Email Address</label>\r\n                                        <input type=\"email\" placeholder=\"example@domain.com\" onChange={handleEmailChange} onKeyPress={handleEnterClick.bind(this, forgotPasswordTrigger)}></input>\r\n                                    </FormControl>\r\n                                    {\r\n                                        openVerficationCode === true ?\r\n                                            <Box>\r\n                                                <FormControl className={formClasses.common}>\r\n                                                    <label required className={`${formClasses.label} ${formClasses.common}`} htmlFor=\"login-pass\">Password</label>\r\n                                                    <input type=\"password\" placeholder=\"********\" onChange={handlePasswordChange}></input>\r\n                                                    <small style={{ color: 'darkgrey', textAlign: 'justify' }}>\r\n                                                        Your password should be more than seven characters and it should contain\r\n                                                        atleast one uppercase,one lowercase,one special\r\n                                                        character and one numeric value.\r\n                                                </small>\r\n                                                </FormControl>\r\n                                                <FormControl className={formClasses.common}>\r\n                                                    <label required className={`${formClasses.label} ${formClasses.common}`} htmlFor=\"login-pass\">Confirm Password</label>\r\n                                                    <input type=\"password\" placeholder=\"********\" onChange={handleConfPasswordChange} autoComplete=\"off\"></input>\r\n                                                    <small style={{ color: 'darkgrey', textAlign: 'left' }}>Confirm Password should match with the above password</small>\r\n                                                </FormControl>\r\n                                                <FormControl className={formClasses.common}>\r\n                                                    <label required className={`${formClasses.label} ${formClasses.common}`} htmlFor=\"login-pass\">Verification Code</label>\r\n                                                    <input type=\"text\" placeholder=\"Enter 6 digit verification code\" onChange={handleVerficationCodeChange} onKeyPress={handleEnterClick.bind(this, forgotPasswordSubmit)}></input>\r\n                                                </FormControl>\r\n                                            </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    <Button\r\n                                        className={formClasses.common}\r\n                                        color=\"primary\"\r\n                                        variant=\"contained\"\r\n                                        onClick={openVerficationCode === true ? forgotPasswordSubmit : forgotPasswordTrigger}\r\n                                    >\r\n                                        submit\r\n                            </Button>\r\n                                </form>\r\n                                <Box display=\"flex\" justifyContent=\"space-around\" alignItems=\"center\">\r\n                                    <NavLink to=\"/app/login\" style={{ textDecoration: 'none' }}>\r\n                                        Take me to Login\r\n                                    </NavLink>\r\n                                </Box>\r\n                            </div>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ForgotPasswordIndex","const Data = {\r\n    ProductList:[],\r\n    ActiveProduct:{},\r\n    ServiceList:[],\r\n    ActiveService:{},\r\n    SharedBranches:[],\r\n    EnvBranches:[],\r\n    \"serviceTemplates\":[]\r\n}\r\n\r\nexport default Data;","import HandleAPI from '../../Utils/HandleApi';\r\nimport DataList from '../../Utils/DataList';\r\n\r\n\r\nfunction GetAllProducts(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                if (result.body.length > 0) {\r\n                    DataList.ProductList = result.body\r\n                    sessionStorage.setItem('Products', window.btoa(JSON.stringify(result.body)))\r\n                    asyncfunction(true, { data: result.body })\r\n                }\r\n                else {\r\n                    asyncfunction(true, {data: [],error:true })\r\n                }\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nfunction GetSpecificProduct(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                DataList.ActiveProduct = result.body\r\n                sessionStorage.setItem('CurrentProduct', window.btoa(JSON.stringify(result.body)))\r\n                asyncfunction(true, { data: result.body })\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nfunction AddProduct(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n    .then(result => {\r\n        if (result === null) {\r\n            asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n        }\r\n        else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n            DataList.ActiveProduct = result.body\r\n            sessionStorage.setItem('CurrentProduct', window.btoa(JSON.stringify(result.body)))\r\n            asyncfunction(true, { data: result.body,message:result.hasOwnProperty('message') === true ? result.message : \"\" })\r\n        }\r\n        else {\r\n            asyncfunction(false, { message: result.errorMessage })\r\n        }\r\n    })\r\n    .catch(err => {\r\n        asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n    })\r\n}\r\n\r\nfunction DeleteProduct(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                asyncfunction(true, { data: result.body, message: result.hasOwnProperty('message') ? result.message : \"\" })\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nexport default { GetAllProducts, GetSpecificProduct, AddProduct,DeleteProduct } ","import React, { useState } from 'react'\r\n\r\n//Material UI\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Box from '@material-ui/core/Box';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl'\r\n\r\n//Custom Component\r\nimport Loader from '../../Components/Loader';\r\nimport Alert from '../../Components/Alert'\r\nimport DataList from '../../Utils/DataList';\r\nimport ProductAPIs from './ProductAPIs';\r\nimport apidomain from '../../Utils/ApiDomain';\r\nimport apipath from '../../Utils/Apipath';\r\n\r\n\r\nconst AddProduct = ({ Handler }) => {\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [severity, setSeverrity] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [loader, setLoader] = useState(false)\r\n    const [dialog, setDialog] = useState(true)\r\n    const [formData, setFormData] = useState({})\r\n    const [prodname, setprodname] = useState('')\r\n\r\n    const handleAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n\r\n    const handleFormDataChage = (field, event) => {\r\n        let formFields = formData;\r\n        if (field === \"productname\") {\r\n            const re = /^[a-zA-Z][a-zA-Z0-9_]*[a-zA-Z0-9]*$/;\r\n            if (re.test(event.target.value)) {\r\n                formFields[field] = event.target.value.toLowerCase();\r\n                setprodname(event.target.value.toLowerCase())\r\n            }\r\n            else if (event.target.value === \"\") {\r\n                formFields[field] = event.target.value;\r\n                setprodname(event.target.value)\r\n            }\r\n        }\r\n        else {\r\n            formFields[field] = event.target.value;\r\n        }\r\n        setFormData(formFields);\r\n    }\r\n\r\n    const SubmitHandler = (key) => {\r\n        if (!key) {\r\n            Handler()\r\n        }\r\n        else {\r\n            setLoader(true)\r\n            let canSubmit = true, requireAttrs = ['productname']\r\n            for (let i = 0; i < requireAttrs.length; i++) {\r\n                if (formData[requireAttrs[i]] === undefined || formData[requireAttrs[i]] === \"\" || formData[requireAttrs[i]] === []) {\r\n                    canSubmit = false\r\n                    setLoader(false)\r\n                    setMessage(\"Please fill the required details.\")\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            }\r\n            if (canSubmit) {\r\n                let apidata = {\r\n                    method: \"POST\",\r\n                    path: apipath['apipath'] + \"/product\",\r\n                    headers: {\r\n                        headers: true,\r\n                        apidomain: apidomain.vmurl\r\n                    },\r\n                    body: formData,\r\n                }\r\n                ProductAPIs.AddProduct(apidata, function (success, response) {\r\n                    if (success) {\r\n                        if (response.hasOwnProperty('message') && response.message !== \"\") {\r\n                            setMessage(response.message)\r\n                            setSeverrity('info')\r\n                            setOpenAlert(true)\r\n                        }\r\n                        let prods = DataList.ProductList.length > 0 ? DataList.ProductList : (sessionStorage.getItem('Products') ? JSON.parse(window.atob(sessionStorage.getItem('Products'))) : [])\r\n                        prods.push(response.data)\r\n                        DataList.ProductList = prods\r\n                        sessionStorage.setItem('Products', window.btoa(JSON.stringify(prods)))\r\n                        sessionStorage.setItem('CurrentProduct', window.btoa(JSON.stringify(response.data)))\r\n                        DataList.ActiveProduct = response.data\r\n                        sessionStorage.removeItem('Services')\r\n                        sessionStorage.removeItem('CurrentService')\r\n                        DataList.ServiceList = []\r\n                        DataList.ActiveService = {}\r\n                        setLoader(false)\r\n                        setDialog(false)\r\n                        window.setTimeout(function () {\r\n                            Handler()\r\n                            window.location.href = window.location.origin + \"/#/app/products/\" + response.data.productid + \"/service_templates\"\r\n                            // window.location.reload()\r\n                        }, 1000)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Loader type=\"page\" open={loader} />\r\n            <Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n            <Dialog open={dialog} onClose={() => SubmitHandler(false)} aria-labelledby=\"form-dialog-title\" maxWidth=\"sm\" fullWidth>\r\n                <DialogTitle id=\"form-dialog-title\">Create Product</DialogTitle>\r\n                <DialogContent>\r\n                    <Box>\r\n                        <form style={{}} autoComplete=\"off\">\r\n                            <Box mb={1}>\r\n                                <FormControl fullWidth>\r\n                                    <label htmlFor=\"ProductName\" required>Product Name</label>\r\n                                    <TextField\r\n                                        id=\"ProductName\"\r\n                                        required\r\n                                        fullWidth\r\n                                        value={prodname}\r\n                                        placeholder=\"Enter Product Name\"\r\n                                        onChange={handleFormDataChage.bind(this, \"productname\")}\r\n                                        variant=\"outlined\"\r\n                                        helperText=\"No capital letters,special characters except underscore is allowed.\"\r\n                                    >\r\n                                    </TextField>\r\n                                </FormControl>\r\n                            </Box>\r\n                            <Box>\r\n                                <FormControl fullWidth>\r\n                                    <label htmlFor=\"Description\">Description</label>\r\n                                    <TextField\r\n                                        id=\"Description\"\r\n                                        required\r\n                                        fullWidth\r\n                                        placeholder=\"Enter Description\"\r\n                                        onChange={handleFormDataChage.bind(this, \"description\")}\r\n                                        variant=\"outlined\"\r\n                                        multiline\r\n                                        rows={3}\r\n                                    >\r\n                                    </TextField>\r\n                                </FormControl>\r\n                            </Box>\r\n                        </form>\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => SubmitHandler(false)} color=\"secondary\" variant=\"outlined\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => SubmitHandler(true)} color=\"primary\" className=\"api-btn\" variant=\"contained\">\r\n                        Create\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddProduct;","import React, { useState } from 'react';\r\n\r\n//Material UI\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n//Custom Component\r\nimport DataList from '../../Utils/DataList';\r\nimport Loader from '../../Components/Loader';\r\nimport Alert from '../../Components/Alert'\r\nimport ProductAPIs from './ProductAPIs';\r\nimport AddProduct from './AddProduct';\r\nimport Confirm from '../../Components/Confirm';\r\nimport apidomain from '../../Utils/ApiDomain';\r\nimport apipath from '../../Utils/Apipath';\r\nimport GitAPIs from '../Git/GitAPIs';\r\n\r\n//Material Icons\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n// Styles\r\nimport TypographyStyles from '../../assets/styles/TypographySyles';\r\n\r\nconst ProductIndex = () => {\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [severity, setSeverrity] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [loader, setLoader] = useState(false)\r\n    const [confirmation, setConfirmation] = useState('')\r\n    const [confApiData, setConfApiData] = useState({})\r\n    const [productList, setProductList] = useState(DataList.ProductList.length > 0 ? DataList.ProductList : (sessionStorage.getItem('Products') ? JSON.parse(window.atob(sessionStorage.getItem('Products'))) : []))\r\n    const [newProd, setNewProd] = useState(false)\r\n    const [curProd, setCurProd] = useState(Object.keys(DataList.ActiveProduct).length > 0 ? DataList.ActiveProduct : (sessionStorage.getItem('CurrentProduct') ? JSON.parse(window.atob(sessionStorage.getItem('CurrentProduct'))) : {}))\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const openPopover = Boolean(anchorEl);\r\n    const id = openPopover ? 'simple-popover' : undefined;\r\n\r\n    const typographyClasses = TypographyStyles()\r\n\r\n\r\n    const handleAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n\r\n    const manageAPIs = (apidata) => {\r\n        if (apidata.ref === \"GetGitCredentials\") {\r\n            GitAPIs.GetGitDetails(apidata, function (success, response) {\r\n                if (success) {\r\n                    if (Object.keys(response.data).length > 0) {\r\n                        setAnchorEl(null)\r\n                        setNewProd(true)\r\n                    }\r\n                    else {\r\n                        setMessage(\"Configure Git create a product\")\r\n                        setSeverrity('error')\r\n                        setOpenAlert(true)\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        else if (apidata.ref === \"DeleteProduct\") {\r\n            ProductAPIs.DeleteProduct(apidata, function (success, response) {\r\n                if (success) {\r\n                    if (response.hasOwnProperty('message') && response.message !== \"\") {\r\n                        setMessage(response.message)\r\n                        setSeverrity('info')\r\n                        setOpenAlert(true)\r\n                    }\r\n                    DataList.ActiveProduct = {}\r\n                    DataList.ServiceList = []\r\n                    DataList.ProductList = []\r\n                    DataList.ActiveService = {}\r\n                    sessionStorage.removeItem('CurrentProduct')\r\n                    sessionStorage.removeItem('Services')\r\n                    sessionStorage.removeItem('Products')\r\n                    sessionStorage.removeItem('CurrentService')\r\n                    window.setTimeout(function () {\r\n                        window.location.href = window.location.origin + \"/#/app/products/\"\r\n                        window.location.reload()\r\n                    }, 1000)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleActions = (apidata) => {\r\n        if (apidata.Action === 'redirect') {\r\n            window.open(apidata.url, '_blank')\r\n        }\r\n        else if (apidata.Action === 'refresh') {\r\n        }\r\n        else if (apidata.Action === \"confirmation\") {\r\n            setConfApiData(apidata['apidata'])\r\n            setConfirmation(apidata.confirmText)\r\n        }\r\n        else {\r\n            if (apidata.method === \"DELETE\") {\r\n                setAnchorEl(null)\r\n                setLoader(true)\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n    }\r\n\r\n    const handleUserClick = (event) => {\r\n        setProductList(DataList.ProductList.length > 0 ? DataList.ProductList : (sessionStorage.getItem('Products') ? JSON.parse(window.atob(sessionStorage.getItem('Products'))) : []))\r\n        setCurProd(Object.keys(DataList.ActiveProduct).length > 0 ? DataList.ActiveProduct : (sessionStorage.getItem('CurrentProduct') ? JSON.parse(window.atob(sessionStorage.getItem('CurrentProduct'))) : {}))\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handlePopoverClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const ChangeProduct = (product) => {\r\n        setAnchorEl(null)\r\n        if (curProd.productid !== product.productid) {\r\n            setLoader(true)\r\n            sessionStorage.setItem('CurrentProduct', window.btoa(JSON.stringify(product)))\r\n            DataList.ActiveProduct = product\r\n            sessionStorage.removeItem('Services')\r\n            sessionStorage.removeItem('CurrentService')\r\n            DataList.ServiceList = []\r\n            DataList.ActiveService = {}\r\n        }\r\n        window.location.href = window.location.origin + \"/#/app/products/\" + product.productid + \"/services\"\r\n        // window.location.reload()\r\n    }\r\n\r\n    const CancelAddProduct = () => {\r\n        setNewProd(false)\r\n    }\r\n\r\n    const handleConfirmation = (key) => {\r\n        setConfirmation('')\r\n        if (key) {\r\n            handleActions(confApiData)\r\n            // console.log(confApiData)\r\n            setConfApiData({})\r\n        }\r\n        else {\r\n            setConfApiData({})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n            <Loader open={loader} type=\"page\" />\r\n            <Box mr={2} display=\"flex\" alignItems=\"center\" style={{ height: '100%' }} className={`${\"top-nav-link\"}`} position=\"relative\" onClick={handleUserClick}>\r\n                <Box display=\"flex\" alignItems=\"center\" p={0.5} pl={1} pr={1} style={{ cursor: 'pointer' }} className=\"links\">\r\n                    <Box display=\"flex\" alignItems=\"center\" color=\"#6f7071\" mr={0.5}>\r\n                        <Typography className={typographyClasses.text} style={{ fontWeight: 'bold' }}>{Object.keys(curProd).length > 0 ? <span><span>Product&nbsp;-&nbsp;</span><span style={{ color: '#3F51B5' }}>{curProd.productname}</span></span> : \"Product\"}</Typography>\r\n                    </Box>\r\n                    <Box color=\"gray\" display=\"flex\">\r\n                        {\r\n                            anchorEl === null ?\r\n                                <ExpandMoreIcon fontSize=\"small\" />\r\n                                :\r\n                                <ExpandLessIcon fontSize=\"small\" />\r\n                        }\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n            <Popover\r\n                id={id}\r\n                open={openPopover}\r\n                anchorEl={anchorEl}\r\n                onClose={handlePopoverClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                }}\r\n            >\r\n                <Box bgcolor=\"white\" boxShadow={2} height={240} width={260}>\r\n                    <Box height={200} overflow=\"auto\">\r\n                        {\r\n                            productList.length > 0 ?\r\n                                <Box style={{ width: '100%' }}>\r\n                                    {\r\n                                        productList.map((prod, index) => {\r\n                                            return (\r\n                                                <Box style={{ width: '100%', cursor: 'pointer' }} p={1} key={index} bgcolor={curProd.productid === prod.productid ? \"#f5f5f5\" : \"white\"} onClick={() => ChangeProduct(prod)}>\r\n                                                    <Box color={curProd.productid === prod.productid ? \"#3F51B5\" : \"gray\"} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                                                        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n                                                            <Typography className={typographyClasses.text} align=\"left\" color=\"inherit\">{prod.productname}</Typography>\r\n                                                            <Typography className={typographyClasses.smallText} align=\"left\" color=\"inherit\">{prod.productid}</Typography>\r\n                                                        </Box>\r\n                                                        <Box display=\"flex\"\r\n                                                            onClick={(event) => {\r\n                                                                event.stopPropagation()\r\n                                                                handleActions({\r\n                                                                    Action: \"confirmation\",\r\n                                                                    confirmText: \"Are you sure you want to delete this product(\" + prod.productname + \")?\",\r\n                                                                    apidata: {\r\n                                                                        method: \"DELETE\",\r\n                                                                        path: apipath['apipath'] + \"/product/\" + prod.productid,\r\n                                                                        headers: {\r\n                                                                            headers: true,\r\n                                                                            apidomain: apidomain.vmurl\r\n                                                                        },\r\n                                                                        body: {},\r\n                                                                        ref: \"DeleteProduct\"\r\n                                                                    }\r\n                                                                })\r\n                                                            }}\r\n                                                        >\r\n                                                            <DeleteIcon className={typographyClasses.text} color=\"secondary\" />\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Box>\r\n                                :\r\n                                <Box p={1}>\r\n                                    <Typography className={typographyClasses.smallText}>No Products</Typography>\r\n                                </Box>\r\n                        }\r\n                    </Box>\r\n                    <Divider />\r\n                    <Box display=\"flex\" alignItems=\"center\" height={39}>\r\n                        <Button\r\n                            variant=\"text\"\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                                let gitapidata = {\r\n                                    path: apipath['datastore'] + \"/git\",\r\n                                    method: 'GET',\r\n                                    body: {},\r\n                                    headers: {\r\n                                        headers: true,\r\n                                        apidomain: apidomain.vmurl\r\n                                    },\r\n                                    ref: \"GetGitCredentials\"\r\n                                }\r\n                                manageAPIs(gitapidata)\r\n                            }}\r\n                        >\r\n                            <AddIcon className={typographyClasses.smallText} />&nbsp;&nbsp;Create Product\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n            </Popover>\r\n            {\r\n                newProd === true ?\r\n                    <AddProduct Handler={CancelAddProduct} />\r\n                    :\r\n                    null\r\n            }\r\n            {\r\n                confirmation !== '' ?\r\n                    <Confirm confirmText={confirmation} clickHandler={handleConfirmation} />\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductIndex;","import HandleAPI from '../../Utils/HandleApi';\r\nimport DataList from '../../Utils/DataList';\r\n\r\n\r\nfunction GetAllServices(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                if (result.body.length > 0) {\r\n                    DataList.ServiceList = result.body\r\n                    sessionStorage.setItem('Services', window.btoa(JSON.stringify(result.body)))\r\n                    asyncfunction(true, { data: result.body })\r\n                }\r\n                else {\r\n                    asyncfunction(true, { data: [], error: true })\r\n                }\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nfunction GetSpecificService(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                DataList.ActiveService = result.body\r\n                sessionStorage.setItem('CurrentService', window.btoa(JSON.stringify(result.body)))\r\n                window.location.href = window.location.origin + \"/#/app/services\"\r\n                asyncfunction(true, { data: result.body })\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nfunction AddService(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                DataList.ActiveService = result.body\r\n                sessionStorage.setItem('CurrentService', window.btoa(JSON.stringify(result.body)))\r\n                asyncfunction(true, { data: result.body, message: result.hasOwnProperty('message') ? result.message : \"\"  })\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nfunction DeleteService(apidata, asyncfunction) {\r\n    HandleAPI.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n        .then(result => {\r\n            if (result === null) {\r\n                asyncfunction(false, { message: \"Some internal error,plese try again\" })\r\n            }\r\n            else if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                asyncfunction(true, { data: result.body, message: result.hasOwnProperty('message') ? result.message : \"\" })\r\n            }\r\n            else {\r\n                asyncfunction(false, { message: result.errorMessage })\r\n            }\r\n        })\r\n        .catch(err => {\r\n            asyncfunction(false, { message: \"Some internal error, please try after some time\" })\r\n        })\r\n}\r\n\r\nexport default { GetAllServices, GetSpecificService, AddService, DeleteService }","import React, { useState } from 'react'\r\n\r\n//Material UI\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Box from '@material-ui/core/Box';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl'\r\n\r\n//Custom Component\r\nimport Loader from '../../Components/Loader';\r\nimport Alert from '../../Components/Alert'\r\nimport DataList from '../../Utils/DataList';\r\nimport ServiceAPIs from './ServiceAPIs';\r\nimport apidomain from '../../Utils/ApiDomain'\r\nimport apipath from '../../Utils/Apipath'\r\nimport { Typography } from '@material-ui/core';\r\n\r\n// Styles\r\nimport TypographyStyles from '../../assets/styles/TypographySyles'\r\n\r\n\r\nconst AddProduct = ({ Handler }) => {\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [severity, setSeverrity] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [loader, setLoader] = useState(false)\r\n    const [dialog, setDialog] = useState(true)\r\n    const [formData, setFormData] = useState({})\r\n    const curProd = Object.keys(DataList.ActiveProduct).length > 0 ? DataList.ActiveProduct : (sessionStorage.getItem('CurrentProduct') ? JSON.parse(window.atob(sessionStorage.getItem('CurrentProduct'))) : {})\r\n    const [servName, setServName] = useState('')\r\n\r\n    const typographyClasses = TypographyStyles()\r\n\r\n    const handleAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n\r\n    const handleFormDataChage = (field, event) => {\r\n        let formFields = formData;\r\n        if (field === \"servicename\") {\r\n            const re = /^[a-z][a-z0-9_]*[a-z0-9]*$/;\r\n            if (re.test(event.target.value)) {\r\n                formFields[field] = event.target.value.toLowerCase();\r\n                setServName(event.target.value.toLowerCase())\r\n            }\r\n            else if (event.target.value === \"\") {\r\n                formFields[field] = event.target.value;\r\n                setServName(event.target.value)\r\n            }\r\n        }\r\n        else {\r\n            formFields[field] = event.target.value;\r\n        }\r\n        setFormData(formFields);\r\n    }\r\n\r\n    const SubmitHandler = (key) => {\r\n        let formFields = formData\r\n        formFields['servicetype'] = \"dynamodb_eks_flask\"\r\n        setFormData(formFields)\r\n        if (!key) {\r\n            Handler()\r\n        }\r\n        else {\r\n            setLoader(true)\r\n            let canSubmit = true, requireAttrs = ['servicename']\r\n            for (let i = 0; i < requireAttrs.length; i++) {\r\n                if (formData[requireAttrs[i]] === undefined || formData[requireAttrs[i]] === \"\" || formData[requireAttrs[i]] === []) {\r\n                    canSubmit = false\r\n                    setLoader(false)\r\n                    setMessage(\"Please fill the required details.\")\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            }\r\n            if (canSubmit) {\r\n                let servjson = JSON.parse(window.atob(sessionStorage.getItem('selectedtemplate')))\r\n                formData['optionname'] = servjson['optionname']\r\n                let apidata = {\r\n                    method: \"POST\",\r\n                    path: apipath['apipath'] + \"/service/\" + curProd.productid,\r\n                    headers: {\r\n                        headers: true,\r\n                        apidomain: apidomain.vmurl\r\n                    },\r\n                    body: formData,\r\n                }\r\n                ServiceAPIs.AddService(apidata, function (success, response) {\r\n                    if (success) {\r\n                        if (response.hasOwnProperty('message') && response.message !== \"\") {\r\n                            setMessage(response.message)\r\n                            setSeverrity('info')\r\n                            setOpenAlert(true)\r\n                        }\r\n                        let servs = DataList.ServiceList.length > 0 ? DataList.ServiceList : (sessionStorage.getItem('Services') ? JSON.parse(window.atob(sessionStorage.getItem('Services'))) : [])\r\n                        servs.push(response.data)\r\n                        DataList.ServiceList = servs\r\n                        sessionStorage.setItem('Services', window.btoa(JSON.stringify(servs)))\r\n                        window.setTimeout(function () {\r\n                            Handler()\r\n                            window.location.href = window.location.origin + \"/#/app/products/\" + curProd.productid + \"/services/\" + response.data.serviceid\r\n                            // window.location.reload()\r\n                        }, 1000)\r\n                    }\r\n                    else {\r\n                        setLoader(false)\r\n                        setMessage(response.message)\r\n                        setSeverrity('error')\r\n                        setOpenAlert(true)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Loader type=\"page\" open={loader} />\r\n            <Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n            <Dialog open={dialog} onClose={() => SubmitHandler(false)} aria-labelledby=\"form-dialog-title\" maxWidth=\"sm\" fullWidth>\r\n                <DialogTitle id=\"form-dialog-title\" style={{padding:'8px 24px'}}>Create service</DialogTitle>\r\n                <DialogContent>\r\n                    <Box>\r\n                        <form autoComplete=\"off\">\r\n                            <Box mb={1}>\r\n                                <label>Service Template</label>\r\n                                <Box display=\"flex\" flexWrap=\"wrap\" alignItems=\"center\" justifyContent=\"flex-start\" mt={1}>\r\n                                    <Box mr={1} mb={1} p={1} pl={2} pr={2} display=\"flex\" alignItems=\"center\" bgcolor=\"#3f51b5\" style={{cursor:'pointer'}}>\r\n                                        <Box display=\"flex\" alignItems=\"center\" color=\"white\">\r\n                                            <Typography className={`${typographyClasses.text}`}>AWS-PYTHON-APIGW-FLASK-EKS-DYNAMODB-COGNITO</Typography>\r\n                                        </Box>\r\n                                    </Box>\r\n                                    {/* <Box mr={1} mb={1} p={1} pl={2} pr={2} display=\"flex\" alignItems=\"center\" bgcolor=\"#a1a1a1\" style={{cursor:'pointer'}}>\r\n                                        <Box display=\"flex\" alignItems=\"center\" color=\"white\">\r\n                                            <Typography className={`${typographyClasses.text}`}>mysql_eks_flask(coming soon)</Typography>\r\n                                        </Box>\r\n                                    </Box> */}\r\n                                </Box>\r\n                            </Box>\r\n                            <Box mb={1}>\r\n                                <FormControl fullWidth>\r\n                                    <label htmlFor=\"ServiceName\" required>Service Name</label>\r\n                                    <TextField\r\n                                        id=\"ServiceName\"\r\n                                        required\r\n                                        value={servName}\r\n                                        fullWidth\r\n                                        placeholder=\"Enter Service Name\"\r\n                                        onChange={handleFormDataChage.bind(this, \"servicename\")}\r\n                                        variant=\"outlined\"\r\n                                        helperText=\"No capital letters,special characters except underscore is allowed.\"\r\n                                    >\r\n                                    </TextField>\r\n                                </FormControl>\r\n                            </Box>\r\n                            <Box>\r\n                                <FormControl fullWidth>\r\n                                    <label htmlFor=\"Description\">Description</label>\r\n                                    <TextField\r\n                                        id=\"Description\"\r\n                                        required\r\n                                        fullWidth\r\n                                        placeholder=\"Enter Description\"\r\n                                        onChange={handleFormDataChage.bind(this, \"description\")}\r\n                                        variant=\"outlined\"\r\n                                        multiline\r\n                                        rows={3}\r\n                                    >\r\n                                    </TextField>\r\n                                </FormControl>\r\n                            </Box>\r\n                        </form>\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => SubmitHandler(false)} color=\"secondary\" variant=\"outlined\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => SubmitHandler(true)} color=\"primary\" className=\"api-btn\" variant=\"contained\">\r\n                        Create\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddProduct;","import React, { useState } from 'react';\r\n\r\n//Material UI\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n//Custom Component\r\nimport DataList from '../../Utils/DataList';\r\nimport Loader from '../../Components/Loader';\r\nimport Alert from '../../Components/Alert'\r\nimport AddService from './AddService'\r\nimport Confirm from '../../Components/Confirm';\r\nimport ServiceAPIs from './ServiceAPIs';\r\nimport apipath from '../../Utils/Apipath';\r\nimport apidomain from '../../Utils/ApiDomain';\r\nimport GitAPIs from '../Git/GitAPIs';\r\n\r\n//Material Icons\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n// Styles\r\nimport TypographyStyles from '../../assets/styles/TypographySyles'\r\n\r\n\r\nconst ServiceIndex = () => {\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [severity, setSeverrity] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [loader, setLoader] = useState(false)\r\n    const [confirmation, setConfirmation] = useState('')\r\n    const [confApiData, setConfApiData] = useState({})\r\n    const [serviceList, setServiceList] = useState(DataList.ServiceList.length > 0 ? DataList.ServiceList : (sessionStorage.getItem('Services') ? JSON.parse(window.atob(sessionStorage.getItem('Services'))) : []))\r\n    const [newServ, setNewServ] = useState(false)\r\n    const [curServ, setCurServ] = useState(Object.keys(DataList.ActiveService).length > 0 ? DataList.ActiveService : (sessionStorage.getItem('CurrentService') ? JSON.parse(window.atob(sessionStorage.getItem('CurrentService'))) : {}))\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const openPopover = Boolean(anchorEl);\r\n    const id = openPopover ? 'simple-popover' : undefined;\r\n    const [curProd, setCurProd] = useState(Object.keys(DataList.ActiveProduct).length > 0 ? DataList.ActiveProduct : (sessionStorage.getItem('CurrentProduct') ? JSON.parse(window.atob(sessionStorage.getItem('CurrentProduct'))) : {}))\r\n\r\n    const typographyClasses = TypographyStyles()\r\n\r\n    const manageAPIs = (apidata) => {\r\n        if (apidata.ref === \"GetGitCredentials\") {\r\n            GitAPIs.GetGitDetails(apidata, function (success, response) {\r\n                if (success) {\r\n                    if (Object.keys(response.data).length > 0) {\r\n                        window.location.href = window.location.origin + \"/#/app/products/\" + curProd.productid + \"/service_templates\"\r\n                    }\r\n                    else {\r\n                        setMessage(\"Configure Git create a product\")\r\n                        setSeverrity('error')\r\n                        setOpenAlert(true)\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        else if (apidata.ref === \"DeleteService\") {\r\n            ServiceAPIs.DeleteService(apidata, function (success, response) {\r\n                if (response.hasOwnProperty('message') && response.message !== \"\") {\r\n                    setMessage(response.message)\r\n                    setSeverrity('info')\r\n                    setOpenAlert(true)\r\n                }\r\n                DataList.ActiveService = {}\r\n                DataList.ServiceList = []\r\n                sessionStorage.removeItem('Services')\r\n                sessionStorage.removeItem('CurrentService')\r\n                window.setTimeout(function () {\r\n                    window.location.href = window.location.origin + \"/#/app/products/\" + curProd.productid + \"/services\"\r\n                    window.location.reload()\r\n                }, 1000)\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n\r\n    const handleActions = (apidata) => {\r\n        if (apidata.Action === 'redirect') {\r\n            window.open(apidata.url, '_blank')\r\n        }\r\n        else if (apidata.Action === 'refresh') {\r\n        }\r\n        else if (apidata.Action === \"confirmation\") {\r\n            setConfApiData(apidata['apidata'])\r\n            setConfirmation(apidata.confirmText)\r\n        }\r\n        else {\r\n            if (apidata.method === \"DELETE\") {\r\n                setAnchorEl(null)\r\n                setLoader(true)\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n    }\r\n\r\n    const handleUserClick = (event) => {\r\n        setServiceList(DataList.ServiceList.length > 0 ? DataList.ServiceList : (sessionStorage.getItem('Services') ? JSON.parse(window.atob(sessionStorage.getItem('Services'))) : []))\r\n\r\n        setCurServ(Object.keys(DataList.ActiveService).length > 0 ? DataList.ActiveService : (sessionStorage.getItem('CurrentService') ? JSON.parse(window.atob(sessionStorage.getItem('CurrentService'))) : {}))\r\n\r\n        setCurProd(Object.keys(DataList.ActiveProduct).length > 0 ? DataList.ActiveProduct : (sessionStorage.getItem('CurrentProduct') ? JSON.parse(window.atob(sessionStorage.getItem('CurrentProduct'))) : {}))\r\n\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handlePopoverClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const ChangeService = (service) => {\r\n        setAnchorEl(null)\r\n        if (curServ.serviceid !== service.serviceid) {\r\n            setLoader(true)\r\n            sessionStorage.setItem('CurrentService', window.btoa(JSON.stringify(service)))\r\n            DataList.ActiveService = {}\r\n        }\r\n        window.location.href = window.location.origin + \"/#/app/products/\" + curProd.productid + \"/services/\" + service.serviceid\r\n        window.location.reload()\r\n    }\r\n\r\n    const CancelAddService = () => {\r\n        setNewServ(false)\r\n    }\r\n\r\n    const handleConfirmation = (key) => {\r\n        setConfirmation('')\r\n        if (key) {\r\n            handleActions(confApiData)\r\n            // console.log(confApiData)\r\n            setConfApiData({})\r\n        }\r\n        else {\r\n            setConfApiData({})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n            <Loader open={loader} type=\"page\" />\r\n            <Box mr={2} display=\"flex\" alignItems=\"center\" style={{ height: '100%' }} className={`${\"top-nav-link\"}`} position=\"relative\" onClick={handleUserClick}>\r\n                <Box display=\"flex\" alignItems=\"center\" p={0.5} pl={1} pr={1} style={{ cursor: 'pointer' }} className=\"links\">\r\n                    <Box display=\"flex\" alignItems=\"center\" color=\"#6f7071\" mr={0.5}>\r\n                        <Typography className={typographyClasses.text} style={{ fontWeight: 'bold' }}>{Object.keys(curServ).length > 0 ? <span><span>Service&nbsp;-&nbsp;</span><span style={{ color: '#3F51B5' }}>{curServ.servicename}</span></span> : \"Service\"}</Typography>\r\n                    </Box>\r\n                    <Box color=\"gray\" display=\"flex\">\r\n                        {\r\n                            anchorEl === null ?\r\n                                <ExpandMoreIcon fontSize=\"small\" />\r\n                                :\r\n                                <ExpandLessIcon fontSize=\"small\" />\r\n                        }\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n            <Popover\r\n                id={id}\r\n                open={openPopover}\r\n                anchorEl={anchorEl}\r\n                onClose={handlePopoverClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                }}\r\n            >\r\n                <Box bgcolor=\"white\" boxShadow={2} height={240} width={260}>\r\n                    <Box height={200}>\r\n                        {\r\n                            serviceList.length > 0 ?\r\n                                <Box style={{ width: '100%' }} height={200} overflow=\"auto\">\r\n                                    {\r\n                                        serviceList.map((serv, index) => {\r\n                                            return (\r\n                                                <Box style={{ width: '100%', cursor: 'pointer' }} p={1} key={index} bgcolor={curServ.serviceid === serv.serviceid ? \"#f5f5f5\" : \"white\"} onClick={() => ChangeService(serv)}>\r\n                                                    <Box color={curServ.serviceid === serv.serviceid ? \"#3F51B5\" : \"gray\"} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                                                        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n                                                            <Typography className={typographyClasses.text} align=\"left\" color=\"inherit\">{serv.servicename}</Typography>\r\n                                                            <Typography className={typographyClasses.smallText} align=\"left\" color=\"inherit\">{serv.serviceid}</Typography>\r\n                                                        </Box>\r\n                                                        <Box display=\"flex\"\r\n                                                            onClick={(event) => {\r\n                                                                event.stopPropagation()\r\n                                                                handleActions({\r\n                                                                    Action: \"confirmation\",\r\n                                                                    confirmText: \"Are you sure you want to delete this service(\" + serv.servicename + \")?\",\r\n                                                                    apidata: {\r\n                                                                        method: \"DELETE\",\r\n                                                                        path: apipath['apipath'] + \"/service/\" + curProd.productid + \"/\" + serv.serviceid,\r\n                                                                        headers: {\r\n                                                                            headers: true,\r\n                                                                            apidomain: apidomain.vmurl\r\n                                                                        },\r\n                                                                        body: {},\r\n                                                                        ref: \"DeleteService\"\r\n                                                                    }\r\n                                                                })\r\n                                                            }}\r\n                                                        >\r\n                                                            <DeleteIcon className={typographyClasses.text} color=\"secondary\" />\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Box>\r\n                                :\r\n                                <Box p={1}>\r\n                                    <Typography className={typographyClasses.smallText}>No Services</Typography>\r\n                                </Box>\r\n                        }\r\n                    </Box>\r\n                    <Divider />\r\n                    <Box display=\"flex\" alignItems=\"center\" height={39}>\r\n                        <Button\r\n                            variant=\"text\"\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                                if (Object.keys(curProd).length > 0) {\r\n                                    let gitapidata = {\r\n                                        path: apipath['datastore'] + \"/git\",\r\n                                        method: 'GET',\r\n                                        body: {},\r\n                                        headers: {\r\n                                            headers: true,\r\n                                            apidomain: apidomain.vmurl\r\n                                        },\r\n                                        ref: \"GetGitCredentials\"\r\n                                    }\r\n                                    manageAPIs(gitapidata)\r\n                                }\r\n                                else {\r\n                                    setMessage('Choose a product to create a service.')\r\n                                    setSeverrity('info')\r\n                                    setOpenAlert(true)\r\n                                }\r\n                            }}\r\n                        >\r\n                            <AddIcon className={typographyClasses.smallText} />&nbsp;&nbsp;Create Service\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n            </Popover>\r\n            {\r\n                newServ === true ?\r\n                    <AddService Handler={CancelAddService} />\r\n                    :\r\n                    null\r\n            }\r\n            {\r\n                confirmation !== '' ?\r\n                    <Confirm confirmText={confirmation} clickHandler={handleConfirmation} />\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ServiceIndex;","import React, { useEffect, useState } from 'react'\r\n\r\n//Material UI\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Box from '@material-ui/core/Box';\r\n\r\n//Custom Component\r\nimport Loader from '../../Components/Loader';\r\nimport Alert from '../../Components/Alert'\r\nimport GitAPIs from './GitAPIs';\r\nimport apidomain from '../../Utils/ApiDomain';\r\nimport apipath from '../../Utils/Apipath';\r\n\r\n// Material Icons\r\nimport SyncIcon from '@material-ui/icons/Sync';\r\n\r\n// Custom Styles\r\nimport TypographyStyles from '../../assets/styles/TypographySyles';\r\n\r\nconst CommitDesign = () => {\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [severity, setSeverrity] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [loader, setLoader] = useState(false)\r\n    const [dialog, setDialog] = useState(false)\r\n    const [formData, setFormData] = useState({})\r\n    const [isGitConfigured, setIsGitConfigured] = useState(false)\r\n\r\n    const typographyClasses = TypographyStyles()\r\n\r\n    useEffect(() => {\r\n        let apidata = {\r\n            path: apipath['datastore'] + \"/git\",\r\n            method: 'GET',\r\n            body: {},\r\n            headers: {\r\n                headers: true,\r\n                apidomain: apidomain.vmurl\r\n            },\r\n            ref: \"GetGitCredentials\"\r\n        }\r\n        manageAPIs(apidata)\r\n    }, [])\r\n\r\n    const manageAPIs = (apidata) => {\r\n        if (apidata.ref === \"GetGitCredentials\") {\r\n            GitAPIs.GetGitDetails(apidata, function (success, response) {\r\n                if (success) {\r\n                    if (Object.keys(response.data).length > 0) {\r\n                        setIsGitConfigured(true)\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        else if (apidata.ref === \"CommitDesign\") {\r\n            GitAPIs.CommitCode(apidata, function (success, response) {\r\n                if (success) {\r\n                    if (response.hasOwnProperty('message') && response.message !== \"\") {\r\n                        setMessage(response.message)\r\n                        setSeverrity('info')\r\n                        setOpenAlert(true)\r\n                    }\r\n                    setDialog(false)\r\n                    setLoader(false)\r\n                }\r\n                else {\r\n                    setLoader(false)\r\n                    setMessage(response.message)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n\r\n    const handleFormDataChage = (field, event) => {\r\n        let formFields = formData;\r\n        formFields[field] = event.target.value;\r\n        setFormData(formFields);\r\n    }\r\n\r\n    const SubmitHandler = (key) => {\r\n        if (!key) {\r\n            setDialog(false)\r\n        }\r\n        else {\r\n            setLoader(true)\r\n            let canSubmit = true, requireAttrs = ['commitmessage', 'tagname']\r\n            for (let i = 0; i < requireAttrs.length; i++) {\r\n                if (formData[requireAttrs[i]] === undefined || formData[requireAttrs[i]] === \"\" || formData[requireAttrs[i]] === []) {\r\n                    canSubmit = false\r\n                    setLoader(false)\r\n                    setMessage(\"Please fill the required details.\")\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            }\r\n            if (canSubmit) {\r\n                let apidata = {\r\n                    method: \"POST\",\r\n                    path: apipath['datastore'] + \"/git/designpush\",\r\n                    headers: {\r\n                        headers: true,\r\n                        apidomain: apidomain.vmurl\r\n                    },\r\n                    body: formData,\r\n                    ref: \"CommitDesign\"\r\n                }\r\n                manageAPIs(apidata)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Loader type=\"page\" open={loader} />\r\n            <Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n            <Box>\r\n                {\r\n                    isGitConfigured === false ?\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                            <Box mr={2}>\r\n                                <Button\r\n                                    className=\"trigger-btn\"\r\n                                    color=\"primary\"\r\n                                    variant=\"contained\"\r\n                                    onClick={() => {\r\n                                        window.location.href = window.location.origin + \"/#/app/gitsetup\"\r\n                                    }}\r\n                                >\r\n                                    Add Code Repo\r\n                                </Button>\r\n                            </Box>\r\n                        </Box>\r\n                        :\r\n                        null\r\n                }\r\n                {\r\n                    isGitConfigured === true ?\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                            <Box mr={2}>\r\n\r\n                                <Button\r\n                                    className=\"trigger-btn\"\r\n                                    color=\"primary\"\r\n                                    variant=\"contained\"\r\n                                    onClick={() => setDialog(true)}\r\n                                >\r\n                                    <SyncIcon className={typographyClasses.text} />&nbsp;&nbsp;Sync to Git\r\n                                </Button>\r\n                            </Box>\r\n                            <Box mr={2}>\r\n                                <Button\r\n                                    color=\"primary\"\r\n                                    variant=\"text\"\r\n                                    onClick={() => {\r\n                                        sessionStorage.setItem('showCred', 'yes')\r\n                                        window.location.href = window.location.origin + \"/#/app/gitsetup\"\r\n                                    }}\r\n                                >\r\n                                    Git Credentials\r\n                                </Button>\r\n                            </Box>\r\n                        </Box>\r\n                        :\r\n                        null\r\n                }\r\n            </Box>\r\n            <Dialog open={dialog} onClose={() => SubmitHandler(false)} aria-labelledby=\"form-dialog-title\" maxWidth=\"sm\" fullWidth>\r\n                <DialogTitle id=\"form-dialog-title\">Commit</DialogTitle>\r\n                <DialogContent>\r\n                    <Box>\r\n                        <form style={{}} autoComplete=\"off\">\r\n                            <Box mb={1}>\r\n                                <FormControl fullWidth>\r\n                                    <label htmlFor=\"Commit\" required>Commit Message</label>\r\n                                    <TextField\r\n                                        id=\"Commit\"\r\n                                        required\r\n                                        fullWidth\r\n                                        placeholder=\"Enter Commit Message\"\r\n                                        onChange={handleFormDataChage.bind(this, \"commitmessage\")}\r\n                                        variant=\"outlined\"\r\n                                        multiline\r\n                                        rows={2}\r\n                                    >\r\n                                    </TextField>\r\n                                </FormControl>\r\n                            </Box>\r\n                            <Box>\r\n                                <FormControl fullWidth>\r\n                                    <label htmlFor=\"tagname\" required>Tag Name</label>\r\n                                    <TextField\r\n                                        id=\"tagname\"\r\n                                        required\r\n                                        fullWidth\r\n                                        placeholder=\"Enter Tag Name\"\r\n                                        onChange={handleFormDataChage.bind(this, \"tagname\")}\r\n                                        variant=\"outlined\"\r\n                                    >\r\n                                    </TextField>\r\n                                </FormControl>\r\n                            </Box>\r\n                        </form>\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => SubmitHandler(false)} color=\"secondary\" variant=\"outlined\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => SubmitHandler(true)} color=\"primary\" className=\"api-btn\" variant=\"contained\">\r\n                        Sync\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CommitDesign;","import React from 'react';\r\n\r\n//Material UI\r\nimport clsx from 'clsx';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n//Material Icons\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\n//Assets\r\nimport ApLogo from '../assets/images/ap-logo.png';\r\n\r\n//Custom Component\r\nimport Cognitofunctions from '../Pages/Cognito/CognitoFunctions';\r\nimport CognitoDetails from '../Pages/Cognito/CognitoDetails';\r\n// import Loader from './Loader';\r\n// import Alert from './Alert'\r\nimport ProductBar from '../Pages/Product/ProductTopBar'\r\nimport ServiceBar from '../Pages/Services/ServiceTopBar'\r\nimport GitBar from '../Pages/Git/GitTopBar';\r\nimport CommitBar from '../Pages/Git/Commit';\r\n\r\n\r\n\r\nconst drawerWidth = 80;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n    appBar: {\r\n        // backgroundImage: 'linear-gradient(45deg, #000e1a , #1a0049 120%)',\r\n        background: 'white',\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        boxShadow: 'none',\r\n        borderBottom: '1px solid lightgray'\r\n    },\r\n    APLogo: {\r\n        height: '33px',\r\n        cursor: 'pointer'\r\n    },\r\n    List: {\r\n        padding: 0\r\n    },\r\n    ListItem: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        // flexDirection:'column',\r\n        padding: '0',\r\n        '&:hover': {\r\n            backgroundImage: 'linear-gradient(45deg, #2196F3, #00BCD4)',\r\n            color: 'white'\r\n        }\r\n    },\r\n    ListIcon: {\r\n        color: \"inherit\",\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        // display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        textAlign: 'center',\r\n        lineHeight: '1.2',\r\n        // minWidth: 'auto',\r\n        padding: \"0 16px\",\r\n        '&:hover': {\r\n            color: 'white'\r\n        }\r\n    },\r\n    ListText: {\r\n        fontSize: '0.9rem'\r\n    }\r\n}));\r\n\r\nconst typographyStyles = makeStyles((theme) => ({\r\n    text: {\r\n        fontSize: '0.9rem',\r\n        textAlign: 'left',\r\n        whiteSpace: \"pre-line\"\r\n    },\r\n    smallText: {\r\n        fontSize: '0.8rem'\r\n    },\r\n    subtitle1: {\r\n        fontSize: '1.1rem',\r\n        padding: \"10px\",\r\n        textAlign: 'left',\r\n        fontWeight: 'bold'\r\n    }\r\n}));\r\n\r\nconst popoverStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // padding: 16,\r\n        width: '260px'\r\n    }\r\n}));\r\n\r\n\r\nexport default function MiniDrawer() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const classes = useStyles();\r\n    const popoverClasses = popoverStyles()\r\n    const typographyClasses = typographyStyles()\r\n\r\n    let userData = sessionStorage.getItem('user') ? JSON.parse(window.atob(sessionStorage.getItem('user'))) : ''\r\n\r\n\r\n\r\n    const handleUserClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handlePopoverClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const openPopover = Boolean(anchorEl);\r\n    const id = openPopover ? 'simple-popover' : undefined;\r\n\r\n    const signout = () => {\r\n        Cognitofunctions.Signout()\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: open,\r\n                })}\r\n            >\r\n                <Toolbar style={{ minHeight: 50, height: 50 }}>\r\n                    <Box>\r\n                        <img className={classes.APLogo} src={ApLogo} alt=\"Archeplay\" />\r\n                    </Box>\r\n                    <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%', height: '100%' }} justifyContent=\"flex-end\" className=\"top-nav\">\r\n                        {/* <GitBar /> */}\r\n                        {\r\n                            window.location.href.indexOf('/deploy') === -1 && window.location.href.indexOf('/products') !== -1 ?\r\n                                <CommitBar />\r\n                                :\r\n                                null\r\n                        }\r\n                        <ProductBar />\r\n                        <ServiceBar />\r\n                        <Box>\r\n                            <Button\r\n                                onClick={handleUserClick}\r\n                                variant=\"text\"\r\n                            >\r\n                                <MenuIcon />\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Popover\r\n                id={id}\r\n                className={`${popoverClasses.root} ${'user-menu'}`}\r\n                open={openPopover}\r\n                anchorEl={anchorEl}\r\n                onClose={handlePopoverClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                }}\r\n            >\r\n                <Box display=\"flex\" flexDirection=\"column\" style={{ height: '100%' }}>\r\n                    <Box color=\"primary.contrastText\" bgcolor=\"primary.main\" display=\"flex\" padding={1} pt={0} pb={0} alignItems=\"center\">\r\n                        <Box>\r\n                            {\r\n                                Object.keys(userData).length > 0 ?\r\n                                    <Box p={1}>\r\n                                        <Typography className={typographyClasses.text}>{userData.EmailId}</Typography>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </Box>\r\n                    </Box>\r\n                    <Divider />\r\n                    <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"space-between\" style={{ height: '100%' }} p={1}>\r\n                        <Typography className={typographyClasses.text}>{CognitoDetails.EmailId}</Typography>\r\n                        <Box display=\"flex\" justifyContent=\"space-between\">\r\n                            {/* <Box>\r\n                                <Button\r\n                                    variant=\"text\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                        setAnchorEl(null);\r\n                                        window.location.href = window.location.origin + \"/#/user/subscriptions\"\r\n                                    }}\r\n                                    fullWidth={false}\r\n                                >\r\n                                    Subscriptions\r\n        \t\t\t\t\t    </Button>\r\n                            </Box> */}\r\n                            <Box>\r\n                                <Button\r\n                                    variant=\"text\"\r\n                                    color=\"primary\"\r\n                                    onClick={signout}\r\n                                    fullWidth={false}\r\n                                >\r\n                                    Signout\r\n        \t\t\t\t\t    </Button>\r\n                            </Box>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\n// Material UI\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n// Styles\r\nimport TypographyStyles from '../../assets/styles/TypographySyles';\r\n\r\nconst FooterLayout = ({ ...props }) => {\r\n    const typographyClasses = TypographyStyles()\r\n\r\n    const { heading, content } = props\r\n\r\n    return (\r\n        <Box mb={1}>\r\n            <Box color=\"#2196F3\" mb={1} display=\"flex\">\r\n                <Typography className={`${typographyClasses.bold} ${typographyClasses.h6}`}>{heading}</Typography>\r\n            </Box>\r\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n                {\r\n                    Object.keys(content).map((ct, index) => {\r\n                        return (\r\n                            <Box display=\"flex\" flexDirection=\"column\" style={{ fontSize: '0.9rem' }} p={0.5} pl={0} pr={0} key={heading+index}>\r\n                                {\r\n                                    content[ct].hasOwnProperty('extlink') === true ?\r\n                                        <Typography className={`${typographyClasses.root}`}>\r\n                                            {ct}&nbsp;&nbsp;-&nbsp;&nbsp;\r\n                                            <a href={content[ct]['extlink']} target=\"_blank\" rel=\"noopener noreferrer\" style={{ textDecoration: 'none', color: 'white' }}>{content[ct]['value']}</a>\r\n                                        </Typography>\r\n                                        :\r\n                                        <Typography className={`${typographyClasses.bold} ${typographyClasses.h6}`}>{content[ct]['value']}</Typography>\r\n                                }\r\n                            </Box>\r\n                        )\r\n                    })\r\n                }\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default FooterLayout;","import React from 'react';\r\n\r\n//Assets\r\nimport ApLogo from '../../assets/images/ap-logo.png';\r\n\r\n//Material UI\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n// Styles\r\n// import TypographyStyles from '../assets/styles/TypographySyles';\r\n\r\n//Router\r\n// import { NavLink } from 'react-router-dom';\r\n\r\n// Custom Components\r\nimport Layout from './Layout';\r\n\r\n\r\nconst FooterData = [\r\n    {\r\n        \"heading\": \"Contact\",\r\n        \"content\": {\r\n            \"Email\": {\r\n                \"extlink\": \"mailto:talktous@archeplay.com\",\r\n                \"value\": \"talktous@archeplay.com\"\r\n            },\r\n            \"Call\": {\r\n                \"extlink\": \"tel:+17326031380\",\r\n                \"value\": \"+17326031380\"\r\n            },\r\n            \"WhatsApp\": {\r\n                \"extlink\": \"https://api.whatsapp.com/send?phone=919606381617\",\r\n                \"value\": \"+919606381617\"\r\n            }\r\n        }\r\n    }\r\n]\r\n\r\n\r\nconst Footer = ({ page }) => {\r\n    // const typographyClasses = TypographyStyles()\r\n\r\n    return (\r\n        <Box>\r\n            {\r\n                page === \"index\" ?\r\n                    <Box style={{ width: '100%', backgroundImage: 'linear-gradient(45deg, black, #140037)' }}>\r\n                        <Box style={{ width: '100%', maxWidth: '110rem', padding: '1rem 2rem', margin: 'auto' }} >\r\n                            <Box>\r\n                                <Box mb={2}>\r\n                                    <Box>\r\n                                        <Grid container>\r\n                                            {\r\n                                                FooterData.map((ft, index) => {\r\n                                                    return (\r\n                                                        <Grid item xs={12} md={6} style={{ padding: '5px' }} key={index}>\r\n                                                            <Layout heading={ft.heading} content={ft.content}/>\r\n                                                        </Grid>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Grid>\r\n                                    </Box>\r\n                                </Box>\r\n                                <Divider style={{ backgroundColor: '#828282', height: '2px' }} />\r\n                                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mt={2} flexWrap=\"wrap\">\r\n                                    <Box display=\"flex\" m={1}>\r\n                                        <img style={{ height: '35px' }} src={ApLogo} alt=\"Archeplay\" />\r\n                                    </Box>\r\n                                    <Box m={1}>\r\n                                        <Typography style={{ fontSize: '0.9rem', color: 'white' }}>&copy;Archeplay {new Date().getFullYear()}</Typography>\r\n                                    </Box>\r\n                                </Box>\r\n                            </Box>\r\n                        </Box>\r\n                    </Box>\r\n                    :\r\n                    null\r\n            }\r\n            {\r\n                page === \"app\" ?\r\n                    <Box style={{ width: '100%', backgroundImage: 'linear-gradient(45deg, black, #140037)' }} position=\"fixed\" bottom={0} height={30} zIndex={1200}>\r\n                        <Box style={{ width: '100%', height: '100%' }}>\r\n                            <Box display=\"flex\" justifyContent=\"space-between\" style={{ width: '100%', height: '100%' }}>\r\n                                <Box style={{ height: '100%' }} display=\"flex\" alignItems=\"center\" pl={2} pr={2}>\r\n                                    <Typography style={{ fontSize: '0.7rem', color: '#b9b9b9' }} align=\"center\">&copy;Archeplay {new Date().getFullYear()}</Typography>\r\n                                </Box>\r\n                                {/* <Box pl={2} pr={2} display=\"flex\" alignItems=\"center\">\r\n                                    <NavLink to=\"/privacy-policy\" target=\"_blank\" style={{ textDecoration: 'none' }}>\r\n                                        <Typography className={`${typographyClasses.root}`} style={{ fontSize: '0.7rem' }} align=\"center\">\r\n                                            Privacy Policy\r\n                                        </Typography>\r\n                                    </NavLink>\r\n                                </Box> */}\r\n                            </Box>\r\n                        </Box>\r\n                    </Box>\r\n                    :\r\n                    null\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Footer;","import makeStyles from '@material-ui/core/styles/makeStyles';\r\n\r\nconst ContainerStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: '0px',\r\n        maxWidth: 'calc(100% - 0px)',\r\n        margin: 'auto',\r\n        display: 'flex',\r\n        marginTop: '50px',\r\n        // marginLeft: '60px',\r\n        // marginBottom: '40px'\r\n    }\r\n}))\r\n\r\nexport default ContainerStyles;","import React, { useState, useEffect } from 'react';\r\n\r\n// Custom Components\r\nimport Loader from '../../Components/Loader';\r\nimport TopNav from '../../Components/AppNav';\r\nimport Alert from '../../Components/Alert';\r\nimport Footer from '../../Components/Footer/index';\r\nimport Cognitofunctions from '../Cognito/CognitoFunctions';\r\nimport AddProduct from './AddProduct'\r\nimport ProductAPIs from './ProductAPIs';\r\nimport DataList from '../../Utils/DataList';\r\nimport apidomain from '../../Utils/ApiDomain';\r\nimport apipath from '../../Utils/Apipath';\r\nimport GitAPIs from '../Git/GitAPIs';\r\n\r\n// Styles\r\nimport ContainerStyles from '../../assets/styles/ContainerStyles'\r\nimport TypographyStyles from '../../assets/styles/TypographySyles'\r\n\r\n// Material UI\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n// Material Icons\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\n\r\n// React Helmet\r\nimport Helmet from \"react-helmet/es/Helmet\";\r\n\r\n\r\n\r\n\r\nconst ServicesList = () => {\r\n    const [productList, setProductList] = useState([])\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [severity, setSeverrity] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [loadTimeout, setLoadTimeout] = useState(false)\r\n    const [newProd,setNewProd] = useState(false)\r\n\r\n    const containerClasses = ContainerStyles()\r\n    const typographyClasses = TypographyStyles()\r\n\r\n\r\n    useEffect(() => {\r\n        // if (!window.gapi) {\r\n        //     GoogleScript.CheckGoogleAPI()\r\n        // }\r\n        sessionStorage.removeItem('ServiceId')\r\n        checkrole()\r\n    }, [])\r\n\r\n    const checkrole = () => {\r\n        Cognitofunctions.CurrentUser(function (success, data) {\r\n            if (success) {\r\n                let gitapidata = {\r\n                    path: apipath['datastore'] + \"/git\",\r\n                    method: 'GET',\r\n                    body: {},\r\n                    headers: {\r\n                        headers: true,\r\n                        apidomain: apidomain.vmurl\r\n                    },\r\n                    ref: \"GetGitCredentials\"\r\n                }\r\n                manageAPIs(gitapidata)\r\n            }\r\n            else {\r\n                // window.location.origin = window.location.origin + \"/login\"\r\n                // window.location.origin = window.location.origin\r\n                setMessage('You are not authorized to access this page.')\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n                setLoadTimeout(true)\r\n                setTimeout(function () {\r\n                    window.location.href = window.location.origin + \"/#/app/login\"\r\n                    window.location.reload()\r\n                }, 1000)\r\n            }\r\n        })\r\n    }\r\n\r\n    const manageAPIs = (apidata) => {\r\n        if(apidata.ref === \"GetGitCredentials\"){\r\n                GitAPIs.GetGitDetails(apidata, function (success, response) {\r\n                    if (success) {\r\n                        if (Object.keys(response.data).length > 0) {\r\n                            let nextapidata = {\r\n                                method: \"GET\",\r\n                                path: apipath['apipath']+\"/product\",\r\n                                headers: {\r\n                                    headers: true,\r\n                                    apidomain: apidomain.vmurl\r\n                                },\r\n                                body: {},\r\n                                ref: \"GetAllProducts\"\r\n                            }\r\n                            manageAPIs(nextapidata)\r\n                        }\r\n                        else {\r\n                            window.location.href = window.location.origin + \"/#/app/gitsetup\"\r\n                        }\r\n                    }\r\n                })\r\n        }\r\n        else if(apidata.ref === \"GetAllProducts\"){\r\n            ProductAPIs.GetAllProducts(apidata, function (success, response) {\r\n                if (success) {\r\n                    if (response.hasOwnProperty('message')) {\r\n                        setMessage(response.message)\r\n                        if (response.error) {\r\n                            setSeverrity('error')\r\n                        }\r\n                        else {\r\n                            setSeverrity('success')\r\n                        }\r\n                        setOpenAlert(true)\r\n                        setLoadTimeout(true)\r\n                    }\r\n                    if (response.data.length === 0) {\r\n                        setLoadTimeout(true)\r\n                        setNewProd(true)\r\n                        setLoadTimeout(true)\r\n                    }\r\n                    else{\r\n                        sessionStorage.setItem('Products',window.btoa(JSON.stringify(response.data)))\r\n                        DataList.ProductList = response.data\r\n                        setProductList(response.data)\r\n                        if (response.data.length === 1) {\r\n                            DataList.ActiveProduct = response.data[0]\r\n                            sessionStorage.setItem('CurrentProduct',window.btoa(JSON.stringify(response.data[0])))\r\n                            window.location.href = window.location.origin + \"/#/app/products/\" + response.data[0].productid+\"/services\"\r\n                        }\r\n                        else {\r\n                            setLoadTimeout(true)\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    setMessage(response.message)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                    setLoadTimeout(true)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleActions = (actionData, e) => {\r\n        setProductList([])\r\n        setLoadTimeout(false)\r\n        e.preventDefault()\r\n        if (actionData.Action === \"refresh\") {\r\n            let apidata = {\r\n                method: \"GET\",\r\n                path: apipath['apipath']+\"/product\",\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                body: {},\r\n                ref: \"GetAllProducts\"\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n    }\r\n\r\n    const handleAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n\r\n    const CancelAddProduct = () =>{\r\n        setNewProd(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Helmet>\r\n                <title>Products</title>\r\n            </Helmet>\r\n            <TopNav />\r\n            <Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n            <Container className={containerClasses.root}>\r\n                <Box style={{ width: '100%' }} p={1} pl={2} pr={2}>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" style={{ width: '100%' }} mb={1}>\r\n                        <Typography className={`${typographyClasses.h5} ${'text-design'} ${typographyClasses.bold}`}>Products</Typography>\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                            <Box mr={1} display=\"flex\">\r\n                                <Button\r\n                                    variant=\"text\"\r\n                                    color=\"primary\"\r\n                                    onClick={handleActions.bind(this, { \"Action\": \"refresh\" })}\r\n                                >\r\n                                    <RefreshIcon className={typographyClasses.text}/>\r\n                                </Button>\r\n                            </Box>\r\n                            <Box display=\"flex\">\r\n                                <Box>\r\n                                    <Button\r\n                                        className=\"trigger-btn\"\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => setNewProd(true)}\r\n                                    >\r\n                                        <AddIcon className={typographyClasses.text}/>&nbsp;&nbsp;Create Product\r\n                                    </Button>\r\n                                </Box>\r\n                            </Box>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"flexStart\"  >\r\n                        {\r\n                            productList.length > 0 ?\r\n                                <Grid container>\r\n                                    {\r\n                                        productList.map((prod, index) => {\r\n                                            let des = prod.hasOwnProperty('description') ? (prod.description.length > 50 ? prod.description.slice(0, 50) : prod.description) :''\r\n                                            return (\r\n                                                <Grid item xs={12} sm={6} md={3} lg={2} style={{ padding: '3px' }} key={index}>\r\n                                                    <Box boxShadow={2} display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\" p={2} bgcolor=\"white\" style={{ height: '100%' }} minHeight={150}>\r\n                                                        <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"space-between\" style={{ width: '100%', height: '100%' }}>\r\n                                                            <Box>\r\n                                                                <Box mb={1} color=\"#525151\">\r\n                                                                    <Typography className={`${typographyClasses.bold} ${typographyClasses.h6}`} align=\"left\">{prod.productname}</Typography>\r\n                                                                </Box>\r\n                                                                <Box mb={1} color=\"#525151\">\r\n                                                                    <Typography className={`${typographyClasses.text}`} align=\"left\">{des}{prod.hasOwnProperty('description') ? (prod.description.length > 50 ? <span>&nbsp;...<span className={typographyClasses.smallText} onClick={() => {\r\n                                                                        window.location.href = window.location.origin + \"/#/app/products/\" + prod.productid + \"/services\"\r\n                                                                    }} style={{ color: 'blue', cursor: 'pointer' }}>Show More</span></span> : \"\"):\"\"}</Typography>\r\n                                                                </Box>\r\n                                                                <Box mb={1} color=\"#525151\">\r\n                                                                    <Typography className={`${typographyClasses.smallText}`} align=\"left\">{prod.productid}</Typography>\r\n                                                                </Box>\r\n                                                            </Box>\r\n                                                            <Box>\r\n                                                                <Box display=\"flex\" justifyContent=\"flex-end\" style={{ width: '100%' }}>\r\n                                                                    <Button\r\n                                                                        className=\"trigger-btn\"\r\n                                                                        variant=\"contained\"\r\n                                                                        color=\"primary\"\r\n                                                                        onClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDataList.ActiveProduct = prod\r\n                                                                            sessionStorage.setItem('CurrentProduct',window.btoa(JSON.stringify(prod)))\r\n                                                                            window.location.href = window.location.origin + \"/#/app/products/\" + prod.productid + \"/service_templates\"\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <ArrowForwardIcon className={typographyClasses.text}/>\r\n                                                                    </Button>\r\n                                                                </Box>\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Grid>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Grid>\r\n                                :\r\n                                <Box>\r\n                                    {\r\n                                        loadTimeout === false ?\r\n                                            <Loader type=\"block\" />\r\n                                            :\r\n                                            <Typography className={`${typographyClasses.bold} ${typographyClasses.text}`} align=\"center\">No Products</Typography>\r\n\r\n                                    }\r\n                                </Box>\r\n                        }\r\n                    </Box>\r\n                </Box>\r\n            </Container>\r\n            <Footer page=\"app\" />\r\n            {\r\n                newProd === true ?\r\n                    <AddProduct Handler={CancelAddProduct}/>\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ServicesList;","import React, { useState, useEffect } from 'react';\r\n\r\n// Custom Components\r\nimport Loader from '../../Components/Loader';\r\nimport TopNav from '../../Components/AppNav';\r\nimport Alert from '../../Components/Alert';\r\nimport Footer from '../../Components/Footer/index';\r\nimport Cognitofunctions from '../Cognito/CognitoFunctions';\r\nimport AddService from './AddService'\r\nimport ServiceAPIs from './ServiceAPIs';\r\nimport DataList from '../../Utils/DataList';\r\nimport apidomain from '../../Utils/ApiDomain';\r\nimport apipath from '../../Utils/Apipath';\r\nimport GitAPIs from '../Git/GitAPIs';\r\n\r\n// Styles\r\nimport ContainerStyles from '../../assets/styles/ContainerStyles'\r\nimport TypographyStyles from '../../assets/styles/TypographySyles'\r\n\r\n// Material UI\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// Material Icons\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\n\r\n// React Helmet\r\nimport Helmet from \"react-helmet/es/Helmet\";\r\n\r\n\r\nconst ServicesList = ({ match }) => {\r\n\tconst [serviceList, setServiceList] = useState([])\r\n\tconst [openAlert, setOpenAlert] = useState(false)\r\n\tconst [severity, setSeverrity] = useState('')\r\n\tconst [message, setMessage] = useState('')\r\n\tconst [loadTimeout, setLoadTimeout] = useState(false)\r\n\tconst [newServ, setNewServ] = useState(false)\r\n\r\n\tconst containerClasses = ContainerStyles()\r\n\tconst typographyClasses = TypographyStyles()\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\t// if (!window.gapi) {\r\n\t\t//     GoogleScript.CheckGoogleAPI()\r\n\t\t// }\r\n\t\t// sessionStorage.removeItem('ServiceId')\r\n\t\tcheckrole()\r\n\t}, [])\r\n\r\n\tconst checkrole = () => {\r\n\t\tCognitofunctions.CurrentUser(function (success, data) {\r\n\t\t\tif (success) {\r\n\t\t\t\tlet gitapidata = {\r\n                    path: apipath['datastore'] + \"/git\",\r\n                    method: 'GET',\r\n                    body: {},\r\n                    headers: {\r\n                        headers: true,\r\n                        apidomain: apidomain.vmurl\r\n                    },\r\n                    ref: \"GetGitCredentials\"\r\n                }\r\n                manageAPIs(gitapidata)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// window.location.origin = window.location.origin + \"/login\"\r\n\t\t\t\t// window.location.origin = window.location.origin\r\n\t\t\t\tsetMessage('You are not authorized to access this page.')\r\n\t\t\t\tsetSeverrity('error')\r\n\t\t\t\tsetOpenAlert(true)\r\n\t\t\t\tsetLoadTimeout(false)\r\n\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\twindow.location.href = window.location.origin + \"/#/app/login\"\r\n\t\t\t\t\twindow.location.reload()\r\n\t\t\t\t}, 1000)\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tconst manageAPIs = (apidata) => {\r\n\t\tif (apidata.ref === \"GetGitCredentials\") {\r\n\t\t\tGitAPIs.GetGitDetails(apidata, function (success, response) {\r\n\t\t\t\tif (success) {\r\n\t\t\t\t\tif (Object.keys(response.data).length > 0) {\r\n\t\t\t\t\t\tlet nextapidata = {\r\n\t\t\t\t\t\t\tmethod: \"GET\",\r\n\t\t\t\t\t\t\tpath: apipath['apipath'] + \"/service/\" + match.params.productid,\r\n\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\theaders: true,\r\n\t\t\t\t\t\t\t\tapidomain: apidomain.vmurl\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tbody: {},\r\n\t\t\t\t\t\t\tref: \"GetAllServices\",\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmanageAPIs(nextapidata)\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\twindow.location.href = window.location.origin + \"/#/app/gitsetup\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\telse if (apidata.ref === \"GetAllServices\") {\r\n\t\t\tServiceAPIs.GetAllServices(apidata, function (success, response) {\r\n\t\t\t\tif (success) {\r\n\t\t\t\t\tif (response.hasOwnProperty('message')) {\r\n\t\t\t\t\t\tsetMessage(response.message)\r\n\t\t\t\t\t\tif (response.error) {\r\n\t\t\t\t\t\t\tsetSeverrity('error')\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tsetSeverrity('success')\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsetOpenAlert(true)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (response.data.length === 0) {\r\n\t\t\t\t\t\twindow.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/service_templates\"\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tsessionStorage.setItem('Services', window.btoa(JSON.stringify(response.data)))\r\n\t\t\t\t\t\tDataList.ServiceList = response.data\r\n\t\t\t\t\t\tsetServiceList(response.data)\r\n\t\t\t\t\t\tsetLoadTimeout(true)\r\n\t\t\t\t\t\tif (response.data.length === 1) {\r\n\t\t\t\t\t\t\tDataList.ActiveService = response.data[0]\r\n\t\t\t\t\t\t\tsessionStorage.setItem('CurrentService', window.btoa(JSON.stringify(response.data[0])))\r\n\t\t\t\t\t\t\twindow.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + response.data[0].serviceid\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsetMessage(response.message)\r\n\t\t\t\t\tsetSeverrity('error')\r\n\t\t\t\t\tsetOpenAlert(true)\r\n\t\t\t\t\tsetLoadTimeout(true)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleActions = (actionData, e) => {\r\n\t\tsetServiceList([])\r\n\t\tsetLoadTimeout(false)\r\n\t\te.preventDefault()\r\n\t\tif (actionData.Action === \"refresh\") {\r\n\t\t\tlet apidata = {\r\n\t\t\t\tmethod: \"GET\",\r\n\t\t\t\tpath: apipath['apipath'] + \"/service/\" + match.params.productid,\r\n\t\t\t\theaders: {\r\n\t\t\t\t\theaders: true,\r\n\t\t\t\t\tapidomain: apidomain.vmurl\r\n\t\t\t\t},\r\n\t\t\t\tbody: {},\r\n\t\t\t\tref: \"GetAllServices\",\r\n\t\t\t}\r\n\t\t\tmanageAPIs(apidata)\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleAlert = () => {\r\n\t\tsetOpenAlert(false)\r\n\t}\r\n\r\n\tconst CancelAddService = () => {\r\n\t\tsetNewServ(false)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Helmet>\r\n\t\t\t\t<title>Products</title>\r\n\t\t\t</Helmet>\r\n\t\t\t<TopNav />\r\n\t\t\t<Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n\t\t\t<Container className={containerClasses.root}>\r\n\t\t\t\t<Box style={{ width: '100%' }} p={1} pl={2} pr={2}>\r\n\t\t\t\t\t<Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" style={{ width: '100%' }} mb={1}>\r\n\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" >\r\n\t\t\t\t\t\t\t<Breadcrumbs separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\">\r\n\t\t\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\t\t\tstyle={{ cursor: \"pointer\" }}\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tsessionStorage.removeItem('CurrentProduct')\r\n\t\t\t\t\t\t\t\t\t\tsessionStorage.removeItem('Services')\r\n\t\t\t\t\t\t\t\t\t\tsessionStorage.removeItem('CurrentService')\r\n\t\t\t\t\t\t\t\t\t\tDataList.ActiveService = {}\r\n\t\t\t\t\t\t\t\t\t\tDataList.ActiveProduct = {}\r\n\t\t\t\t\t\t\t\t\t\tDataList.ServiceList = []\r\n\t\t\t\t\t\t\t\t\t\twindow.location.href = window.location.origin + \"/#/app/products\"\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<Typography className={`${typographyClasses.text} ${'text-design'} ${typographyClasses.bold}`}>Products</Typography>\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t<Typography className={typographyClasses.smallText}>{match.params.productid}</Typography>\r\n\t\t\t\t\t\t\t\t<Typography className={typographyClasses.smallText}>Services</Typography>\r\n\t\t\t\t\t\t\t</Breadcrumbs>\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t<Box display=\"flex\" alignItems=\"center\">\r\n\t\t\t\t\t\t\t<Box mr={1} display=\"flex\">\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tvariant=\"text\"\r\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\tonClick={handleActions.bind(this, { \"Action\": \"refresh\" })}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<RefreshIcon className={typographyClasses.text} />\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t<Box display=\"flex\">\r\n\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"trigger-btn\"\r\n\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\twindow.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/service_templates\"\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<AddIcon className={typographyClasses.text} />&nbsp;&nbsp;Create Service\r\n                                    </Button>\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"flexStart\"  >\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tserviceList.length > 0 ?\r\n\t\t\t\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tserviceList.map((serv, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\tlet des = serv.hasOwnProperty('description') ? (serv.description.length > 50 ? serv.description.slice(0, 50) : serv.description) : ''\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Grid item xs={12} sm={6} md={3} lg={2} style={{ padding: '3px' }} key={index}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Box boxShadow={2} display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\" p={2} bgcolor=\"white\" style={{ height: '100%' }} minHeight={150}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box display=\"flex\" flexDirection=\"column\" justifyContent=\"space-between\" style={{ width: '100%', height: '100%' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box mb={1} color=\"#525151\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography className={`${typographyClasses.bold} ${typographyClasses.h6}`} align=\"left\">{serv.servicename}</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box mb={1} color=\"#525151\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography className={`${typographyClasses.text}`} align=\"left\">{des}{serv.hasOwnProperty('description') ? (serv.description.length > 50 ? <span>&nbsp;...<span className={typographyClasses.smallText} onClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twindow.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + serv.serviceid\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}} style={{ color: 'blue', cursor: 'pointer' }}>Show More</span></span> : \"\") : \"\"}</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box mb={1} color=\"#525151\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Typography className={`${typographyClasses.smallText}`} align=\"left\">{serv.serviceid}</Typography>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Box display=\"flex\" justifyContent=\"flex-end\" style={{ width: '100%' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"trigger-btn\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDataList.ActiveService = serv\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsessionStorage.setItem('CurrentService', window.btoa(JSON.stringify(serv)))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twindow.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + serv.serviceid\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ArrowForwardIcon className={typographyClasses.text} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<Box>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tloadTimeout === false ?\r\n\t\t\t\t\t\t\t\t\t\t\t<Loader type=\"block\" />\r\n\t\t\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t\t\t<Typography className={`${typographyClasses.bold} ${typographyClasses.text}`} align=\"center\">No Services</Typography>\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</Box>\r\n\t\t\t</Container>\r\n\t\t\t<Footer page=\"app\" />\r\n\t\t\t{\r\n\t\t\t\tnewServ === true ?\r\n\t\t\t\t\t<AddService Handler={CancelAddService} />\r\n\t\t\t\t\t:\r\n\t\t\t\t\tnull\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ServicesList;","import React, { useState, useEffect } from 'react';\r\n\r\n// Custom Components\r\nimport Loader from '../../Components/Loader';\r\nimport TopNav from '../../Components/AppNav';\r\nimport Alert from '../../Components/Alert';\r\nimport Footer from '../../Components/Footer/index';\r\nimport Cognitofunctions from '../Cognito/CognitoFunctions';\r\nimport AddService from './AddService'\r\nimport DataList from '../../Utils/DataList';\r\nimport apidomain from '../../Utils/ApiDomain';\r\nimport apipath from '../../Utils/Apipath';\r\nimport HandleApi from '../../Utils/HandleApi';\r\n\r\n// Styles\r\nimport ContainerStyles from '../../assets/styles/ContainerStyles'\r\nimport TypographyStyles from '../../assets/styles/TypographySyles'\r\n\r\n// Material UI\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\n\r\n// Material Icons\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\n// React Helmet\r\nimport Helmet from \"react-helmet/es/Helmet\";\r\n\r\n\r\nconst ServicesList = ({ match }) => {\r\n    const [serviceList, setServiceList] = useState([])\r\n    const [loader, setLoader] = useState(false)\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [severity, setSeverrity] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [loadTimeout, setLoadTimeout] = useState(false)\r\n    const [newServ, setNewServ] = useState(false)\r\n    const [selectTemplate, setSelectTemplate] = useState(false)\r\n\r\n    const containerClasses = ContainerStyles()\r\n    const typographyClasses = TypographyStyles()\r\n\r\n\r\n    useEffect(() => {\r\n        checkrole()\r\n    }, [])\r\n\r\n    const checkrole = () => {\r\n        Cognitofunctions.CurrentUser(function (success, data) {\r\n            if (success) {\r\n                let apidata = {\r\n                    path: apipath['designapi'] + \"/service/templates\",\r\n                    ref: \"GetTemplates\",\r\n                    method: \"GET\",\r\n                    body: {},\r\n                    headers: {\r\n                        headers: true,\r\n                        apidomain: apidomain.vmurl\r\n                    }\r\n                }\r\n                manageAPIs(apidata)\r\n            }\r\n            else {\r\n                setMessage('You are not authorized to access this page.')\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n                setLoadTimeout(false)\r\n                setTimeout(function () {\r\n                    window.location.href = window.location.origin + \"/#/app/login\"\r\n                    window.location.reload()\r\n                }, 1000)\r\n            }\r\n        })\r\n    }\r\n\r\n    const manageAPIs = (apidata) => {\r\n        HandleApi.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n            .then(result => {\r\n                if (result.hasOwnProperty('message') && result.message !== \"\") {\r\n                    setMessage(result.message)\r\n                    setSeverrity('info')\r\n                    setOpenAlert(true)\r\n                }\r\n                if ((result.hasOwnProperty('statusCode') && result.statusCode === 200) || (result.hasOwnProperty('status') && (result.status === 200 || result.status === \"200\"))) {\r\n                    if (apidata.ref === \"GetTemplates\") {\r\n                        DataList.serviceTemplates = result.body\r\n                        let temps = []\r\n                        for (let i = 0; i < result.body.length; i++) {\r\n                            let zz = result.body[i]\r\n                            if (!zz.hasOwnProperty('name')) {\r\n                                zz['name'] = 'AWS-PYTHON-APIGW-FLASK-EKS-DYNAMODB-COGNITO'\r\n                            }\r\n                            zz['is_coming_soon'] = false\r\n                            temps.push(zz)\r\n                        }\r\n                        setServiceList(temps)\r\n                        setLoader(false)\r\n                    }\r\n                }\r\n                else {\r\n                    if (result.hasOwnProperty('error_message')) {\r\n                        setMessage(result.error_message)\r\n                    }\r\n                    else if (result.hasOwnProperty('errorMessage')) {\r\n                        setMessage(result.errorMessage)\r\n                    }\r\n                    else {\r\n                        setMessage('Some internal error, Please try after sometime')\r\n                    }\r\n                    if (apidata.ref === \"GetLiveResOP\" || apidata.ref === \"GetLiveResLogs\") {\r\n                        if (apidata.hasOwnProperty('show')) {\r\n                            if (apidata.show) {\r\n                                setSeverrity('error')\r\n                                setOpenAlert(true)\r\n                            }\r\n                            setLoader(false)\r\n                        }\r\n                    }\r\n                    else {\r\n                        setSeverrity('error')\r\n                        setOpenAlert(true)\r\n                        setLoader(false)\r\n                    }\r\n                }\r\n            })\r\n            .catch(err => {\r\n                setMessage(\"Some internal error,Please try after some time.\")\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n                setLoader(false)\r\n            })\r\n    }\r\n\r\n    const handleActions = (apidata) => {\r\n        if (apidata.Action === 'redirect') {\r\n            window.open(apidata.url, '_blank')\r\n        }\r\n        else if (apidata.Action === 'refresh') {\r\n            setServiceList([])\r\n            setLoader(true)\r\n            let apidata = {\r\n                path: apipath['designapi'] + \"/service/templates\",\r\n                ref: \"GetTemplates\",\r\n                method: \"GET\",\r\n                body: {},\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                }\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n    }\r\n\r\n    const handleAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n\r\n    const CancelAddService = () => {\r\n        setNewServ(false)\r\n    }\r\n\r\n    const ProcessServiceTemplateList = () => {\r\n        return (\r\n            <Grid container>\r\n                {\r\n                    serviceList.map((serv, index) => {\r\n                        return (\r\n                            <Grid xs={12} item style={{ padding: '0 0 10px 0' }} key={index}>\r\n                                <Box p={1} pl={2} pr={2} borderRadius={5} border={3} style={{ cursor: 'pointer', borderColor: selectTemplate === true && serv.is_coming_soon === false ? \"#3f51b5\" : 'lightgray', opacity: serv.is_coming_soon === false ? \"1\" : \"0.5\" }} bgcolor={selectTemplate === true && serv.is_coming_soon === false ? \"#3f51b5\" : \"#f5f5f5\"} onClick={() => serv.is_coming_soon === false ? handleSelectTemplate(serv) : \"\"} color={selectTemplate === true && serv.is_coming_soon === false ? \"white\" : \"\"}>\r\n                                    <Grid container alignItems=\"center\" justify=\"space-between\">\r\n                                        <Grid xs={1} item>\r\n                                            <Box display=\"flex\" alignItems=\"center\" width={30} height={30} style={{ borderRadius: '50%', borderColor: selectTemplate === true && serv.is_coming_soon === false ? \"#3f51b5\" : 'lightgray' }} border={3} bgcolor=\"white\" justifyContent=\"center\">\r\n                                                <Box width={18} height={18} style={{ borderRadius: '50%', borderColor: selectTemplate === true ? \"#3f51b5\" : 'lightgray' }} border={selectTemplate === true && serv.is_coming_soon === false ? 2 : 0} bgcolor={selectTemplate === true && serv.is_coming_soon === false ? \"#3f51b5\" : \"white\"}>\r\n\r\n                                                </Box>\r\n                                            </Box>\r\n                                        </Grid>\r\n                                        <Grid item xs={11}>\r\n                                            <Box display=\"flex\" flexDirection=\"column\">\r\n                                                <Box display=\"flex\" mb={1} color={selectTemplate === true && serv.is_coming_soon === false ? \"white\" : \"#555555\"}>\r\n                                                    <Typography className={`${typographyClasses.h6} ${typographyClasses.bold}`}>{serv.name}</Typography>\r\n                                                </Box>\r\n                                                <Box display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\">\r\n                                                    {\r\n                                                        Object.keys(serv).map((fld, flindex) => {\r\n                                                            if (fld !== \"servicetype\" && fld !== \"optionname\" && fld !== \"is_coming_soon\") {\r\n                                                                return (\r\n                                                                    <Box display=\"flex\" alignItems=\"center\" mr={6} mb={1} key={flindex}>\r\n                                                                        <Box display=\"flex\" mr={0.5}>\r\n                                                                            <Typography className={`${typographyClasses.text} ${typographyClasses.bold}`} color={selectTemplate === true && serv.is_coming_soon === false ? \"white\" : \"primary\"}>{fld}&nbsp;&nbsp;-&nbsp;&nbsp;</Typography>\r\n                                                                        </Box>\r\n                                                                        <Box display=\"flex\">\r\n                                                                            <Typography className={`${typographyClasses.text}`}>{serv[fld]}</Typography>\r\n                                                                        </Box>\r\n                                                                    </Box>\r\n                                                                )\r\n                                                            }\r\n                                                        })\r\n                                                    }\r\n                                                </Box>\r\n                                                {\r\n                                                    serv.is_coming_soon === true ?\r\n                                                        <Box display=\"flex\" alignItems=\"center\" mr={6} mb={1}>\r\n                                                            <Box display=\"flex\" mr={0.5} color=\"#151515\">\r\n                                                                <Typography className={`${typographyClasses.text} ${typographyClasses.bold}`}>Coming soon</Typography>\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                        :\r\n                                                        null\r\n                                                }\r\n                                            </Box>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Box>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    const handleSelectTemplate = (serv) => {\r\n        sessionStorage.setItem('selectedtemplate',window.btoa(JSON.stringify(serv)))\r\n        setSelectTemplate(true)\r\n        setNewServ(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Helmet>\r\n                <title>Service Catalog</title>\r\n            </Helmet>\r\n            <TopNav />\r\n            <Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n            <Container className={containerClasses.root} style={{ height: 'calc(100% - 81px)', marginBottom: '30px' }}>\r\n                <Box style={{ width: '100%' }} p={1} pl={2} pr={2}>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" style={{ width: '100%' }} mb={1}>\r\n                        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" >\r\n                            <Breadcrumbs separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\">\r\n                                <Box\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    onClick={() => {\r\n                                        sessionStorage.removeItem('CurrentProduct')\r\n                                        sessionStorage.removeItem('Services')\r\n                                        sessionStorage.removeItem('CurrentService')\r\n                                        DataList.ActiveService = {}\r\n                                        DataList.ActiveProduct = {}\r\n                                        DataList.ServiceList = []\r\n                                        window.location.href = window.location.origin + \"/#/app/products\"\r\n                                    }}\r\n                                >\r\n                                    <Typography className={`${typographyClasses.text} ${'text-design'} ${typographyClasses.bold}`}>Products</Typography>\r\n                                </Box>\r\n                                <Typography className={typographyClasses.smallText}>{match.params.productid}</Typography>\r\n                                <Typography className={typographyClasses.smallText}>Services</Typography>\r\n                            </Breadcrumbs>\r\n                        </Box>\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                            <Box mr={1} display=\"flex\">\r\n                                <Button\r\n                                    variant=\"text\"\r\n                                    color=\"primary\"\r\n                                    onClick={handleActions.bind(this, { \"Action\": \"refresh\" })}\r\n                                >\r\n                                    <RefreshIcon className={typographyClasses.text} />\r\n                                </Button>\r\n                            </Box>\r\n                            <Box display=\"flex\">\r\n                                <Box>\r\n                                    <Button\r\n                                        className=\"trigger-btn\"\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => setNewServ(true)}\r\n                                        disabled={!selectTemplate}\r\n                                    >\r\n                                        <AddIcon className={typographyClasses.text} />&nbsp;&nbsp;Create Service\r\n                                    </Button>\r\n                                </Box>\r\n                            </Box>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box mb={2} display=\"flex\">\r\n                        <Typography className={`${typographyClasses.h6} ${typographyClasses.bold}`}>Choose a template to create service</Typography>\r\n                    </Box>\r\n                    <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"flexStart\"  >\r\n                        {\r\n                            serviceList.length > 0 ?\r\n                                <ProcessServiceTemplateList />\r\n                                :\r\n                                <Box>\r\n                                    {\r\n                                        loadTimeout === false ?\r\n                                            <Loader type=\"block\" />\r\n                                            :\r\n                                            <Typography className={`${typographyClasses.bold} ${typographyClasses.text}`} align=\"center\">No Templates</Typography>\r\n\r\n                                    }\r\n                                </Box>\r\n                        }\r\n                    </Box>\r\n                </Box>\r\n            </Container>\r\n            <Footer page=\"app\" />\r\n            {\r\n                newServ === true ?\r\n                    <AddService Handler={CancelAddService} />\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ServicesList;","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Custom Components\r\nimport HandleApi from '../../Utils/HandleApi';\r\nimport Loader from '../../Components/Loader';\r\nimport Alert from '../../Components/Alert';\r\nimport Confirm from '../../Components/Confirm';\r\nimport apipath from '../../Utils/Apipath';\r\nimport apidomain from '../../Utils/ApiDomain';\r\n\r\n// Material UI\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport MuiAccordion from '@material-ui/core/Accordion';\r\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport MuiAccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n// Material Icons\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\n//Ace Editor\r\nimport AceEditor from 'react-ace'\r\nimport \"ace-builds/src-noconflict/mode-json\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\nimport \"ace-builds/src-noconflict/ext-language_tools\";\r\n\r\n// Styles\r\nimport TypographyStyles from '../../assets/styles/TypographySyles';\r\n\r\n// JQuery\r\nimport $ from 'jquery'\r\n\r\n\r\nconst sidebarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        cursor: 'pointer'\r\n    },\r\n    onhoveritem: {\r\n        '&:hover': {\r\n            backgroundColor: '#e6e8f3'\r\n        }\r\n    }\r\n}));\r\n\r\nconst tabStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n        backgroundColor: 'white'\r\n    },\r\n    header: {\r\n        boxShadow: 'none',\r\n        // borderBottom: '3px solid #3f51b5',\r\n        background: 'white'\r\n    }\r\n}));\r\n\r\nconst Accordion = withStyles({\r\n    root: {\r\n        // border: '1px solid rgba(0, 0, 0, .125)',\r\n        boxShadow: 'none',\r\n        '&:not(:last-child)': {\r\n            borderBottom: 0,\r\n        },\r\n        '&:before': {\r\n            display: 'none',\r\n        },\r\n        '&$expanded': {\r\n            margin: 'auto',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordion);\r\n\r\nconst AccordionSummary = withStyles({\r\n    root: {\r\n        backgroundColor: 'white',\r\n        borderBottom: '1px solid rgba(0, 0, 0, .125)',\r\n        marginBottom: 0,\r\n        minHeight: 56,\r\n        '&$expanded': {\r\n            minHeight: 56,\r\n            // border:'1px solid rgba(0, 0, 0, .125)'\r\n        },\r\n    },\r\n    // expandIcon: {\r\n    //     '&$expanded': {\r\n    //         transform: 'rotate(90deg)'\r\n    //     }\r\n    // },\r\n    content: {\r\n        margin: 0,\r\n        '&$expanded': {\r\n            margin: '0',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordionSummary);\r\n\r\nconst AccordionDetails = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiAccordionDetails);\r\n\r\nfunction expansionProps(name, index) {\r\n    return {\r\n        id: `${name}${index}-header`,\r\n        'aria-controls': `${name}${index}-content`,\r\n    };\r\n}\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={1} pl={0} pr={0}>\r\n                    {children}\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(name, index) {\r\n    return {\r\n        id: `${name}-auto-tab-${index}`,\r\n        'aria-controls': `${name}-auto-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\n\r\nconst TestCases = ({ resourceid, btnAction, methods, mainBlkTrigger, resourceStatus, resourcename, versionname, serviceid, apiid, versionid, productid }) => {\r\n    const [loader, setLoader] = useState(false)\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [severity, setSeverrity] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [confirmation, setConfirmation] = useState('')\r\n    const [confApiData, setConfApiData] = useState({})\r\n    const [loadTimeout, setLoadTimeout] = useState(false)\r\n    const [formDialog, setFormDialog] = useState(false)\r\n    const [formName, setFormName] = useState('')\r\n    const [formData, setFormData] = useState({})\r\n    const [testCases, setTestCases] = useState({})\r\n    const [tecsList, setTecsList] = useState([])\r\n    const [tecsJSON, setTecsJSON] = useState({})\r\n    const [curMethod, setCurMethod] = useState({\r\n        methodtype: \"Select Method Type\",\r\n        path: \"\"\r\n    })\r\n    const [showMethods, setShowMethods] = useState(false)\r\n    const [showOutput, setShowOutput] = useState(false)\r\n    const [curApiUrl, setCurApiUrl] = useState({})\r\n    const templates = {\r\n        \"post\": \"{\\n  \\\"Item\\\":{\\n    \\n  }\\n}\",\r\n        \"update\": \"{\\n  \\\"Item\\\":{\\n    \\\"updatekey\\\":\\\"\\\",\\n    \\\"updatevalue\\\":\\\"\\\"\\n  }\\n}\"\r\n    }\r\n    const [updPathParams, setUpdPathParams] = useState({})\r\n\r\n    const typographyClasses = TypographyStyles()\r\n    const tabClasses = tabStyles();\r\n    const sideBarClasses = sidebarStyles()\r\n\r\n    useEffect(() => {\r\n        checkrole()\r\n    }, [])\r\n\r\n    const checkrole = () => {\r\n        let apidata = {\r\n            path: apipath['designapi'] + \"/api/\" + productid + \"/\" + serviceid + \"/\" + apiid + \"/\" + versionid + \"/\" + resourceid + \"/getalltestcases\",\r\n            method: \"GET\",\r\n            body: {},\r\n            headers: {\r\n                headers: true,\r\n                apidomain: apidomain.vmurl\r\n            },\r\n            ref: \"GetTestCases\"\r\n        }\r\n        manageAPIs(apidata)\r\n    }\r\n\r\n    const manageAPIs = (apidata) => {\r\n        HandleApi.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n            .then(result => {\r\n                if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                    if (result.hasOwnProperty('message') && result.message !== \"\") {\r\n                        setMessage(result.message)\r\n                        setSeverrity('info')\r\n                        setOpenAlert(true)\r\n                    }\r\n                    if (apidata.ref === \"GetTestCases\") {\r\n                        if (result.body.length === 0) {\r\n                            setLoadTimeout(true)\r\n                            setFormName('Add Test Case')\r\n                            setFormDialog(true)\r\n                        }\r\n                        setTecsList(result.body)\r\n                    }\r\n                    else if (apidata.ref === \"NewTestCase\") {\r\n                        let apidata1 = {\r\n                            path: apipath['designapi'] + \"/api/\" + productid + \"/\" + serviceid + \"/\" + apiid + \"/\" + versionid + \"/\" + resourceid + \"/getalltestcases\",\r\n                            method: \"GET\",\r\n                            body: {},\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                            ref: \"GetTestCases\"\r\n                        }\r\n                        manageAPIs(apidata1)\r\n                        setFormDialog(false)\r\n                        setLoader(false)\r\n                        setCurMethod({\r\n                            methodtype: \"Select Method Type\",\r\n                            path: \"\"\r\n                        })\r\n                    }\r\n                    else if (apidata.ref === \"DeleteTestCase\") {\r\n                        let tecsjson = tecsJSON\r\n                        delete tecsJSON[apidata.body.testcaseid]\r\n\r\n                        let apidata1 = {\r\n                            path: apipath['designapi'] + \"/api/\" + productid + \"/\" + serviceid + \"/\" + apiid + \"/\" + versionid + \"/\" + resourceid + \"/getalltestcases\",\r\n                            method: \"GET\",\r\n                            body: {},\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                            ref: \"GetTestCases\"\r\n                        }\r\n                        manageAPIs(apidata1)\r\n                        setTecsJSON(tecsjson)\r\n                        setLoader(false)\r\n                    }\r\n                    else if (apidata.ref === \"UpdateTestCase\") {\r\n                        let tecs = tecsJSON\r\n                        tecs[apidata.body.testcaseid][apidata.key][apidata.editor]['code'] = result.body[apidata.editor]\r\n                        tecs[apidata.body.testcaseid][apidata.key][apidata.editor]['prevcode'] = result.body[apidata.editor]\r\n                        setTecsJSON(tecs)\r\n                        let tecslist = [...tecsList]\r\n                        setTecsList([])\r\n                        setTecsList(tecslist)\r\n                    }\r\n                    else if (apidata.ref === \"TestAPI\") {\r\n                        setLoader(false)\r\n                        let tecsjson = tecsJSON\r\n                        tecsjson[apidata.body.testcaseid]['expanded'] = true\r\n                        if (typeof (result.body.response) === \"object\") {\r\n                            let resp = JSON.stringify(result.body.response, null, 4)\r\n                            resp = JSON.parse(resp)\r\n                            resp = JSON.stringify(resp, null, '\\t')\r\n                            tecsjson[apidata.body.testcaseid]['tecsOp']['response']['code'] = resp\r\n\r\n                            // let heads = JSON.stringify(headers, null, 4)\r\n                            // heads = JSON.parse(heads)\r\n                            // heads = JSON.stringify(heads, null, '\\t')\r\n                            // tecsjson[apidata.body.testcaseid]['tecsOp']['headers']['code'] = heads\r\n\r\n                            tecsjson[apidata.body.testcaseid]['tecsOp']['tab'] = 0\r\n                            setTecsJSON(tecsjson)\r\n                        }\r\n                        else {\r\n                            tecsjson[apidata.body.testcaseid]['tecsOp']['response']['editor'] = \"text\"\r\n                            tecsjson[apidata.body.testcaseid]['tecsOp']['response']['code'] = result.body.response\r\n                        }\r\n                        let tecs = [...tecsList]\r\n                        setTecsList([])\r\n                        setTecsList(tecs)\r\n                        setShowOutput(true)\r\n                        setLoader(false)\r\n                    }\r\n                }\r\n                else {\r\n                    setMessage(result.errorMessage)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                    setLoader(false)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                setMessage(err)\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n                setLoader(false)\r\n            })\r\n\r\n    }\r\n\r\n    const handleActions = (apidata) => {\r\n        if (apidata.Action === 'redirect') {\r\n            window.open(apidata.url, '_blank')\r\n        }\r\n        else if (apidata.Action === \"refresh\") {\r\n            setTecsList([])\r\n            setLoadTimeout(false)\r\n            let apidata = {\r\n                path: apipath['designapi'] + \"/api/\" + productid + \"/\" + serviceid + \"/\" + apiid + \"/\" + versionid + \"/\" + resourceid + \"/getalltestcases\",\r\n                method: \"GET\",\r\n                body: {},\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                ref: \"GetTestCases\"\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n        else if (apidata.Action === \"confirmation\") {\r\n            setConfApiData(apidata['apidata'])\r\n            setConfirmation(apidata.confirmText)\r\n        }\r\n        else {\r\n            if (apidata.method === \"DELETE\") {\r\n                setLoader(true)\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n    }\r\n\r\n    const handleAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n\r\n    const handleConfirmation = (key) => {\r\n        setConfirmation('')\r\n        if (key) {\r\n            setLoader(true)\r\n            handleActions(confApiData)\r\n            // console.log(confApiData)\r\n            setConfApiData({})\r\n        }\r\n        else {\r\n            setConfApiData({})\r\n        }\r\n    }\r\n\r\n    const handleEditcode = (testcaseid, key, editor) => {\r\n        let tecsjson = tecsJSON\r\n        tecsjson[testcaseid][key][editor]['readonly'] = false\r\n        setTecsJSON(tecsjson)\r\n        let tecslist = [...tecsList]\r\n        setTecsList([])\r\n        setTecsList(tecslist)\r\n    }\r\n\r\n    const saveCode = (testcase, key, editor) => {\r\n        let tecsjson = tecsJSON, canSubmit = true, validatejson\r\n        try {\r\n            validatejson = JSON.parse(tecsjson[testcase.testcaseid][key][editor]['code'])\r\n            tecsjson[testcase.testcaseid][key][editor]['readonly'] = true\r\n            tecsjson[testcase.testcaseid][key][editor]['prevcode'] = tecsjson[testcase.testcaseid][key][editor]['code']\r\n            canSubmit = true\r\n        } catch (error) {\r\n            setMessage('Please enter valid JSON or else your inputs  will not be saved.')\r\n            setSeverrity('error')\r\n            setOpenAlert(true)\r\n            canSubmit = false\r\n        }\r\n        if (canSubmit) {\r\n            setTecsJSON(tecsjson)\r\n            let tecslist = [...tecsList]\r\n            setTecsList([])\r\n            setTecsList(tecslist)\r\n            let apidata = {\r\n                ref: \"UpdateTestCase\",\r\n                method: \"PATCH\",\r\n                path: apipath['designapi'] + \"/api/\" + productid + \"/\" + serviceid + \"/\" + apiid + \"/\" + versionid + \"/\" + resourceid + \"/\" + testcase.methodid + \"/\" + testcase.testcaseid,\r\n                key: key,\r\n                editor: editor,\r\n                body: {\r\n                    \"testcaseid\": testcase.testcaseid\r\n                },\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n            }\r\n            apidata['body'][editor] = tecsjson[testcase.testcaseid][key][editor]['code']\r\n            manageAPIs(apidata)\r\n        }\r\n    }\r\n\r\n    const onChangeCode = (testcaseid, key, editor, event) => {\r\n        let tecsjson = tecsJSON\r\n        tecsjson[testcaseid][key][editor]['code'] = event\r\n        setTecsJSON(tecsjson)\r\n    }\r\n\r\n    const handleTecsSubTab = (testcaseid, key, event, newValue) => {\r\n        let tecsjson = tecsJSON\r\n        tecsjson[testcaseid][key]['tab'] = newValue\r\n        setTecsJSON(tecsjson);\r\n        let tecslist = [...tecsList]\r\n        setTecsList([])\r\n        setTecsList(tecslist)\r\n    };\r\n\r\n    const handleTecsPanelChange = (testcase) => {\r\n        let tecsjson = tecsJSON\r\n        tecsjson[testcase]['expanded'] = !tecsjson[testcase]['expanded']\r\n        setTecsJSON(tecsjson)\r\n        let tecslist = [...tecsList]\r\n        setTecsList([])\r\n        setTecsList(tecslist)\r\n    };\r\n\r\n    const TestCaseTab = ({ testcase }) => {\r\n        let tablist = ['Body', 'Path Params', 'Query Params', 'Headers']\r\n        if (testcase['methodtype'] === \"GET\" || testcase['methodtype'] === \"DELETE\") {\r\n            if (tecsJSON[testcase.testcaseid]['actualurl'].indexOf('<') === -1) {\r\n                tablist = ['Query Params', 'Headers']\r\n            }\r\n            else {\r\n                tablist = ['Path Params', 'Query Params', 'Headers']\r\n            }\r\n        }\r\n        else {\r\n            if (tecsJSON[testcase.testcaseid]['actualurl'].indexOf('<') === -1) {\r\n                tablist = ['Body', 'Query Params', 'Headers']\r\n            }\r\n            else {\r\n                tablist = ['Body', 'Path Params', 'Query Params', 'Headers']\r\n            }\r\n        }\r\n        return (\r\n            <Box>\r\n                <Grid container>\r\n                    <Grid item xs={tecsJSON[testcase.testcaseid]['showoutput'] === false ? 12 : 6}>\r\n                        <Box style={{ borderColor: 'lightgray' }} p={1} pb={0}>\r\n                            <Box display=\"flex\">\r\n                                <Typography className={`${typographyClasses.bold} ${typographyClasses.text}`}>Input</Typography>\r\n                            </Box>\r\n                            <Box>\r\n                                <Box>\r\n                                    <div className={tabClasses.root}>\r\n                                        <AppBar position=\"static\" color=\"default\" className={tabClasses.header}>\r\n                                            <Tabs\r\n                                                value={tecsJSON[testcase.testcaseid]['tecsIp']['tab']}\r\n                                                onChange={handleTecsSubTab.bind(this, testcase.testcaseid, 'tecsIp')}\r\n                                                variant=\"scrollable\"\r\n                                                scrollButtons=\"auto\"\r\n                                                aria-label=\"TestCase-Main-sub auto tabs example\"\r\n                                                style={{ marginBottom: '8px 0' }}\r\n                                            >\r\n                                                {\r\n                                                    tablist.map((tab, tabindex) => {\r\n                                                        return (\r\n                                                            <Tab style={{ margin: '8px 0' }} label={<Typography className={typographyClasses.smallText}>{tab}</Typography>} {...a11yProps(\"TestCase-Main-sub\", tabindex)} />\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </Tabs>\r\n                                        </AppBar>\r\n                                        {\r\n                                            tablist.map((tab, tabindex) => {\r\n                                                if (tab === \"Body\") {\r\n                                                    return (\r\n                                                        <TabPanel value={tecsJSON[testcase.testcaseid]['tecsIp']['tab']} index={tabindex}>\r\n                                                            <Box style={{ height: 'fit-content', width: '100%' }} margin=\"auto\" display=\"flex\" border={1} >\r\n                                                                <Box width={50} display=\"flex\" flexDirection=\"column\" alignItems=\"center\" style={{ height: '100%' }}>\r\n                                                                    <Box p={1} style={{ width: '100%', height: '50px', cursor: 'pointer' }} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" borderBottom={1} onClick={() => {\r\n                                                                        if (tecsJSON[testcase.testcaseid]['tecsIp']['body']['readonly']) {\r\n                                                                            handleEditcode(testcase.testcaseid, 'tecsIp', 'body')\r\n                                                                        }\r\n                                                                        else {\r\n                                                                            saveCode(testcase, 'tecsIp', 'body')\r\n                                                                        }\r\n                                                                    }}>\r\n                                                                        {\r\n                                                                            tecsJSON[testcase.testcaseid]['tecsIp']['body']['readonly'] === true ?\r\n                                                                                <EditIcon className={typographyClasses.h6} color=\"primary\" />\r\n                                                                                :\r\n                                                                                <SaveIcon className={typographyClasses.h6} color=\"primary\" />\r\n                                                                        }\r\n                                                                    </Box>\r\n                                                                </Box>\r\n                                                                <Box style={{ height: '100%', width: 'calc(100% - 50px)' }}>\r\n                                                                    <AceEditor\r\n                                                                        style={{ height: '100%', width: '100%' }}\r\n                                                                        mode=\"json\"\r\n                                                                        theme=\"monokai\"\r\n                                                                        value={tecsJSON[testcase.testcaseid]['tecsIp']['body']['code'] === \"\" ? (testcase['methodtype'] === \"POST\" ? templates['post'] : templates['update']) : tecsJSON[testcase.testcaseid]['tecsIp']['body']['code']}\r\n                                                                        onChange={(event) => onChangeCode(testcase.testcaseid, 'tecsIp', 'body', event)}\r\n                                                                        name=\"full_code\"\r\n                                                                        setOptions={{\r\n                                                                            fontSize: 12,\r\n                                                                            minLines: 15,\r\n                                                                            maxLines: 25,\r\n                                                                            enableBasicAutocompletion: true,\r\n                                                                            enableLiveAutocompletion: true,\r\n                                                                            useSoftTabs: true,\r\n                                                                            tabSize: 2,\r\n                                                                            showPrintMargin: false,\r\n                                                                            wrap: true,\r\n                                                                            readOnly: tecsJSON[testcase.testcaseid]['tecsIp']['body']['readonly'],\r\n                                                                            dragEnabled: false\r\n                                                                        }}\r\n                                                                        editorProps={{ $blockScrolling: true }}\r\n                                                                    />\r\n                                                                </Box>\r\n                                                            </Box>\r\n                                                        </TabPanel>\r\n                                                    )\r\n                                                }\r\n                                                else if (tab === \"Path Params\") {\r\n                                                    return (\r\n                                                        <TabPanel value={tecsJSON[testcase.testcaseid]['tecsIp']['tab']} index={tabindex}>\r\n                                                            <Box style={{ width: '100%' }} margin=\"auto\" display=\"flex\" flexDirection=\"column\">\r\n                                                                {\r\n                                                                    Object.keys(tecsJSON[testcase.testcaseid]['tecsIp']['pathparameters']['values']).map((ptparam, ptindex) => {\r\n                                                                        return (\r\n                                                                            <Box display=\"flex\" alignItems=\"center\" border={1} style={{ borderColor: 'lightgray' }} key={ptindex}>\r\n                                                                                <Grid container>\r\n                                                                                    <Grid item xs={4}>\r\n                                                                                        <Box display=\"flex\" style={{ borderColor: 'lightgray' }} p={1}>\r\n                                                                                            <Typography className={`${typographyClasses.bold} ${typographyClasses.smallText}`} color=\"primary\">{ptparam}</Typography>\r\n                                                                                        </Box>\r\n                                                                                    </Grid>\r\n                                                                                    <Grid item xs={8}>\r\n                                                                                        <Box display=\"flex\" style={{ borderColor: 'lightgray' }} p={1} alignItems=\"center\">\r\n                                                                                            <Box display=\"flex\" mr={3}>\r\n                                                                                                <Typography className={`${typographyClasses.smallText}`} color=\"primary\">{tecsJSON[testcase['testcaseid']]['tecsIp']['pathparameters']['values'][ptparam]}</Typography>\r\n                                                                                            </Box>\r\n                                                                                            <Box display=\"flex\" onClick={() => {\r\n                                                                                                setFormName('Edit Path Parameter')\r\n                                                                                                setUpdPathParams({\r\n                                                                                                    \"testcaseid\": testcase['testcaseid'],\r\n                                                                                                    updatekey: ptparam,\r\n                                                                                                    updatevalue: tecsJSON[testcase['testcaseid']]['tecsIp']['pathparameters']['values'][ptparam]\r\n                                                                                                })\r\n                                                                                                setFormDialog(true)\r\n                                                                                            }}>\r\n                                                                                                <EditIcon className={typographyClasses.text} color=\"primary\" />\r\n                                                                                            </Box>\r\n                                                                                        </Box>\r\n                                                                                    </Grid>\r\n                                                                                </Grid>\r\n                                                                            </Box>\r\n                                                                        )\r\n                                                                    })\r\n                                                                }\r\n                                                            </Box>\r\n                                                        </TabPanel>\r\n                                                    )\r\n                                                }\r\n                                                else if (tab === \"Query Params\") {\r\n                                                    return (\r\n                                                        <TabPanel value={tecsJSON[testcase.testcaseid]['tecsIp']['tab']} index={tabindex}>\r\n                                                            <Box style={{ height: 'fit-content', width: '100%' }} margin=\"auto\" display=\"flex\" border={1} >\r\n                                                                <Box width={50} display=\"flex\" flexDirection=\"column\" alignItems=\"center\" style={{ height: '100%' }}>\r\n                                                                    <Box p={1} style={{ width: '100%', height: '50px', cursor: 'pointer' }} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" borderBottom={1} onClick={() => {\r\n                                                                        if (tecsJSON[testcase.testcaseid]['tecsIp']['queryparameters']['readonly']) {\r\n                                                                            handleEditcode(testcase.testcaseid, 'tecsIp', 'queryparameters')\r\n                                                                        }\r\n                                                                        else {\r\n                                                                            saveCode(testcase, 'tecsIp', 'queryparameters')\r\n                                                                        }\r\n                                                                    }}>\r\n                                                                        {\r\n                                                                            tecsJSON[testcase.testcaseid]['tecsIp']['queryparameters']['readonly'] === true ?\r\n                                                                                <EditIcon className={typographyClasses.h6} color=\"primary\" />\r\n                                                                                :\r\n                                                                                <SaveIcon className={typographyClasses.h6} color=\"primary\" />\r\n                                                                        }\r\n                                                                    </Box>\r\n                                                                </Box>\r\n                                                                <Box style={{ height: '100%', width: 'calc(100% - 50px)' }}>\r\n                                                                    <AceEditor\r\n                                                                        style={{ height: '100%', width: '100%' }}\r\n                                                                        mode=\"json\"\r\n                                                                        theme=\"monokai\"\r\n                                                                        value={tecsJSON[testcase.testcaseid]['tecsIp']['queryparameters']['code'] === \"\" ? \"{}\" : tecsJSON[testcase.testcaseid]['tecsIp']['queryparameters']['code']}\r\n                                                                        onChange={(event) => onChangeCode(testcase.testcaseid, 'tecsIp', 'queryparameters', event)}\r\n                                                                        name=\"full_code\"\r\n                                                                        setOptions={{\r\n                                                                            fontSize: 12,\r\n                                                                            minLines: 15,\r\n                                                                            maxLines: 25,\r\n                                                                            enableBasicAutocompletion: true,\r\n                                                                            enableLiveAutocompletion: true,\r\n                                                                            useSoftTabs: true,\r\n                                                                            tabSize: 2,\r\n                                                                            showPrintMargin: false,\r\n                                                                            wrap: true,\r\n                                                                            readOnly: tecsJSON[testcase.testcaseid]['tecsIp']['queryparameters']['readonly'],\r\n                                                                            dragEnabled: false\r\n                                                                        }}\r\n                                                                        editorProps={{ $blockScrolling: true }}\r\n                                                                    />\r\n                                                                </Box>\r\n                                                            </Box>\r\n                                                        </TabPanel>\r\n                                                    )\r\n                                                }\r\n                                                else if (tab === \"Headers\") {\r\n                                                    return (\r\n                                                        <TabPanel value={tecsJSON[testcase.testcaseid]['tecsIp']['tab']} index={tabindex}>\r\n                                                            <Box style={{ height: 'fit-content', width: '100%' }} margin=\"auto\" display=\"flex\" border={1} >\r\n                                                                <Box width={50} display=\"flex\" flexDirection=\"column\" alignItems=\"center\" style={{ height: '100%' }}>\r\n                                                                    <Box p={1} style={{ width: '100%', height: '50px', cursor: 'pointer' }} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" borderBottom={1} onClick={() => {\r\n                                                                        if (tecsJSON[testcase.testcaseid]['tecsIp']['headers']['readonly']) {\r\n                                                                            handleEditcode(testcase.testcaseid, 'tecsIp', 'headers')\r\n                                                                        }\r\n                                                                        else {\r\n                                                                            saveCode(testcase, 'tecsIp', 'headers')\r\n                                                                        }\r\n                                                                    }}>\r\n                                                                        {\r\n                                                                            tecsJSON[testcase.testcaseid]['tecsIp']['headers']['readonly'] === true ?\r\n                                                                                <EditIcon className={typographyClasses.h6} color=\"primary\" />\r\n                                                                                :\r\n                                                                                <SaveIcon className={typographyClasses.h6} color=\"primary\" />\r\n                                                                        }\r\n                                                                    </Box>\r\n                                                                </Box>\r\n                                                                <Box style={{ height: '100%', width: 'calc(100% - 50px)' }}>\r\n                                                                    <AceEditor\r\n                                                                        style={{ height: '100%', width: '100%' }}\r\n                                                                        mode=\"json\"\r\n                                                                        theme=\"monokai\"\r\n                                                                        value={tecsJSON[testcase.testcaseid]['tecsIp']['headers']['code'] === \"\" ? \"{}\" : tecsJSON[testcase.testcaseid]['tecsIp']['headers']['code']}\r\n                                                                        onChange={(event) => onChangeCode(testcase.testcaseid, 'tecsIp', 'headers', event)}\r\n                                                                        name=\"full_code\"\r\n                                                                        setOptions={{\r\n                                                                            fontSize: 12,\r\n                                                                            minLines: 15,\r\n                                                                            maxLines: 25,\r\n                                                                            enableBasicAutocompletion: true,\r\n                                                                            enableLiveAutocompletion: true,\r\n                                                                            useSoftTabs: true,\r\n                                                                            tabSize: 2,\r\n                                                                            showPrintMargin: false,\r\n                                                                            wrap: true,\r\n                                                                            readOnly: tecsJSON[testcase.testcaseid]['tecsIp']['headers']['readonly'],\r\n                                                                            dragEnabled: false\r\n                                                                        }}\r\n                                                                        editorProps={{ $blockScrolling: true }}\r\n                                                                    />\r\n                                                                </Box>\r\n                                                            </Box>\r\n                                                        </TabPanel>\r\n                                                    )\r\n                                                }\r\n                                            })\r\n                                        }\r\n                                    </div>\r\n                                </Box>\r\n                            </Box>\r\n                        </Box>\r\n                    </Grid>\r\n                    {\r\n                        tecsJSON[testcase.testcaseid]['showoutput'] === true ?\r\n                            <Grid item xs={6}>\r\n                                <Box p={1} pb={0}>\r\n                                    <Box display=\"flex\">\r\n                                        <Typography className={`${typographyClasses.bold} ${typographyClasses.text}`}>Output</Typography>\r\n                                    </Box>\r\n                                    <Box>\r\n                                        <Box>\r\n                                            <div className={tabClasses.root}>\r\n                                                <AppBar position=\"static\" color=\"default\" className={tabClasses.header}>\r\n                                                    <Tabs\r\n                                                        value={tecsJSON[testcase.testcaseid]['tecsOp']['tab']}\r\n                                                        onChange={handleTecsSubTab.bind(this, testcase.testcaseid, 'tecsOp')}\r\n                                                        variant=\"scrollable\"\r\n                                                        scrollButtons=\"auto\"\r\n                                                        aria-label=\"TestCase-Main-sub2 auto tabs example\"\r\n                                                        style={{ marginBottom: '8px 0' }}\r\n                                                    >\r\n                                                        <Tab style={{ margin: '8px 0' }} label={<Typography className={typographyClasses.smallText}>Response</Typography>} {...a11yProps(\"TestCase-Main-sub2\", 0)} />\r\n                                                        <Tab style={{ margin: '8px 0' }} label={<Typography className={typographyClasses.smallText}>Headers</Typography>} {...a11yProps(\"TestCase-Main-sub2\", 1)} />\r\n                                                    </Tabs>\r\n                                                </AppBar>\r\n                                                <TabPanel value={tecsJSON[testcase.testcaseid]['tecsOp']['tab']} index={0}>\r\n                                                    <Box style={{ height: 'fit-content', width: '100%' }} margin=\"auto\" display=\"flex\" border={1} >\r\n                                                        <Box style={{ height: '100%', width: '100%' }}>\r\n                                                            <AceEditor\r\n                                                                style={{ height: '100%', width: '100%' }}\r\n                                                                mode={tecsJSON[testcase.testcaseid]['tecsOp']['response']['editor']}\r\n                                                                theme=\"monokai\"\r\n                                                                value={tecsJSON[testcase.testcaseid]['tecsOp']['response']['code'] === \"\" ? \"{}\" : tecsJSON[testcase.testcaseid]['tecsOp']['response']['code']}\r\n                                                                name=\"full_code\"\r\n                                                                setOptions={{\r\n                                                                    fontSize: 12,\r\n                                                                    minLines: 15,\r\n                                                                    maxLines: 25,\r\n                                                                    enableBasicAutocompletion: true,\r\n                                                                    enableLiveAutocompletion: true,\r\n                                                                    useSoftTabs: true,\r\n                                                                    tabSize: 2,\r\n                                                                    showPrintMargin: false,\r\n                                                                    wrap: true,\r\n                                                                    readOnly: tecsJSON[testcase.testcaseid]['tecsOp']['response']['readonly'],\r\n                                                                    dragEnabled: false\r\n                                                                }}\r\n                                                                editorProps={{ $blockScrolling: true }}\r\n                                                            />\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </TabPanel>\r\n                                                <TabPanel value={tecsJSON[testcase.testcaseid]['tecsOp']['tab']} index={1}>\r\n                                                    <Box style={{ height: 'fit-content', width: '100%' }} margin=\"auto\" display=\"flex\" border={1} >\r\n                                                        <Box style={{ height: '100%', width: '100% ' }}>\r\n                                                            <AceEditor\r\n                                                                style={{ height: '100%', width: '100%' }}\r\n                                                                mode=\"json\"\r\n                                                                theme=\"monokai\"\r\n                                                                value={tecsJSON[testcase.testcaseid]['tecsOp']['headers']['code'] === \"\" ? \"{}\" : tecsJSON[testcase.testcaseid]['tecsOp']['headers']['code']}\r\n                                                                setOptions={{\r\n                                                                    fontSize: 12,\r\n                                                                    minLines: 15,\r\n                                                                    maxLines: 25,\r\n                                                                    enableBasicAutocompletion: true,\r\n                                                                    enableLiveAutocompletion: true,\r\n                                                                    useSoftTabs: true,\r\n                                                                    tabSize: 2,\r\n                                                                    showPrintMargin: false,\r\n                                                                    wrap: true,\r\n                                                                    readOnly: tecsJSON[testcase.testcaseid]['tecsOp']['headers']['readonly'],\r\n                                                                    dragEnabled: false\r\n                                                                }}\r\n                                                                editorProps={{ $blockScrolling: true }}\r\n                                                            />\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </TabPanel>\r\n                                            </div>\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Box>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </Grid>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    const handleChangeUrl = (testcase, event) => {\r\n        let tcsjson = tecsJSON\r\n        tcsjson[testcase]['url'] = event.target.value\r\n        setTecsJSON(tcsjson)\r\n        let tecslist = [...tecsList]\r\n        setTecsList([])\r\n        setTecsList(tecslist)\r\n    }\r\n\r\n    const TestCasesList = () => {\r\n        return (\r\n            <Box>\r\n                {\r\n                    tecsList.length > 0 ?\r\n                        tecsList.map((tecs, index) => {\r\n                            let url = window.location.origin + \"/liveapp/\" + serviceid + \"/\" + versionname + \"/\" + resourcename + tecs.methodpath\r\n\r\n                            let actualurl = url\r\n\r\n                            if (tecs['queryparameters'] !== \"\") {\r\n                                let quepams = JSON.parse(tecs['queryparameters'])\r\n                                let urlparams = \"?\", keys = Object.keys(quepams)\r\n                                for (let i = 0; i < keys.length; i++) {\r\n                                    if (i + 1 === keys.length) {\r\n                                        urlparams = urlparams + keys[i] + \"=\" + quepams[keys[i]]\r\n                                    }\r\n                                    else {\r\n                                        urlparams = urlparams + keys[i] + \"=\" + quepams[keys[i]] + \"?\"\r\n                                    }\r\n                                }\r\n                                url = url + urlparams\r\n                            }\r\n\r\n                            let patparams = tecs.pathparameters\r\n\r\n                            if (actualurl.indexOf('<') !== -1) {\r\n                                if (Object.keys(patparams).length === 0) {\r\n                                    patparams = { \"dummy\": \"a\" }\r\n                                    let spliturl = actualurl.split('<')\r\n                                    for (let i = 1; i < spliturl.length; i++) {\r\n                                        patparams[spliturl[i].split('>')[0]] = \"\"\r\n                                    }\r\n\r\n                                    delete patparams['dummy']\r\n                                }\r\n                            }\r\n                            if (!tecsJSON.hasOwnProperty(tecs.testcaseid)) {\r\n                                tecsJSON[tecs.testcaseid] = {\r\n                                    expanded: false,\r\n                                    tab: 0,\r\n                                    tecsIp: {\r\n                                        tab: 0,\r\n                                        queryparameters: {\r\n                                            readonly: true,\r\n                                            prevcode: tecs.queryparameters,\r\n                                            code: tecs.queryparameters\r\n                                        },\r\n                                        body: {\r\n                                            readonly: true,\r\n                                            code: tecs.body,\r\n                                            prevcode: tecs.body,\r\n                                        },\r\n                                        headers: {\r\n                                            readonly: true,\r\n                                            prevcode: tecs.headers,\r\n                                            code: tecs.headers,\r\n                                        },\r\n                                        pathparameters: {\r\n                                            values: patparams,\r\n                                        }\r\n                                    },\r\n                                    tecsOp: {\r\n                                        tab: 0,\r\n                                        headers: {\r\n                                            readonly: true,\r\n                                            code: \"\",\r\n                                        },\r\n                                        response: {\r\n                                            readonly: true,\r\n                                            code: \"\",\r\n                                            editor: \"json\"\r\n                                        }\r\n                                    },\r\n                                    actualurl: window.location.origin + \"/liveapp/\" + serviceid + \"/\" + versionname + \"/\" + resourcename + tecs.methodpath,\r\n                                    url: url,\r\n                                    type: tecs.methodtype,\r\n                                    showoutput: false\r\n                                }\r\n                            }\r\n                            return (\r\n                                <Box key={index}>\r\n                                    <Accordion square TransitionProps={{ unmountOnExit: true }} style={{ marginBottom: '4px' }} defaultExpanded expanded={tecsJSON[tecs.testcaseid]['expanded']} onChange={() => handleTecsPanelChange(tecs.testcaseid)}>\r\n                                        <AccordionSummary {...expansionProps(\"testcase\", index)} expandIcon={<ExpandMoreIcon fontSize=\"small\" />} style={{ minHeight: 35, height: 40, margin: '0 !important', padding: 5, border: '1px solid lightgray', backgroundColor: '#f2f2f2' }}>\r\n                                            <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%' }} justifyContent=\"space-between\">\r\n                                                <Box display=\"flex\" alignItems=\"center\">\r\n                                                    <Box display=\"flex\" minWidth={75} mr={3}>\r\n                                                        <Box display=\"flex\">\r\n                                                            <Typography color=\"inherit\" className={`${typographyClasses.smallText}`}>{tecs.testcasename}</Typography>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                <Box display=\"flex\" alignItems=\"center\">\r\n                                                    <Box mr={1}>\r\n                                                        <Button\r\n                                                            variant=\"text\"\r\n                                                            color=\"secondary\"\r\n                                                            onClick={(e) => {\r\n                                                                e.stopPropagation()\r\n                                                                handleActions({\r\n                                                                    Action: \"confirmation\",\r\n                                                                    confirmText: \"Are you sure you want to delete this Test Case(\" + tecs.testcasename + \")?\",\r\n                                                                    apidata: {\r\n                                                                        index: index,\r\n                                                                        method: \"DELETE\",\r\n                                                                        path: apipath['designapi'] + \"/api/\" + productid + \"/\" + serviceid + \"/\" + apiid + \"/\" + versionid + \"/\" + resourceid + \"/\" + tecs.methodid + \"/\" + tecs.testcaseid,\r\n                                                                        headers: {\r\n                                                                            headers: true,\r\n                                                                            apidomain: apidomain.vmurl\r\n                                                                        },\r\n                                                                        ref: \"DeleteTestCase\",\r\n                                                                        body: {}\r\n                                                                    }\r\n                                                                })\r\n                                                            }}\r\n                                                        >\r\n                                                            <DeleteIcon className={typographyClasses.text} />\r\n                                                        </Button>\r\n                                                    </Box>\r\n                                                    <Box mr={1}>\r\n                                                        <Button\r\n                                                            variant=\"contained\"\r\n                                                            className=\"trigger-btn\"\r\n                                                            color=\"primary\"\r\n                                                            onClick={(e) => {\r\n                                                                e.stopPropagation()\r\n                                                                TriggerAPITest(tecs.testcaseid)\r\n                                                            }}\r\n                                                            title={resourceStatus === \"Running\" ? \"Test API\" : \"Resource is not in running state\"}\r\n                                                            disabled={resourceStatus === \"Running\" ? false : true}\r\n                                                        >\r\n                                                            Test\r\n                                                        </Button>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            </Box>\r\n                                        </AccordionSummary>\r\n                                        <AccordionDetails style={{ padding: 0 }}>\r\n                                            <Box style={{ width: '100%', borderColor: 'lightgray' }} border={1}>\r\n                                                <Box p={1}>\r\n                                                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                                            <Box display=\"flex\" mr={2}>\r\n                                                                <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>Type</Typography>\r\n                                                            </Box>\r\n                                                            <Box>\r\n                                                                <Typography className={`${typographyClasses.smallText}`}>{tecs.methodtype}</Typography>\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                                            <Box display=\"flex\" mr={2}>\r\n                                                                <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>Endpoint&nbsp;-&nbsp;</Typography>\r\n                                                            </Box>\r\n                                                            <Box display=\"flex\" alignItems=\"center\">\r\n                                                                <Box display=\"flex\">\r\n                                                                    <Typography className={`${typographyClasses.smallText}`} align=\"left\">{tecsJSON[tecs.testcaseid]['url']}</Typography>\r\n                                                                </Box>\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                <TestCaseTab testcase={tecs} />\r\n                                            </Box>\r\n                                        </AccordionDetails>\r\n                                    </Accordion>\r\n                                </Box>\r\n                            )\r\n                        })\r\n                        :\r\n                        <Box p={1}>\r\n                            {\r\n                                loadTimeout === false ?\r\n                                    <Loader type=\"block\" />\r\n                                    :\r\n                                    <Typography className={typographyClasses.smallText}>No Test Cases</Typography>\r\n\r\n                            }\r\n                        </Box>\r\n                }\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    const handleFormDataChage = (field, event) => {\r\n        let formFields = formData;\r\n        formFields[field] = event.target.value;\r\n        setFormData(formFields);\r\n    }\r\n\r\n    const FormDialogSubmit = () => {\r\n        setLoader(true)\r\n        let canSubmit = true, requireAttrs = [], path = '', ref = ''\r\n        if (formName === \"Add Test Case\") {\r\n            requireAttrs.push('testcasename')\r\n            requireAttrs.push('methodtype')\r\n            requireAttrs.push('methodpath')\r\n            path = apipath['designapi'] + \"/api/\" + productid + \"/\" + serviceid + \"/\" + apiid + \"/\" + versionid + \"/\" + resourceid + \"/addtestcase\"\r\n            ref = \"NewTestCase\"\r\n            formData['methodid'] = curMethod.methodid\r\n            if (curMethod.hasOwnProperty('url')) {\r\n                formData['methodpath'] = curMethod.url\r\n                formData['methodtype'] = curMethod.methodtype\r\n            }\r\n            else if (curMethod.methodpath !== \"\") {\r\n                formData['methodpath'] = curMethod.methodpath\r\n                formData['methodtype'] = curMethod.methodtype\r\n            }\r\n        }\r\n        if (formName !== \"Edit Path Parameter\") {\r\n            for (let i = 0; i < requireAttrs.length; i++) {\r\n                if (formData[requireAttrs[i]] === undefined || formData[requireAttrs[i]] === \"\" || formData[requireAttrs[i]] === []) {\r\n                    canSubmit = false\r\n                    setLoader(false)\r\n                    setMessage(\"Please fill the required details.\")\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            }\r\n            if (canSubmit) {\r\n                let apidata = {\r\n                    method: \"POST\",\r\n                    path: path,\r\n                    headers: {\r\n                        headers: true,\r\n                        apidomain: apidomain.vmurl\r\n                    },\r\n                    body: formData,\r\n                    ref: ref\r\n                }\r\n                manageAPIs(apidata)\r\n            }\r\n        }\r\n    }\r\n\r\n    const TestAPI = (testcaseid) => {\r\n        let tecsjson = tecsJSON\r\n        let api = tecsjson[testcaseid]['url'], method = tecsjson[testcaseid]['type'], body = tecsjson[testcaseid]['tecsIp']['body']['code'], headers = tecsjson[testcaseid]['tecsIp']['headers']['code']\r\n\r\n        if (headers === \"\") {\r\n            headers = {}\r\n        }\r\n        else {\r\n            headers = JSON.parse(tecsjson[testcaseid]['tecsIp']['headers']['code'])\r\n        }\r\n        if (body === \"\") {\r\n            body = {}\r\n        }\r\n        else {\r\n            body = JSON.parse(tecsjson[testcaseid]['tecsIp']['body']['code'])\r\n        }\r\n        if (method !== \"GET\" && method !== \"DELETE\") {\r\n            headers['Content-Type'] = \"application/json\"\r\n            // $.ajax({\r\n            //     type: method,\r\n            //     url: api,\r\n            //     datatype: \"json\",\r\n            //     data: JSON.stringify(body),\r\n            //     headers: Object.keys(headers).length > 0 ? headers : {},\r\n            //     success: function (result) {\r\n            //         if (typeof (result) === \"object\") {\r\n            //             let resp = JSON.stringify(result, null, 4)\r\n            //             resp = JSON.parse(resp)\r\n            //             resp = JSON.stringify(resp, null, '\\t')\r\n            //             tecsjson[testcaseid]['tecsOp']['response']['code'] = resp\r\n\r\n            //             let heads = JSON.stringify(headers, null, 4)\r\n            //             heads = JSON.parse(heads)\r\n            //             heads = JSON.stringify(heads, null, '\\t')\r\n            //             tecsjson[testcaseid]['tecsOp']['headers']['code'] = heads\r\n            //             tecsjson[testcaseid]['showoutput'] = true\r\n            //             tecsjson[testcaseid]['tecsOp']['tab'] = 0\r\n            //             setTecsJSON(tecsjson)\r\n            //             let tecs = [...tecsList]\r\n            //             setTecsList([])\r\n            //             setTecsList(tecs)\r\n            //             setLoader(false)\r\n            //         }\r\n            //         else {\r\n            //             tecsjson[testcaseid]['tecsOp']['response']['code'] = result\r\n            //         }\r\n            //     },\r\n            //     error: function (err) {\r\n            //         if (typeof (err) === \"object\") {\r\n            //             let resp = JSON.stringify(err, null, 4)\r\n            //             resp = JSON.parse(resp)\r\n            //             resp = JSON.stringify(resp, null, '\\t')\r\n            //             tecsjson[testcaseid]['tecsOp']['response']['code'] = resp\r\n\r\n            //             let heads = JSON.stringify(headers, null, 4)\r\n            //             heads = JSON.parse(heads)\r\n            //             heads = JSON.stringify(heads, null, '\\t')\r\n            //             tecsjson[testcaseid]['tecsOp']['headers']['code'] = heads\r\n\r\n            //             tecsjson[testcaseid]['tecsOp']['tab'] = 0\r\n            //             setTecsJSON(tecsjson)\r\n            //         }\r\n            //         else {\r\n            //             tecsjson[testcaseid]['tecsOp']['response']['code'] = err\r\n            //         }\r\n            //         tecsjson[testcaseid]['showoutput'] = true\r\n            //         let tecs = [...tecsList]\r\n            //         setTecsList([])\r\n            //         setTecsList(tecs)\r\n            //         setLoader(false)\r\n            //     }\r\n            // })\r\n            return fetch(api, { method: method, body: JSON.stringify(body), headers: Object.keys(headers).length > 0 ? headers : { 'Content-Type': \"application/json\" } })\r\n                .then(result => result.json())\r\n                .then(result => {\r\n                    if (typeof (result) === \"object\") {\r\n                        let resp = JSON.stringify(result, null, 4)\r\n                        resp = JSON.parse(resp)\r\n                        resp = JSON.stringify(resp, null, '\\t')\r\n                        tecsjson[testcaseid]['tecsOp']['response']['code'] = resp\r\n\r\n                        let heads = JSON.stringify(headers, null, 4)\r\n                        heads = JSON.parse(heads)\r\n                        heads = JSON.stringify(heads, null, '\\t')\r\n                        tecsjson[testcaseid]['tecsOp']['headers']['code'] = heads\r\n\r\n                        tecsjson[testcaseid]['tecsOp']['tab'] = 0\r\n                        tecsjson[testcaseid]['showoutput'] = true\r\n                        setTecsJSON(tecsjson)\r\n                        let tecs = [...tecsList]\r\n                        setTecsList([])\r\n                        setTecsList(tecs)\r\n                        setLoader(false)\r\n                    }\r\n                    else {\r\n                        tecsjson[testcaseid]['tecsOp']['response']['code'] = result\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    if (typeof (err) === \"object\") {\r\n                        let resp = JSON.stringify(err, null, 4)\r\n                        resp = JSON.parse(resp)\r\n                        resp = JSON.stringify(resp, null, '\\t')\r\n                        tecsjson[testcaseid]['tecsOp']['response']['code'] = resp\r\n\r\n                        let heads = JSON.stringify(headers, null, 4)\r\n                        heads = JSON.parse(heads)\r\n                        heads = JSON.stringify(heads, null, '\\t')\r\n                        tecsjson[testcaseid]['tecsOp']['headers']['code'] = heads\r\n\r\n                        tecsjson[testcaseid]['tecsOp']['tab'] = 0\r\n                    }\r\n                    else {\r\n                        tecsjson[testcaseid]['tecsOp']['response']['code'] = err\r\n                    }\r\n                    tecsjson[testcaseid]['showoutput'] = true\r\n                    setTecsJSON(tecsjson)\r\n                    let tecs = [...tecsList]\r\n                    setTecsList([])\r\n                    setTecsList(tecs)\r\n                    setLoader(false)\r\n                })\r\n        }\r\n        else {\r\n            $.ajax({\r\n                type: method,\r\n                url: api,\r\n                headers: Object.keys(headers).length > 0 ? headers : {},\r\n                success: function (result) {\r\n                    if (typeof (result) === \"object\") {\r\n                        let resp = JSON.stringify(result, null, 4)\r\n                        resp = JSON.parse(resp)\r\n                        resp = JSON.stringify(resp, null, '\\t')\r\n                        tecsjson[testcaseid]['tecsOp']['response']['code'] = resp\r\n\r\n                        let heads = JSON.stringify(headers, null, 4)\r\n                        heads = JSON.parse(heads)\r\n                        heads = JSON.stringify(heads, null, '\\t')\r\n                        tecsjson[testcaseid]['tecsOp']['headers']['code'] = heads\r\n\r\n                        tecsjson[testcaseid]['showoutput'] = true\r\n                        tecsjson[testcaseid]['tecsOp']['tab'] = 0\r\n                        setTecsJSON(tecsjson)\r\n                        let tecs = [...tecsList]\r\n                        setTecsList([])\r\n                        setTecsList(tecs)\r\n                        setLoader(false)\r\n                    }\r\n                    else {\r\n                        tecsjson[testcaseid]['tecsOp']['response']['code'] = result\r\n                    }\r\n                },\r\n                error: function (err) {\r\n                    if (typeof (err) === \"object\") {\r\n                        let resp = JSON.stringify(err, null, 4)\r\n                        resp = JSON.parse(resp)\r\n                        resp = JSON.stringify(resp, null, '\\t')\r\n                        tecsjson[testcaseid]['tecsOp']['response']['code'] = resp\r\n\r\n                        let heads = JSON.stringify(headers, null, 4)\r\n                        heads = JSON.parse(heads)\r\n                        heads = JSON.stringify(heads, null, '\\t')\r\n                        tecsjson[testcaseid]['tecsOp']['headers']['code'] = heads\r\n\r\n                        tecsjson[testcaseid]['tecsOp']['tab'] = 0\r\n                        setTecsJSON(tecsjson)\r\n                    }\r\n                    else {\r\n                        tecsjson[testcaseid]['tecsOp']['response']['code'] = err\r\n                    }\r\n                    let tecs = [...tecsList]\r\n                    setTecsList([])\r\n                    setTecsList(tecs)\r\n                    tecsjson[testcaseid]['showoutput'] = true\r\n                    setLoader(false)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    // const TestAPI = (testcaseid) => {\r\n    //     setLoader(true)\r\n    //     let apidata = {\r\n    //         path: \"/testcase/manage\",\r\n    //         method: \"POST\",\r\n    //         headers: true,\r\n    //         ref: \"TestAPI\",\r\n    //         body: {\r\n    //             action: \"test\",\r\n    //             serviceid: curServ.serviceid,\r\n    //             resourceid: resourceid,\r\n    //             testcaseid: testcaseid,\r\n    //             url: tecsJSON[testcaseid]['url'],\r\n    //         }\r\n    //     }\r\n    //     if (tecsJSON[testcaseid]['type'] === \"POST\" || tecsJSON[testcaseid]['type'] === \"PATCH\") {\r\n    //         let ipstr = tecsJSON[testcaseid]['tecsIp']['body']['code']\r\n    //         if (ipstr !== \"\") {\r\n    //             try {\r\n    //                 apidata['body']['input'] = JSON.parse(ipstr)\r\n    //             } catch (error) {\r\n    //                 setLoader(false)\r\n    //                 setMessage('Error in input format.')\r\n    //                 setSeverrity('error')\r\n    //                 setOpenAlert(true)\r\n    //             }\r\n    //         }\r\n    //         else {\r\n    //             apidata['body']['input'] = JSON.parse(ipstr)\r\n    //         }\r\n    //     }\r\n    //     manageAPIs(apidata)\r\n    // }\r\n\r\n    const TriggerAPITest = (testcaseid) => {\r\n        setLoader(true)\r\n        if (tecsJSON[testcaseid]['type'] !== \"GET\" && tecsJSON[testcaseid]['type'] !== \"DELETE\") {\r\n            let ipstr = tecsJSON[testcaseid]['tecsIp']['body']['code'], jsonip = ''\r\n            if (ipstr !== \"\") {\r\n                try {\r\n                    jsonip = JSON.parse(ipstr)\r\n                    TestAPI(testcaseid)\r\n                } catch (error) {\r\n                    setLoader(false)\r\n                    setMessage('Error in input format.')\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            }\r\n            else {\r\n                TestAPI(testcaseid)\r\n            }\r\n        }\r\n        else {\r\n            TestAPI(testcaseid)\r\n        }\r\n    }\r\n\r\n    const handleSidebarPopover = (method) => {\r\n        setCurMethod(method)\r\n        setShowMethods(false)\r\n    }\r\n\r\n    const PopulateMethods = () => {\r\n        return (\r\n            <Box display=\"flex\" style={{ width: '100%' }}>\r\n                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" style={{ width: '100%', border: '1px solid gray' }} position=\"relative\">\r\n                    <Box onClick={() => { setShowMethods(!showMethods) }} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" style={{ width: '100%', cursor: \"pointer\" }} p={1}>\r\n                        <Box mr={1} display=\"flex\" alignItems=\"center\">\r\n                            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\" title={curMethod.hasOwnProperty('url') === true ? curMethod.url : curMethod.methodpath}>\r\n                                <Box>\r\n                                    <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>{curMethod.methodtype}</Typography>\r\n                                </Box>\r\n                                {\r\n                                    curMethod.hasOwnProperty('url') === true ?\r\n                                        <Box>\r\n                                            <Typography color=\"inherit\" className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>{curMethod.url}</Typography>\r\n                                        </Box>\r\n                                        :\r\n                                        <Box>\r\n                                            <Typography color=\"inherit\" className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>{curMethod.methodpath}</Typography>\r\n                                        </Box>\r\n                                }\r\n                            </Box>\r\n                        </Box>\r\n                        <Box display=\"flex\">\r\n                            {\r\n                                showMethods === true ?\r\n                                    <ArrowDropUpIcon fontSize=\"small\" />\r\n                                    :\r\n                                    <ArrowDropDownIcon fontSize=\"small\" />\r\n                            }\r\n                        </Box>\r\n                    </Box>\r\n                    {\r\n                        showMethods === true ?\r\n                            <Box height={250} style={{ width: '100%', borderTop: '1px solid gray' }}>\r\n                                <Box position=\"relative\" style={{ height: '100%' }}>\r\n                                    <Box overflow=\"auto\" height={210}>\r\n                                        {\r\n                                            methods.length > 0 ?\r\n                                                methods.map((met, index) => {\r\n                                                    return (\r\n                                                        <Box key={index} display=\"flex\" alignItems=\"center\" borderBottom={1} style={{ borderColor: 'lightgray' }} justifyContent=\"space-between\" p={1} bgcolor={curMethod.methodid === met.methodid ? \"#e6e8f3\" : \"\"} className={`${sideBarClasses.root} ${sideBarClasses.onhoveritem}`} onClick={() => {\r\n                                                            handleSidebarPopover(met)\r\n                                                        }} title={met.hasOwnProperty('url') === true ? met.url : met.methodpath}>\r\n                                                            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n                                                                <Typography className={`${typographyClasses.bold} ${typographyClasses.smallText}`} color={curMethod.methodid === met.methodid ? \"primary\" : \"inherit\"}>{met.methodtype}</Typography>\r\n                                                                <Typography className={typographyClasses.smallText} color={curMethod.methodid === met.methodid ? \"primary\" : \"inherit\"}>{met.hasOwnProperty('url') === true ? met.url : met.methodpath}</Typography>\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                    )\r\n                                                })\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </Box>\r\n                                </Box>\r\n                            </Box>\r\n                            :\r\n                            null\r\n                    }\r\n                </Box>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    const UpdatePathParams = (event) => {\r\n        let updpr = updPathParams\r\n        updpr['updatevalue'] = event.target.value\r\n        setUpdPathParams(updpr)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                loader === true ?\r\n                    <Loader type=\"page\" open={true} />\r\n                    :\r\n                    null\r\n            }\r\n            <Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n            <Box style={{ width: '100%' }} p={1}>\r\n                <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={1}>\r\n                    <Box display=\"flex\">\r\n                        <Typography className={`${typographyClasses.text} ${typographyClasses.bold}`}>Test Cases</Typography>\r\n                    </Box>\r\n                    <Box display=\"flex\" alignItems=\"center\">\r\n                        <Box mr={1}>\r\n                            <Button\r\n                                variant=\"text\"\r\n                                color=\"primary\"\r\n                                onClick={handleActions.bind(this, { \"Action\": \"refresh\" })}\r\n                            >\r\n                                <RefreshIcon className={typographyClasses.text} />\r\n                            </Button>\r\n                        </Box>\r\n                        <Box>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className=\"trigger-btn\"\r\n                                onClick={() => {\r\n                                    setFormName('Add Test Case')\r\n                                    setFormDialog(true)\r\n                                }}\r\n                            >\r\n                                Create Testcase\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TestCasesList />\r\n            </Box>\r\n            <Dialog\r\n                open={formDialog}\r\n                onClose={() => setFormDialog(false)}\r\n                aria-labelledby=\"acc-dialog-title\"\r\n                fullWidth={true}\r\n                maxWidth=\"sm\"\r\n            >\r\n                <DialogTitle id=\"acc-dialog-title\" style={{ borderBottom: '1px solid lightgrey' }}>{formName}</DialogTitle>\r\n                <DialogContent>\r\n                    <Box style={{ width: '100%' }}>\r\n                        <form autoComplete=\"off\">\r\n                            {\r\n                                formName === \"Add Test Case\" ?\r\n                                    <Box>\r\n                                        <Box mb={1}>\r\n                                            <FormControl fullWidth>\r\n                                                <label htmlFor=\"Testcase\" required>Name</label>\r\n                                                <TextField\r\n                                                    id=\"Testcase\"\r\n                                                    required\r\n                                                    fullWidth\r\n                                                    placeholder=\"Enter Testcase Name\"\r\n                                                    onChange={handleFormDataChage.bind(this, \"testcasename\")}\r\n                                                    variant=\"outlined\"\r\n                                                >\r\n                                                </TextField>\r\n                                            </FormControl>\r\n                                        </Box>\r\n                                        <Box mb={1}>\r\n                                            <FormControl fullWidth>\r\n                                                <label htmlFor=\"methodpath\" required>Method</label>\r\n                                                <PopulateMethods />\r\n                                            </FormControl>\r\n                                        </Box>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            {\r\n                                formName === \"Edit URL\" && Object.keys(curApiUrl).length > 0 ?\r\n                                    <Box>\r\n                                        <Box mb={1}>\r\n                                            <FormControl fullWidth>\r\n                                                <label htmlFor=\"APIURL\" required>API</label>\r\n                                                <TextField\r\n                                                    id=\"APIURL\"\r\n                                                    required\r\n                                                    fullWidth\r\n                                                    onChange={handleChangeUrl.bind(this, curApiUrl['testcaseid'])}\r\n                                                    defaultValue={curApiUrl.url}\r\n                                                    variant=\"outlined\"\r\n                                                    helperText=\"Replace the parameter inside <> with actual values and remove the '<>' while testing \"\r\n                                                >\r\n                                                </TextField>\r\n                                            </FormControl>\r\n                                        </Box>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            {\r\n                                formName === \"Edit Path Parameter\" && Object.keys(updPathParams).length > 0 ?\r\n                                    <Box>\r\n                                        <Box mb={1}>\r\n                                            <FormControl fullWidth>\r\n                                                <label htmlFor=\"updPathParams\" required>{updPathParams['updatekey']}</label>\r\n                                                <TextField\r\n                                                    id=\"updPathParams\"\r\n                                                    required\r\n                                                    fullWidth\r\n                                                    onChange={UpdatePathParams.bind(this)}\r\n                                                    defaultValue={updPathParams['updatevalue']}\r\n                                                    variant=\"outlined\"\r\n                                                >\r\n                                                </TextField>\r\n                                            </FormControl>\r\n                                        </Box>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </form>\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => {\r\n                        setFormDialog(false)\r\n                        if (formName === \"Edit Path Parameter\") {\r\n                            let updpr = updPathParams\r\n                            let tecsjson = tecsJSON\r\n                            let url = tecsjson[updpr['testcaseid']]['actualurl']\r\n                            tecsjson[updpr['testcaseid']]['url'] = url\r\n\r\n                            setTecsJSON(tecsjson)\r\n\r\n                            let tecslist = [...tecsList]\r\n                            setTecsList([])\r\n                            setTecsList(tecslist)\r\n                        }\r\n                    }}\r\n                        color=\"secondary\" variant=\"contained\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => {\r\n                        if (formName !== \"Edit URL\" && formName !== \"Edit Path Parameter\") {\r\n                            FormDialogSubmit()\r\n                        }\r\n                        else {\r\n                            if (formName === \"Edit Path Parameter\") {\r\n                                let updpr = updPathParams\r\n                                let tecsjson = tecsJSON\r\n                                tecsjson[updpr['testcaseid']]['tecsIp']['pathparameters']['values'][updpr['updatekey']] = updpr['updatevalue']\r\n\r\n                                let url = tecsjson[updpr['testcaseid']]['actualurl']\r\n                                let key = \"<\" + updpr['updatekey'] + \">\"\r\n                                url = url.split(key).join(updpr['updatevalue'])\r\n                                tecsjson[updpr['testcaseid']]['url'] = url\r\n\r\n                                setTecsJSON(tecsjson)\r\n\r\n                                let tecslist = [...tecsList]\r\n                                setTecsList([])\r\n                                setTecsList(tecslist)\r\n                            }\r\n                            setFormDialog(false)\r\n                        }\r\n                    }} color=\"primary\" variant=\"contained\" className=\"api-btn\">\r\n                        Add\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            {\r\n                confirmation !== '' ?\r\n                    <Confirm confirmText={confirmation} clickHandler={handleConfirmation} />\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TestCases;\r\n\r\n","import React, { useEffect, useState } from 'react'\r\n\r\n// Material UI\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Dialogactions from '@material-ui/core/Dialogactions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport MuiAccordion from '@material-ui/core/Accordion';\r\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport MuiAccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\n// Material Icons\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n// import SettingsIcon from '@material-ui/icons/Settings';\r\n// import MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\n// Custom Components\r\nimport Loader from '../../Components/Loader';\r\nimport Alert from '../../Components/Alert';\r\nimport Confirm from '../../Components/Confirm';\r\nimport HandleApi from '../../Utils/HandleApi';\r\nimport apipath from '../../Utils/Apipath';\r\nimport apidomain from '../../Utils/ApiDomain';\r\n\r\n//Ace Editor\r\nimport AceEditor from 'react-ace'\r\nimport \"ace-builds/src-noconflict/mode-python\";\r\nimport \"ace-builds/src-noconflict/theme-dreamweaver\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\nimport \"ace-builds/src-noconflict/theme-clouds\";\r\nimport \"ace-builds/src-noconflict/theme-eclipse\";\r\nimport \"ace-builds/src-noconflict/ext-language_tools\";\r\nimport \"ace-builds/src-noconflict/snippets/python\"\r\nimport \"ace-builds/src-noconflict/keybinding-vim\"\r\nimport \"ace-builds/src-noconflict/keybinding-vscode\"\r\n\r\n// Custom Styles\r\nimport TypographyStyles from '../../assets/styles/TypographySyles';\r\nimport StatusStyles from '../../assets/styles/StatusStyles';\r\n\r\nimport { JSONToHTMLTable } from '@kevincobain2000/json-to-html-table'\r\n\r\n\r\nconst sidebarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        cursor: 'pointer'\r\n    },\r\n    onhoveritem: {\r\n        '&:hover': {\r\n            backgroundColor: '#e6e8f3'\r\n        }\r\n    }\r\n}));\r\n\r\nconst Accordion = withStyles({\r\n    root: {\r\n        // border: '1px solid rgba(0, 0, 0, .125)',\r\n        boxShadow: 'none',\r\n        '&:not(:last-child)': {\r\n            borderBottom: 0,\r\n        },\r\n        '&:before': {\r\n            display: 'none',\r\n        },\r\n        '&$expanded': {\r\n            margin: 'auto',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordion);\r\n\r\nconst AccordionSummary = withStyles({\r\n    root: {\r\n        backgroundColor: 'white',\r\n        borderBottom: '1px solid rgba(0, 0, 0, .125)',\r\n        marginBottom: 0,\r\n        minHeight: 56,\r\n        '&$expanded': {\r\n            minHeight: 56,\r\n            // border:'1px solid rgba(0, 0, 0, .125)'\r\n        },\r\n    },\r\n    // expandIcon: {\r\n    //     '&$expanded': {\r\n    //         transform: 'rotate(90deg)'\r\n    //     }\r\n    // },\r\n    content: {\r\n        margin: 0,\r\n        '&$expanded': {\r\n            margin: '0',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordionSummary);\r\n\r\nconst AccordionDetails = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiAccordionDetails);\r\n\r\n\r\nfunction expansionProps(name, index) {\r\n    return {\r\n        id: `${name}${index}-header`,\r\n        'aria-controls': `${name}${index}-content`,\r\n    };\r\n}\r\n\r\n\r\nconst NewEditor = ({ ...props }) => {\r\n    const { methodid, btnAction, serviceid, productid, apiid, versionid, resourceid, versionname, datasource } = props\r\n\r\n    const [loader, setLoader] = useState(false)\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [severity, setSeverrity] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [loadTimeout, setLoadTimeout] = useState(false)\r\n    const [confirmation, setConfirmation] = useState('')\r\n    const [confApiData, setConfApiData] = useState({})\r\n    const [showFiles, setShowFiles] = useState(false)\r\n    const [showSnippets, setShowSnippets] = useState(false)\r\n    const [methodJson, setMethodJson] = useState(props.methodJson)\r\n    const [snippetList, setSnippetList] = useState(props.methodJson.snippets.snippetorder)\r\n    const [snippetJson, setSnippetJson] = useState(props.methodJson.snippets)\r\n    const [preSnippets, setPreSnippets] = useState([])\r\n    const [dialog, setDialog] = useState(false)\r\n    const [dialogContent, setDialogContent] = useState('')\r\n    const [formData, setFormData] = useState({})\r\n    const [activeBlk, setActiveBlk] = useState('full_code')\r\n    const [activeData, setActiveData] = useState({})\r\n    const [activeReqList, setActiveReqList] = useState([])\r\n    const [editorProps, setEditorProps] = useState({})\r\n    const [reqList, setReqList] = useState([{ \"modulename\": \"\" }]);\r\n\r\n    let code_list = [\"import_code\", \"data_code\", \"function_code\", \"function_call\"]\r\n    let code_map = {\r\n        \"import_code\": \"Imports\",\r\n        \"data_code\": \"Data Source\",\r\n        \"function_code\": \"Functions\",\r\n        \"function_call\": \"Main\"\r\n    }\r\n\r\n    const typographyClasses = TypographyStyles()\r\n    const sidebarClasses = sidebarStyles()\r\n\r\n    useEffect(() => {\r\n        let apidata = {\r\n            method: \"GET\",\r\n            path: apipath['designapi'] + \"/api/\" + productid + \"/\" + serviceid + \"/\" + apiid + \"/\" + versionid + \"/\" + resourceid + \"/\" + methodid + \"/fullcode\",\r\n            headers: {\r\n                headers: true,\r\n                apidomain: apidomain.vmurl\r\n            },\r\n            ref: \"GetFullCode\",\r\n            body: {}\r\n        }\r\n        manageAPIs(apidata)\r\n\r\n        let nextapi = {\r\n            method: \"POST\",\r\n            headers: {\r\n                headers: true,\r\n                apidomain: apidomain.vmurl\r\n            },\r\n            ref: \"GetSnippets\",\r\n            body: {\r\n                servicetype: methodJson['servicetype'],\r\n                dbtype: methodJson['dbtype'],\r\n                keys: methodJson['keys'],\r\n                methodtype: methodJson['methodtype']\r\n            },\r\n            path: apipath['designapi'] + \"/api/getallsnippet\"\r\n        }\r\n        manageAPIs(nextapi)\r\n    }, [])\r\n\r\n    const manageAPIs = (apidata) => {\r\n        HandleApi.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n            .then(result => {\r\n                if (result.hasOwnProperty('message') && result.message !== \"\") {\r\n                    setMessage(result.message)\r\n                    setSeverrity('info')\r\n                    setOpenAlert(true)\r\n                }\r\n                if (result.hasOwnProperty('statusCode') && result.statusCode === 200) {\r\n                    if (apidata.ref === \"GetSnippets\") {\r\n                        setPreSnippets(result.body)\r\n                    }\r\n                    else if (apidata.ref === \"NewSnippet\") {\r\n                        setDialogContent('')\r\n                        setFormData({})\r\n                        setDialog(false)\r\n                        setLoader(false)\r\n                        setActiveData({})\r\n                        setMethodJson(result.body)\r\n                        setSnippetJson(result.body.snippets)\r\n                        setActiveData(result.body.snippets[result.snippetid])\r\n                        setActiveBlk('snippet')\r\n                        setShowFiles(true)\r\n                        setSnippetList(result.body.snippets.snippetorder)\r\n                    }\r\n                    else if (apidata.ref === \"UpdateCode\") {\r\n                        setLoader(false)\r\n                        setActiveData({})\r\n                        setActiveData(result.body)\r\n                        let snpjson = snippetJson\r\n                        snpjson[result.body.snippetid] = result.body\r\n                        setSnippetJson(snpjson)\r\n                        setActiveReqList(result.body.requirements)\r\n                        let snlist = [...snippetList]\r\n                        setSnippetList([])\r\n                        setSnippetList(snlist)\r\n                        if (dialogContent === \"Add Module\") {\r\n                            setReqList([{ \"modulename\": \"\" }])\r\n                            setDialogContent('')\r\n                            setDialog(false)\r\n                        }\r\n                    }\r\n                    else if (apidata.ref === \"GetFullCode\") {\r\n                        setActiveData({ \"code\": result.body })\r\n                        setLoadTimeout(true)\r\n                    }\r\n                    else if (apidata.ref === \"DeleteSnippet\") {\r\n                        setLoader(false)\r\n                        setMethodJson(result.body)\r\n                        setSnippetJson(result.body.snippets)\r\n                        setSnippetList(result.body.snippets.snippetorder)\r\n                        if (activeBlk === \"full_code\") {\r\n                            setLoadTimeout(false)\r\n                            setActiveData({})\r\n                            let apidata = {\r\n                                method: \"GET\",\r\n                                path: apipath['designapi'] + \"/api/\" + productid + \"/\" + serviceid + \"/\" + apiid + \"/\" + versionid + \"/\" + resourceid + \"/\" + methodid + \"/fullcode\",\r\n                                headers: {\r\n                                    headers: true,\r\n                                    apidomain: apidomain.vmurl\r\n                                },\r\n                                ref: \"GetFullCode\",\r\n                                body: {}\r\n                            }\r\n                            manageAPIs(apidata)\r\n                        }\r\n                    }\r\n                    else if (apidata.ref === \"GetSpecificTable\") {\r\n                        let apidata1 = {\r\n                            path: apipath['designapi'] + \"/api/\" + productid + \"/\" + serviceid + \"/\" + apiid + \"/\" + versionid + \"/\" + resourceid + \"/\" + methodJson.methodid + \"/addsnippet\",\r\n                            ref: \"NewSnippet\",\r\n                            method: \"POST\",\r\n                            body: {\r\n                                versionname: versionname,\r\n                                table: result.body\r\n                            },\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                        }\r\n                        if (apidata['key'] === \"custom\") {\r\n                            apidata1['body'] = {\r\n                                \"snippetname\": apidata['ipdata']['snippetname'],\r\n                                \"versionname\": versionname,\r\n                                \"functionname\": apidata['ipdata']['functionname'],\r\n                                \"table\": result.body\r\n                            }\r\n                        }\r\n                        else if (apidata['key'] === \"predefined\") {\r\n                            apidata1['body']['snippet'] = apidata['snippet']\r\n                        }\r\n                        manageAPIs(apidata1)\r\n                    }\r\n                }\r\n                else {\r\n                    setMessage(result.errorMessage)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                    setLoader(false)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                setMessage(err)\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n                setLoader(false)\r\n            })\r\n    }\r\n\r\n    const handleConfirmation = (key) => {\r\n        setConfirmation('')\r\n        if (key) {\r\n            handleActions(confApiData)\r\n            // console.log(confApiData)\r\n            setConfApiData({})\r\n        }\r\n        else {\r\n            setConfApiData({})\r\n        }\r\n    }\r\n\r\n    const handleActions = (apidata) => {\r\n        if (apidata.Action === 'redirect') {\r\n            window.open(apidata.url, '_blank')\r\n        }\r\n        else if (apidata.Action === 'refresh') {\r\n\r\n        }\r\n        else if (apidata.Action === \"confirmation\") {\r\n            setConfApiData(apidata['apidata'])\r\n            setConfirmation(apidata.confirmText)\r\n        }\r\n        else {\r\n            // setLoader(true)\r\n            if (apidata.method === \"DELETE\") {\r\n                setLoader(true)\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n    }\r\n\r\n    const handleAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n\r\n    const handleAddSnippet = (key, snip) => {\r\n        if (key === \"custom\") {\r\n            setDialogContent('Add Snippet')\r\n            setDialog(true)\r\n        }\r\n        else if (key === \"predefined\") {\r\n            let apidata = {\r\n                path: apipath['designapi'] + \"/table/\" + serviceid + \"/\" + datasource.db.dbid + \"/\" + datasource.db.tableid,\r\n                ref: \"GetSpecificTable\",\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                body: {},\r\n                method: \"GET\",\r\n                snippet: snip,\r\n                key: \"predefined\"\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n    }\r\n\r\n    const ProcessSideBar = ({ order, data }) => {\r\n        return (\r\n            <Box>\r\n                {\r\n                    order.map((ord, index) => {\r\n                        return (\r\n                            <Box key={index}>\r\n                                {\r\n                                    data[ord.snippetid].hasOwnProperty('order') === true ?\r\n                                        <Box>\r\n                                            <Box display=\"flex\" p={1}>\r\n                                                <Typography className={`${typographyClasses.bold} ${typographyClasses.text}`}>{ord}</Typography>\r\n                                            </Box>\r\n                                            <Box ml={2}>\r\n                                                <ProcessSideBar order={data[ord.snippetid]['order']} data={data[ord.snippetid]} />\r\n                                            </Box>\r\n                                        </Box>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                {\r\n                                    data[ord.snippetid].hasOwnProperty('order') === false ?\r\n                                        <Box className={`${sidebarClasses.root} ${sidebarClasses.onhoveritem}`} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" p={1} style={{ cursor: 'pointer' }} bgcolor={activeBlk === \"snippet\" ? activeData['snippetid'] === ord.snippetid ? \"#e6e8f3\" : \"\" : \"\"} onClick={() => {\r\n                                            setActiveBlk('snippet')\r\n                                            setActiveData({})\r\n                                            handleFuncClick(\"snippet\", data[ord.snippetid])\r\n                                        }}>\r\n                                            <Box display=\"flex\" mr={2}>\r\n                                                <Typography className={typographyClasses.smallText} align=\"left\" color={activeBlk === \"snippet\" ? activeData['snippetid'] === ord.snippetid ? \"primary\" : \"inherit\" : \"inherit\"}>{ord['name']}</Typography>\r\n                                            </Box>\r\n                                            <Box display=\"flex\"\r\n                                                onClick={(event) => {\r\n                                                    event.stopPropagation()\r\n                                                    handleActions({\r\n                                                        Action: \"confirmation\",\r\n                                                        confirmText: \"Are you sure you want to delete this snippet(\" + ord['name'] + \")?\",\r\n                                                        apidata: {\r\n                                                            method: \"DELETE\",\r\n                                                            path: apipath['designapi'] + \"/api/\" + productid + \"/\" + serviceid + \"/\" + apiid + \"/\" + versionid + \"/\" + resourceid + \"/\" + methodid + \"/snippet/\" + ord.snippetid,\r\n                                                            headers: {\r\n                                                                headers: true,\r\n                                                                apidomain: apidomain.vmurl\r\n                                                            },\r\n                                                            body: {},\r\n                                                            ref: \"DeleteSnippet\"\r\n                                                        }\r\n                                                    })\r\n                                                }}\r\n                                            >\r\n                                                <DeleteIcon className={typographyClasses.text} color=\"secondary\" />\r\n                                            </Box>\r\n                                        </Box>\r\n                                        :\r\n                                        null\r\n                                }\r\n                            </Box>\r\n                        )\r\n                    })\r\n                }\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    // const ProcessEditor = ({ ...props }) => {\r\n    //     const { order, data } = props\r\n    //     return (\r\n    //         <Box>\r\n    //             <Box>\r\n    //                 {\r\n    //                     order.map((ord, index) => {\r\n    //                         return (\r\n    //                             <Box key={index}>\r\n    //                                 {\r\n    //                                     data[ord].hasOwnProperty('order') === true ?\r\n    //                                         <Box>\r\n    //                                             <ProcessEditor order={data[ord]['order']} data={data[ord]} />\r\n    //                                         </Box>\r\n    //                                         :\r\n    //                                         null\r\n    //                                 }\r\n    //                                 {\r\n    //                                     data[ord].hasOwnProperty('order') === false && data[ord]['defaultview'] === true ?\r\n    //                                         <Box display=\"flex\" style={{ width: '100%' }}>\r\n    //                                             <AceEditor\r\n    //                                                 style={{ height: '100%', width: '100%' }}\r\n    //                                                 mode=\"python\"\r\n    //                                                 theme=\"monokai\"\r\n    //                                                 // onChange={onChange}\r\n    //                                                 name=\"UNIQUE_ID_OF_DIV\"\r\n    //                                                 setOptions={{\r\n    //                                                     fontSize: 14,\r\n    //                                                     // readOnly:true\r\n    //                                                     enableBasicAutocompletion: true,\r\n    //                                                     enableLiveAutocompletion: true,\r\n    //                                                     useSoftTabs: true,\r\n    //                                                     tabSize: 4,\r\n    //                                                     showPrintMargin: false,\r\n    //                                                     wrap: true,\r\n    //                                                     maxLines: Infinity,\r\n    //                                                     dragEnabled: false\r\n    //                                                 }}\r\n    //                                                 editorProps={{ $blockScrolling: true }}\r\n    //                                                 defaultValue={data[ord]['code']}\r\n    //                                                 commands={[\r\n    //                                                     {\r\n    //                                                         name: 'save',\r\n    //                                                         bindKey: { win: \"Ctrl-S\", \"mac\": \"Cmd-S\" },\r\n    //                                                         exec: function (editor) {\r\n    //                                                             console.log(\"saving\", editor.session.getValue())\r\n    //                                                         }\r\n    //                                                     }\r\n    //                                                 ]}\r\n    //                                             />\r\n    //                                         </Box>\r\n    //                                         :\r\n    //                                         null\r\n    //                                 }\r\n    //                             </Box>\r\n    //                         )\r\n    //                     })\r\n    //                 }\r\n    //             </Box>\r\n    //         </Box>\r\n    //     )\r\n    // }\r\n\r\n    const handleFuncClick = (key, item) => {\r\n        if (key === \"full_code\") {\r\n            setLoadTimeout(false)\r\n            setActiveBlk('full_code')\r\n            setActiveData({})\r\n            let apidata = {\r\n                method: \"GET\",\r\n                path: apipath['designapi'] + \"/api/\" + productid + \"/\" + serviceid + \"/\" + apiid + \"/\" + versionid + \"/\" + resourceid + \"/\" + methodid + \"/fullcode\",\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                ref: \"GetFullCode\",\r\n                body: {}\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n        else if (key === \"snippet\") {\r\n            setActiveReqList(item.requirements)\r\n            setActiveData(item)\r\n        }\r\n    }\r\n\r\n    const onChangeCode = (code_key, event) => {\r\n        let editprops = editorProps\r\n        editprops[code_key]['code'] = event.split(\"'\").join('\"')\r\n        setEditorProps(editprops)\r\n    }\r\n\r\n    const handleEditcode = (code_key) => {\r\n        let editprops = editorProps\r\n        editprops[code_key]['readOnly'] = false\r\n        setEditorProps(editprops)\r\n        let snlist = [...snippetList]\r\n        setSnippetList([])\r\n        setSnippetList(snlist)\r\n    }\r\n\r\n    const saveCode = (code_key) => {\r\n        let editprops = editorProps\r\n        editprops[code_key]['readOnly'] = true\r\n        setEditorProps(editprops)\r\n        let ips = { \"dummy\": \"a\" }\r\n        ips[code_key] = editprops[code_key]['code']\r\n        ips['snippetid'] = activeData['snippetid']\r\n        ips['version'] = activeData['version']\r\n        delete ips['dummy']\r\n        let apidata = {\r\n            method: \"PATCH\",\r\n            path: apipath['designapi'] + \"/api/\" + productid + \"/\" + serviceid + \"/\" + apiid + \"/\" + versionid + \"/\" + resourceid + \"/\" + methodJson.methodid,\r\n            headers: {\r\n                headers: true,\r\n                apidomain: apidomain.vmurl\r\n            },\r\n            ref: \"UpdateCode\",\r\n            body: ips\r\n        }\r\n        manageAPIs(apidata)\r\n    }\r\n\r\n    const EditorActions = ({ code_key }) => {\r\n        return (\r\n            <Box display=\"flex\" justifyContent=\"space-between\" color=\"gray\">\r\n                <Box p={1} style={{ width: '100%', height: '100%', cursor: 'pointer' }} display=\"flex\" justifyContent=\"center\" alignItems=\"flex-start\" onClick={() => {\r\n                    if (editorProps[code_key]['readOnly']) {\r\n                        handleEditcode(code_key)\r\n                    }\r\n                    else {\r\n                        saveCode(code_key)\r\n                    }\r\n                }}>\r\n                    {\r\n                        editorProps[code_key]['readOnly'] === true ?\r\n                            <EditIcon color='primary' className={typographyClasses.h5} />\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        editorProps[code_key]['readOnly'] === false ?\r\n                            <SaveIcon color='primary' className={typographyClasses.h5} />\r\n                            :\r\n                            null\r\n                    }\r\n                </Box>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    const handleFormDataChage = (field, event) => {\r\n        let formFields = formData;\r\n        formFields[field] = event.target.value;\r\n        setFormData(formFields);\r\n    }\r\n\r\n    const FormDialogSubmit = () => {\r\n        setLoader(true)\r\n        let canSubmit = true, requireAttrs = [], path = '', ref = '', method = \"\", body = {}\r\n        if (dialogContent === \"Add Module\") {\r\n            let reqlist = []\r\n            for (let i = 0; i < reqList.length; i++) {\r\n                reqlist.push(reqList[i]['modulename'])\r\n            }\r\n            reqlist = activeData['requirements'].concat(reqlist)\r\n            let apidata = {\r\n                method: \"PATCH\",\r\n                path: apipath['designapi'] + \"/api/\" + productid + \"/\" + serviceid + \"/\" + apiid + \"/\" + versionid + \"/\" + resourceid + \"/\" + methodJson.methodid,\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                body: {\r\n                    \"requirements\": reqlist,\r\n                    \"snippetid\": activeData['snippetid'],\r\n                    \"version\": activeData['version']\r\n                },\r\n                ref: \"UpdateCode\"\r\n            }\r\n            manageAPIs(apidata)\r\n            // let activedata = activeData\r\n            // activedata['requirements'] = reqlist\r\n            // setActiveData({})\r\n            // setActiveData(activedata)\r\n        }\r\n        if (dialogContent !== \"Add Module\") {\r\n            if (dialogContent === \"Add Snippet\") {\r\n                requireAttrs.push('snippetname')\r\n                requireAttrs.push('functionname')\r\n                path = apipath['designapi'] + \"/table/\" + serviceid + \"/\" + datasource.db.dbid + \"/\" + datasource.db.tableid\r\n                ref = \"GetSpecificTable\"\r\n                method = \"GET\"\r\n                body = formData\r\n            }\r\n            for (let i = 0; i < requireAttrs.length; i++) {\r\n                if (formData[requireAttrs[i]] === undefined || formData[requireAttrs[i]] === \"\" || formData[requireAttrs[i]] === []) {\r\n                    canSubmit = false\r\n                    setLoader(false)\r\n                    setMessage(\"Please fill the required details.\")\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            }\r\n            if (canSubmit) {\r\n                if (dialogContent === \"Add Snippet\") {\r\n                    let apidata = {\r\n                        method: method,\r\n                        path: path,\r\n                        headers: {\r\n                            headers: true,\r\n                            apidomain: apidomain.vmurl\r\n                        },\r\n                        \"body\": {},\r\n                        ref: ref,\r\n                        key: \"custom\",\r\n                        ipdata: body\r\n                    }\r\n                    manageAPIs(apidata)\r\n                }\r\n                else {\r\n                    let apidata = {\r\n                        method: method,\r\n                        path: path,\r\n                        headers: {\r\n                            headers: true,\r\n                            apidomain: apidomain.vmurl\r\n                        },\r\n                        body: formData,\r\n                        ref: ref\r\n                    }\r\n                    manageAPIs(apidata)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleReqDelete = (data) => {\r\n        let reqlist = [...activeReqList]\r\n        let index = reqlist.indexOf(data)\r\n        reqlist.splice(index, 1)\r\n\r\n        handleActions({\r\n            Action: \"confirmation\",\r\n            confirmText: \"Are you sure you want to delete this module?\",\r\n            apidata: {\r\n                method: \"PATCH\",\r\n                path: apipath['designapi'] + \"/api/\" + productid + \"/\" + serviceid + \"/\" + apiid + \"/\" + versionid + \"/\" + resourceid + \"/\" + methodJson.methodid,\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                body: {\r\n                    \"requirements\": reqlist,\r\n                    \"snippetid\": activeData['snippetid'],\r\n                    \"version\": activeData['version']\r\n                },\r\n                ref: \"UpdateCode\",\r\n                key: \"redelete\"\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleAddAttr = () => {\r\n        setReqList([...reqList, { \"modulename\": \"\" }]);\r\n    };\r\n\r\n    const handleRemAttr = index => {\r\n        let list = [...reqList];\r\n        list.splice(index, 1);\r\n        setReqList(list);\r\n    };\r\n\r\n    const handleAttrInputChange = (e, index) => {\r\n        const { name, value } = e.target;\r\n        let list = [...reqList];\r\n        list[index][name] = value;\r\n        setReqList(list);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                loader === true ?\r\n                    <Loader type=\"page\" open={true} />\r\n                    :\r\n                    null\r\n            }\r\n            <Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n            <Box pl={1} pr={1}>\r\n                <Box border={1} style={{ borderColor: 'lightgray' }}>\r\n                    <Box display=\"flex\" alignItems=\"center\">\r\n                        {\r\n                            showFiles === false ?\r\n                                <Box style={{ height: 'calc(100vh - 34px)', borderColor: 'lightgray' }} bgcolor=\"#FAFBFC\" width={40} borderRight={1}>\r\n                                    <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%', cursor: 'pointer' }} onClick={() => setShowFiles(true)} p={1} pl={0} pr={0} justifyContent=\"center\">\r\n                                        <MenuIcon className={`${typographyClasses.h5}`} />\r\n                                    </Box>\r\n                                </Box>\r\n                                :\r\n                                null\r\n                        }\r\n                        <Grid container>\r\n                            {\r\n                                showFiles === true ?\r\n                                    <Grid item xs={2}>\r\n                                        <Box style={{ height: 'calc(100vh - 34px)', borderColor: 'lightgray' }} bgcolor=\"#fafafa\" borderRight={1}>\r\n                                            <Box>\r\n                                                <Box p={1} borderBottom={1} style={{ borderColor: 'lightgray' }} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                                                    <Box display=\"flex\">\r\n                                                        <Typography className={`${typographyClasses.bold} ${typographyClasses.smallText}`}>{methodid}.py</Typography>\r\n                                                    </Box>\r\n                                                    <Box display='flex' style={{ cursor: 'pointer' }} onClick={(e) => {\r\n                                                        e.stopPropagation()\r\n                                                        setShowFiles(false)\r\n                                                    }}>\r\n                                                        <Clear className={`${typographyClasses.h5}`} />\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                <Box style={{ height: 'calc(100vh - 81px)' }} overflow=\"auto\">\r\n                                                    <Box style={{ height: '100%' }}>\r\n                                                        <Box className={`${sidebarClasses.root} ${sidebarClasses.onhoveritem}`} display=\"flex\" bgcolor={activeBlk === \"full_code\" ? \"#e6e8f3\" : \"\"} p={1} style={{ cursor: 'pointer' }} onClick={() => {\r\n                                                            handleFuncClick(\"full_code\")\r\n                                                        }}>\r\n                                                            <Typography className={activeBlk === \"full_code\" ? \"primary\" : \"inherit\"}>Full Code</Typography>\r\n                                                        </Box>\r\n                                                        <Box display=\"flex\" p={1}>\r\n                                                            <Typography className={`${typographyClasses.bold}`}>Functions</Typography>\r\n                                                        </Box>\r\n                                                        <Box>\r\n                                                            {\r\n                                                                methodJson.hasOwnProperty('snippets') === true && methodJson.snippets.hasOwnProperty('snippetorder') === true ?\r\n                                                                    <ProcessSideBar order={methodJson['snippets']['snippetorder']} data={methodJson['snippets']} />\r\n                                                                    :\r\n                                                                    null\r\n                                                            }\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            </Box>\r\n                                        </Box>\r\n                                    </Grid>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            <Grid item xs={showFiles === false ? showSnippets === false ? 12 : 10 : showSnippets === false ? 10 : 8}>\r\n                                <Box style={{ height: 'calc(100vh - 34px)', borderColor: 'lightgray' }} borderRight={1} overflow=\"hidden\">\r\n                                    <Box p={1} borderBottom={1} style={{ borderColor: 'lightgray' }} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                                        <Box display=\"flex\">\r\n                                            {\r\n                                                Object.keys(activeData).length > 0 ?\r\n                                                    <Typography className={`${typographyClasses.bold} ${typographyClasses.h6}`}>\r\n                                                        {activeBlk === \"full_code\" ? \"Full Code\" : activeData['name']}\r\n                                                    </Typography>\r\n                                                    :\r\n                                                    null\r\n                                            }\r\n                                        </Box>\r\n                                    </Box>\r\n                                    <Box style={{ height: 'calc(100vh - 80px)' }} overflow=\"auto\">\r\n                                        {\r\n                                            activeBlk === \"full_code\" ?\r\n                                                activeData.hasOwnProperty('code') === true ?\r\n                                                    <Box display=\"flex\" style={{ width: '100%' }}>\r\n                                                        <AceEditor\r\n                                                            style={{ height: '100%', width: '100%' }}\r\n                                                            mode=\"python\"\r\n                                                            theme=\"monokai\"\r\n                                                            // onChange={onChange}\r\n                                                            name=\"full_code\"\r\n                                                            setOptions={{\r\n                                                                fontSize: 14,\r\n                                                                readOnly: true,\r\n                                                                enableBasicAutocompletion: true,\r\n                                                                enableLiveAutocompletion: true,\r\n                                                                useSoftTabs: true,\r\n                                                                tabSize: 4,\r\n                                                                showPrintMargin: false,\r\n                                                                wrap: true,\r\n                                                                maxLines: Infinity,\r\n                                                                dragEnabled: false\r\n                                                            }}\r\n                                                            editorProps={{ $blockScrolling: true }}\r\n                                                            value={activeData['code']}\r\n                                                        />\r\n                                                    </Box>\r\n                                                    :\r\n                                                    <Box>\r\n                                                        {\r\n                                                            loadTimeout === false ?\r\n                                                                <Loader open={true} type=\"block\" />\r\n                                                                :\r\n                                                                null\r\n                                                        }\r\n                                                    </Box>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                        {\r\n                                            activeBlk === \"snippet\" ?\r\n                                                Object.keys(activeData).length > 0 ?\r\n                                                    <Box>\r\n                                                        <Box p={1} pb={0} display=\"flex\" alignItems=\"flex-start\">\r\n                                                            <Box display=\"flex\" mb={1}>\r\n                                                                <Typography className={`${typographyClasses.bold} ${typographyClasses.text}`}>Requirements&nbsp;&nbsp;-&nbsp;&nbsp;</Typography>\r\n                                                            </Box>\r\n                                                            <Box display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\">\r\n                                                                <Box display=\"flex\" mr={0.5} mb={0.5} border={1} p={0.5} height={27} borderColor=\"#3f51b5\" style={{ cursor: 'pointer' }} title=\"Add Requirements\" onClick={() => {\r\n                                                                    setDialogContent('Add Module')\r\n                                                                    setDialog(true)\r\n                                                                }}\r\n                                                                >\r\n                                                                    <AddIcon className={typographyClasses.text} color\r\n                                                                        =\"primary\" />\r\n                                                                </Box>\r\n                                                                {\r\n                                                                    activeData['requirements'].map((req, index) => {\r\n                                                                        return (\r\n                                                                            <Box key={index} mr={0.5} mb={0.5} bgcolor=\"#3f51b5\">\r\n                                                                                <Box display=\"flex\" p={0.5} alignItems=\"center\" color=\"white\">\r\n                                                                                    <Box display=\"flex\" mr={1}>\r\n                                                                                        <Typography className={typographyClasses.smallText}>{req}</Typography>\r\n                                                                                    </Box>\r\n                                                                                    <Box display=\"flex\" style={{ cursor: 'pointer' }} onClick={() => {\r\n                                                                                        handleReqDelete(activeData['requirements'], req)\r\n                                                                                    }}>\r\n                                                                                        <Clear className={typographyClasses.smallText} />\r\n                                                                                    </Box>\r\n                                                                                </Box>\r\n                                                                            </Box>\r\n                                                                        )\r\n                                                                    })\r\n                                                                }\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                        <Box>\r\n                                                            <Box>\r\n                                                                {\r\n                                                                    code_list.map((cdlist, index) => {\r\n                                                                        if (!editorProps.hasOwnProperty(cdlist)) {\r\n                                                                            editorProps[cdlist] = {\r\n                                                                                \"code\": activeData[cdlist],\r\n                                                                                \"readOnly\": true\r\n                                                                            }\r\n                                                                        }\r\n                                                                        return (\r\n                                                                            <Box style={{ width: '97%' }} key={index} margin=\"auto\" border={1} mb={1}>\r\n                                                                                <Box display=\"flex\" flexDirection=\"column\" pl={1} pr={1}>\r\n                                                                                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"flex-start\">\r\n                                                                                        <Box display=\"flex\" mr={2}>\r\n                                                                                            <Typography className={`${typographyClasses.text} ${typographyClasses.bold}`}>{code_map[cdlist]}</Typography>\r\n                                                                                        </Box>\r\n                                                                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                                                                            <EditorActions code_key={cdlist} />\r\n                                                                                        </Box>\r\n                                                                                    </Box>\r\n                                                                                </Box>\r\n                                                                                <Box style={{ width: '100' }}>\r\n                                                                                    <AceEditor\r\n                                                                                        style={{ height: '100%', width: '100%' }}\r\n                                                                                        mode=\"python\"\r\n                                                                                        theme=\"monokai\"\r\n                                                                                        onChange={(event) => onChangeCode(cdlist, event)}\r\n                                                                                        name={activeData.snippetid + cdlist}\r\n                                                                                        setOptions={{\r\n                                                                                            fontSize: 14,\r\n                                                                                            readOnly: editorProps[cdlist]['readOnly'],\r\n                                                                                            enableBasicAutocompletion: true,\r\n                                                                                            enableLiveAutocompletion: true,\r\n                                                                                            useSoftTabs: true,\r\n                                                                                            tabSize: 4,\r\n                                                                                            showPrintMargin: false,\r\n                                                                                            wrap: true,\r\n                                                                                            maxLines: 20,\r\n                                                                                            dragEnabled: false,\r\n                                                                                            minLines: 10\r\n                                                                                        }}\r\n                                                                                        editorProps={{ $blockScrolling: true }}\r\n                                                                                        value={activeData[cdlist]}\r\n                                                                                    />\r\n                                                                                </Box>\r\n                                                                            </Box>\r\n                                                                        )\r\n                                                                    })\r\n                                                                }\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                    :\r\n                                                    null\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </Box>\r\n                                </Box>\r\n                            </Grid>\r\n                            {\r\n                                showSnippets === true ?\r\n                                    <Grid item xs={2}>\r\n                                        <Box style={{ height: 'calc(100vh - 34px)' }} bgcolor=\"#fafafa\">\r\n                                            <Box>\r\n                                                <Box p={1} borderBottom={1} style={{ borderColor: 'lightgray' }} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                                                    <Box display=\"flex\">\r\n                                                        <Typography className={`${typographyClasses.bold} ${typographyClasses.h6}`}>Snippets</Typography>\r\n                                                    </Box>\r\n                                                    <Box display='flex' style={{ cursor: 'pointer' }} onClick={(e) => {\r\n                                                        e.stopPropagation()\r\n                                                        setShowSnippets(false)\r\n                                                    }}>\r\n                                                        <Clear className={`${typographyClasses.h5}`} />\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                <Box p={1} style={{ height: 'calc(100vh - 113px)' }} overflow=\"auto\">\r\n                                                    <Box p={1} display=\"flex\" flexDirection=\"column\" border={1} mb={0.5} style={{ borderColor: 'lightgray', width: '100%', cursor: 'pointer' }} alignItems=\"flex-start\" bgcolor=\"#3F51B5\" color=\"white\" onClick={() => {\r\n                                                        if (!btnAction) {\r\n                                                            handleAddSnippet(\"custom\")\r\n                                                        }\r\n                                                    }}>\r\n                                                        <Box style={{ width: '100%' }} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                                                            <Box>\r\n                                                                <Typography className={`${typographyClasses.smallText}`}>Custom</Typography>\r\n                                                            </Box>\r\n                                                            {\r\n                                                                btnAction === false ?\r\n                                                                    <Box>\r\n                                                                        <AddIcon className={`${typographyClasses.smallText}`} />\r\n                                                                    </Box>\r\n                                                                    :\r\n                                                                    null\r\n                                                            }\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                    {\r\n                                                        preSnippets.length > 0 ?\r\n                                                            preSnippets.map((snip, index) => {\r\n                                                                return (\r\n                                                                    <Box p={1} display=\"flex\" flexDirection=\"column\" border={1} mb={0.5} style={{ borderColor: 'lightgray', width: '100%', cursor: 'pointer' }} alignItems=\"flex-start\" bgcolor=\"#3F51B5\" color=\"white\" key={index} onClick={() => {\r\n                                                                        if (!btnAction) {\r\n                                                                            handleAddSnippet('predefined', snip)\r\n                                                                        }\r\n                                                                    }}>\r\n                                                                        <Box style={{ width: '100%' }} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                                                                            <Box>\r\n                                                                                <Typography className={`${typographyClasses.smallText}`}>{snip.name}</Typography>\r\n                                                                            </Box>\r\n                                                                            {\r\n                                                                                btnAction === false ?\r\n                                                                                    <Box>\r\n                                                                                        <AddIcon className={`${typographyClasses.smallText}`} />\r\n                                                                                    </Box>\r\n                                                                                    :\r\n                                                                                    null\r\n                                                                            }\r\n                                                                        </Box>\r\n                                                                    </Box>\r\n                                                                )\r\n                                                            })\r\n                                                            :\r\n                                                            <Box>\r\n                                                                {\r\n                                                                    btnAction === false ?\r\n                                                                        <Typography className={typographyClasses.smallText}>No Predefined Snippets</Typography>\r\n                                                                        :\r\n                                                                        null\r\n                                                                }\r\n                                                            </Box>\r\n                                                    }\r\n                                                </Box>\r\n                                            </Box>\r\n                                        </Box>\r\n                                    </Grid>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </Grid>\r\n                        {\r\n                            showSnippets === false ?\r\n                                <Box style={{ height: 'calc(100vh - 34px)' }} bgcolor=\"#FAFBFC\" width={40}>\r\n                                    <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%', cursor: 'pointer' }} onClick={() => setShowSnippets(true)} p={1} pl={0} pr={0} justifyContent=\"center\">\r\n                                        <MenuIcon className={`${typographyClasses.h5}`} />\r\n                                    </Box>\r\n                                </Box>\r\n                                :\r\n                                null\r\n                        }\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={() => setDialog(false)}\r\n                aria-labelledby=\"acc-dialog-title\"\r\n                fullWidth={true}\r\n                maxWidth={dialogContent === \"Add Snippet\" || dialogContent === \"Add Module\" ? \"sm\" : \"lg\"}\r\n            >\r\n                <DialogTitle id=\"acc-dialog-title\" style={{ borderBottom: '1px solid lightgrey' }}>{dialogContent}</DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        dialogContent === \"Add Snippet\" ?\r\n                            <form autoComplete=\"off\">\r\n                                <Box mb={1}>\r\n                                    <FormControl fullWidth>\r\n                                        <label htmlFor=\"SnippetName\" required>Snippet Name</label>\r\n                                        <TextField\r\n                                            id=\"SnippetName\"\r\n                                            required\r\n                                            fullWidth\r\n                                            placeholder=\"Enter Snippet Name\"\r\n                                            onChange={handleFormDataChage.bind(this, \"snippetname\")}\r\n                                            variant=\"outlined\"\r\n                                        >\r\n                                        </TextField>\r\n                                    </FormControl>\r\n                                </Box>\r\n                                <Box mb={1}>\r\n                                    <FormControl fullWidth>\r\n                                        <label htmlFor=\"FunctionName\" required>Function Name</label>\r\n                                        <TextField\r\n                                            id=\"FunctionName\"\r\n                                            required\r\n                                            fullWidth\r\n                                            placeholder=\"Enter Function Name\"\r\n                                            onChange={handleFormDataChage.bind(this, \"functionname\")}\r\n                                            variant=\"outlined\"\r\n                                        >\r\n                                        </TextField>\r\n                                    </FormControl>\r\n                                </Box>\r\n                            </form>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        dialogContent === \"Add Module\" ?\r\n                            <form autoComplete=\"off\">\r\n                                <Box>\r\n                                    <label required>Module Name</label>\r\n                                    {\r\n                                        reqList.map((item, index) => {\r\n                                            return (\r\n                                                <Box key={index} display=\"flex\" alignItems=\"center\" p={1} pl={0} justifyContent=\"space-between\" style={{ width: '100%' }}>\r\n                                                    <Grid container alignItems=\"center\">\r\n                                                        <Grid item xs={10} style={{ padding: '2px 2px 0 0' }}>\r\n                                                            <FormControl fullWidth>\r\n                                                                <TextField\r\n                                                                    name=\"modulename\"\r\n                                                                    required\r\n                                                                    fullWidth\r\n                                                                    placeholder=\"Enter Module Name\"\r\n                                                                    value={item.modulename}\r\n                                                                    onChange={e => handleAttrInputChange(e, index)}\r\n                                                                    variant=\"outlined\"\r\n                                                                >\r\n                                                                </TextField>\r\n                                                            </FormControl>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={2} style={{ padding: '2px 2px 0 0' }}>\r\n                                                            <Box display=\"flex\">\r\n                                                                {\r\n                                                                    reqList.length !== 1 ?\r\n                                                                        <Button\r\n                                                                            color=\"secondary\"\r\n                                                                            style={{ margin: '0px 10px 0 0' }}\r\n                                                                            onClick={() => handleRemAttr(index)}\r\n                                                                        >\r\n                                                                            <Clear className={typographyClasses.text} />\r\n                                                                        </Button>\r\n                                                                        :\r\n                                                                        <Button\r\n                                                                            color=\"secondary\"\r\n                                                                            disabled={true}\r\n                                                                            style={{ margin: '0px 10px 0 0' }}\r\n                                                                        >\r\n                                                                            <Clear className={typographyClasses.text} />\r\n                                                                        </Button>\r\n                                                                }\r\n                                                                {\r\n                                                                    reqList.length - 1 === index ?\r\n                                                                        <Button\r\n                                                                            color=\"primary\"\r\n                                                                            onClick={handleAddAttr}\r\n                                                                            style={{ margin: '0px 10px 0 0' }}\r\n                                                                        >\r\n                                                                            <AddIcon className={typographyClasses.text} />\r\n                                                                        </Button>\r\n                                                                        :\r\n                                                                        null\r\n                                                                }\r\n                                                            </Box>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Box>\r\n                                            );\r\n                                        })\r\n                                    }\r\n                                </Box>\r\n                            </form>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <Dialogactions>\r\n                    <Button onClick={() => setDialog(false)} color=\"secondary\" variant=\"contained\">\r\n                        Close\r\n                    </Button>\r\n                    {\r\n                        dialogContent === \"Add Snippet\" || dialogContent === \"Add Module\" ?\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color='primary'\r\n                                className=\"api-btn\"\r\n                                onClick={() => FormDialogSubmit()}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                            :\r\n                            null\r\n                    }\r\n                </Dialogactions>\r\n            </Dialog>\r\n            {\r\n                confirmation !== '' ?\r\n                    <Confirm confirmText={confirmation} clickHandler={handleConfirmation} />\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewEditor","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Custom Components\r\nimport HandleApi from '../../Utils/HandleApi';\r\nimport Loader from '../../Components/Loader';\r\nimport TopNav from '../../Components/AppNav';\r\nimport Alert from '../../Components/Alert';\r\nimport Footer from '../../Components/Footer/index';\r\nimport Confirm from '../../Components/Confirm';\r\nimport Cognitofunctions from '../Cognito/CognitoFunctions';\r\nimport DataList from '../../Utils/DataList';\r\nimport ServiceAPIs from './ServiceAPIs';\r\nimport TestCaseComp from './NewTestCase';\r\nimport FunctionEditor from '../CodeEditor/NewEditor';\r\nimport apipath from '../../Utils/Apipath';\r\nimport apidomain from '../../Utils/ApiDomain';\r\nimport GitAPIs from '../Git/GitAPIs';\r\n\r\n// Custom Styles\r\nimport ContainerStyles from '../../assets/styles/ContainerStyles';\r\nimport TypographyStyles from '../../assets/styles/TypographySyles';\r\nimport StatusStyles from '../../assets/styles/StatusStyles';\r\n\r\n// Material UI\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport MuiAccordion from '@material-ui/core/Accordion';\r\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport MuiAccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport TableDetails from '../DataLayer/TableDetails';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n// Material Icons\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\r\nimport DeviceHubIcon from '@material-ui/icons/DeviceHub';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport MemoryIcon from '@material-ui/icons/Memory';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\n\r\n// React Helmet\r\nimport Helmet from \"react-helmet/es/Helmet\";\r\n\r\nimport { JSONToHTMLTable } from '@kevincobain2000/json-to-html-table'\r\n\r\n\r\nconst tabStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n        backgroundColor: 'white'\r\n    },\r\n    header: {\r\n        boxShadow: 'none',\r\n        // borderBottom: '3px solid #3f51b5',\r\n        background: 'white'\r\n    }\r\n}));\r\n\r\nconst sidebarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        cursor: 'pointer'\r\n    },\r\n    onhoveritem: {\r\n        '&:hover': {\r\n            backgroundColor: '#e6e8f3'\r\n        }\r\n    }\r\n}));\r\n\r\nconst Accordion = withStyles({\r\n    root: {\r\n        // border: '1px solid rgba(0, 0, 0, .125)',\r\n        boxShadow: 'none',\r\n        '&:not(:last-child)': {\r\n            borderBottom: 0,\r\n        },\r\n        '&:before': {\r\n            display: 'none',\r\n        },\r\n        '&$expanded': {\r\n            margin: 'auto',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordion);\r\n\r\nconst AccordionSummary = withStyles({\r\n    root: {\r\n        backgroundColor: 'white',\r\n        borderBottom: '1px solid rgba(0, 0, 0, .125)',\r\n        marginBottom: 0,\r\n        minHeight: 56,\r\n        '&$expanded': {\r\n            minHeight: 56,\r\n            // border:'1px solid rgba(0, 0, 0, .125)'\r\n        },\r\n    },\r\n    // expandIcon: {\r\n    //     '&$expanded': {\r\n    //         transform: 'rotate(90deg)'\r\n    //     }\r\n    // },\r\n    content: {\r\n        margin: 0,\r\n        '&$expanded': {\r\n            margin: '0',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordionSummary);\r\n\r\nconst AccordionDetails = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiAccordionDetails);\r\n\r\nfunction expansionProps(name, index) {\r\n    return {\r\n        id: `${name}${index}-header`,\r\n        'aria-controls': `${name}${index}-content`,\r\n    };\r\n}\r\n\r\nconst accordionStyles = makeStyles((theme) => ({\r\n    POST: {\r\n        backgroundColor: '#bbffbe',\r\n    },\r\n    PUT: {\r\n        backgroundColor: '#fae39f'\r\n    },\r\n    PATCH: {\r\n        backgroundColor: '#c8c8c8'\r\n    },\r\n    UPDATE: {\r\n        backgroundColor: '#c8c8c8'\r\n    },\r\n    GET: {\r\n        backgroundColor: '#c2ecff'\r\n    },\r\n    Get: {\r\n        backgroundColor: '#c2ecff'\r\n    },\r\n    DELETE: {\r\n        backgroundColor: '#ffc2bd'\r\n    },\r\n    bdPOST: {\r\n        borderColor: '#5dbe61 !important',\r\n    },\r\n    bdPUT: {\r\n        borderColor: '#ffc517 !important',\r\n    },\r\n    bdPATCH: {\r\n        borderColor: 'darkgray !important',\r\n    },\r\n    bdUPDATE: {\r\n        borderColor: 'darkgray !important',\r\n    },\r\n    bdGET: {\r\n        borderColor: '#4cb0ff !important',\r\n    },\r\n    bdGet: {\r\n        borderColor: '#4cb0ff !important',\r\n    },\r\n    bdDELETE: {\r\n        borderColor: '#ff8d85 !important',\r\n    },\r\n    bgGET: {\r\n        backgroundColor: '#4cb0ff'\r\n    },\r\n    bgGet: {\r\n        backgroundColor: '#4cb0ff'\r\n    },\r\n    bgPOST: {\r\n        backgroundColor: '#5dbe61',\r\n    },\r\n    bgPUT: {\r\n        backgroundColor: '#ffc517'\r\n    },\r\n    bgPATCH: {\r\n        backgroundColor: 'darkgray'\r\n    },\r\n    bgUPDATE: {\r\n        backgroundColor: 'darkgray'\r\n    },\r\n    bgDELETE: {\r\n        backgroundColor: '#ff8d85'\r\n    },\r\n}));\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={1} pl={0} pr={0}>\r\n                    {children}\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction TabProps(name, index) {\r\n    return {\r\n        id: `${name}-auto-tab-${index}`,\r\n        'aria-controls': `${name}-auto-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\n\r\nconst ServiceDetails = ({ match }) => {\r\n    const [loader, setLoader] = useState(false)\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [severity, setSeverrity] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [confirmation, setConfirmation] = useState('')\r\n    const [confApiData, setConfApiData] = useState({})\r\n    const [loadTimeout, setLoadTimeout] = useState(false)\r\n    const [versions, setVersions] = useState([])\r\n    const [curVersion, setCurVersion] = useState(0)\r\n    const [resources, setResources] = useState([])\r\n    const [curRes, setCurRes] = useState(0)\r\n    const [resObj, setResObj] = useState({})\r\n    const [showVersions, setShowVersions] = useState(false)\r\n    const [showRes, setShowRes] = useState(true)\r\n    const [formDialog, setFormDialog] = useState(false)\r\n    const [formName, setFormName] = useState('')\r\n    const [Methods, setMethods] = useState([])\r\n    const [curServ, setCurServ] = useState(Object.keys(DataList.ActiveService).length > 0 ? DataList.ActiveService : (sessionStorage.getItem('CurrentService') ? JSON.parse(window.atob(sessionStorage.getItem('CurrentService'))) : {}))\r\n    const [formData, setFormData] = useState({})\r\n    const [resname, setresname] = useState('')\r\n    const [vername, setvername] = useState('')\r\n    const [methodProps, setMethodProps] = useState({})\r\n    const [btnAction, setBtnAction] = useState(false)\r\n    const [showSidebar, setShowSideBar] = useState(true)\r\n    const [mainBlk, setMainBlk] = useState('actions')\r\n    const [resJSON, setResJSON] = useState({})\r\n    const [jsontohtml, setJsontoHtml] = useState({})\r\n    const [curState, setCurstate] = useState(\"\")\r\n    const [apiJson, setApiJson] = useState({})\r\n    const [servstatus, setServStatus] = useState('')\r\n    const [deployId, setDeployId] = useState('')\r\n    const [methodJSON, setMethodJSON] = useState({})\r\n    const [curMethod, setCurMethod] = useState(0)\r\n    const [liveInterval, setLiveInterval] = useState(false)\r\n    const [resourceStatus, setResourceStatus] = useState(\"\")\r\n    const [delInterval, setDelInterval] = useState(false)\r\n    const [isGitConfigured, setIsGitConfigured] = useState(false)\r\n    const [branches, setBranches] = useState([])\r\n    const [showBranches, setShowBranches] = useState(false)\r\n    const [curBr, setCurBr] = useState({\r\n        \"Branchname\": \"Select Branch\",\r\n        \"Name\": \"\"\r\n    })\r\n\r\n    const containerClasses = ContainerStyles()\r\n    const typographyClasses = TypographyStyles()\r\n    const statusClasses = StatusStyles()\r\n    const tabClasses = tabStyles();\r\n    const sideBarClasses = sidebarStyles()\r\n    const accordionClassess = accordionStyles()\r\n\r\n    const statemap = {\r\n        deploying: \"Deploying\",\r\n        running: \"Running\",\r\n        failed: \"Failed\",\r\n        design: \"Design\",\r\n        published: \"Published\"\r\n    }\r\n\r\n    let userData = sessionStorage.getItem('user') ? JSON.parse(window.atob(sessionStorage.getItem('user'))) : ''\r\n    let interval = '', intervalFlag = false, liveinterval = \"\", liveintervalflag = false, deltimeout = \"\"\r\n\r\n    useEffect(() => {\r\n        checkrole()\r\n    }, [])\r\n\r\n    const checkrole = () => {\r\n        Cognitofunctions.CurrentUser(function (success, data) {\r\n            if (success) {\r\n                let gitapidata = {\r\n                    path: apipath['datastore'] + \"/git\",\r\n                    method: 'GET',\r\n                    body: {},\r\n                    headers: {\r\n                        headers: true,\r\n                        apidomain: apidomain.vmurl\r\n                    },\r\n                    ref: \"GetGitCredentials\"\r\n                }\r\n                manageAPIs(gitapidata)\r\n\r\n                let params = {}\r\n                if (window.location.href.indexOf('?') !== -1) {\r\n                    let url = window.location.href.split('?')\r\n                    if (url[1].indexOf('&') !== -1) {\r\n                        let eachparam = url[1].split('&'), zz = { dummy: \"\" }\r\n                        for (let i = 0; i < eachparam.length; i++) {\r\n                            zz[eachparam[i].split('=')[0]] = eachparam[i].split('=')[1]\r\n                        }\r\n                        delete zz['dummy']\r\n                        params = zz\r\n                    }\r\n                    else {\r\n                        let zz = {\r\n                            dummy: 'a'\r\n                        }\r\n                        zz[url[1].split('=')[0]] = url[1].split('=')[1]\r\n                        delete zz['dummy']\r\n                        params = zz\r\n                    }\r\n                }\r\n                let apidata = {\r\n                    method: \"GET\",\r\n                    path: apipath['designapi'] + \"/service/\" + match.params.productid + \"/\" + match.params.serviceid,\r\n                    headers: {\r\n                        headers: true,\r\n                        apidomain: apidomain.vmurl\r\n                    },\r\n                    body: {},\r\n                    ref: \"GetService\",\r\n                }\r\n                manageAPIs(apidata)\r\n            }\r\n            else {\r\n                // window.location.origin = window.location.origin + \"/login\"\r\n                // window.location.origin = window.location.origin\r\n                setMessage('You are not authorized to access this page.')\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n                setLoader(false)\r\n                setTimeout(function () {\r\n                    window.location.href = window.location.origin + \"/#/app/login\"\r\n                    window.location.reload()\r\n                }, 1000)\r\n            }\r\n        })\r\n    }\r\n\r\n    const manageAPIs = (apidata) => {\r\n        HandleApi.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n            .then(result => {\r\n                if (result.hasOwnProperty('message') && result.message !== \"\") {\r\n                    setMessage(result.message)\r\n                    setSeverrity('info')\r\n                    setOpenAlert(true)\r\n                }\r\n                if ((result.hasOwnProperty('statusCode') && result.statusCode === 200) || (result.hasOwnProperty('status') && (result.status === 200 || result.status === \"200\"))) {\r\n                    if (apidata.ref === \"GetAPI\") {\r\n                        setApiJson(result.body)\r\n                        if (result.body.versions.length === 0) {\r\n                            setLoadTimeout(true)\r\n                            setLoader(false)\r\n                            setFormName('Add Version')\r\n                            setFormDialog(true)\r\n                        }\r\n                        else {\r\n                            setLoader(false)\r\n                            setVersions(result.body.versions)\r\n                            let params = apidata.params, verid = result.body.versions[0].versionid, vers = result.body.versions\r\n                            if (apidata.hasOwnProperty('status') && (apidata.status === \"deploying\" || apidata.status === \"running\" || apidata.status === \"failed\")) {\r\n                                if (Object.keys(params).length > 0) {\r\n                                    for (let i = 0; i < vers.length; i++) {\r\n                                        if (vers[i].versionid === params.versionid) {\r\n                                            verid = vers[i].versionid\r\n                                            setCurVersion(i)\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + match.params.serviceid + \"?versionid=\" + result.body.versions[0].versionid\r\n                                }\r\n                                let apidata = {\r\n                                    method: \"POST\",\r\n                                    path: \"/mock/describe\",\r\n                                    headers: true,\r\n                                    body: {\r\n                                        serviceid: match.params.serviceid,\r\n                                        productid: match.params.productid,\r\n                                        tenantid: userData.TenantId,\r\n                                        userid: userData.EmailId\r\n                                    },\r\n                                    ref: \"GetDeployDetails\",\r\n                                    versionid: verid,\r\n                                }\r\n                                manageAPIs(apidata)\r\n                            }\r\n                            else {\r\n                                let ress = vers[0].resources\r\n                                setResources(vers[0].resources)\r\n                                if (!ress.length) {\r\n                                    setLoadTimeout(true)\r\n                                    setLoader(false)\r\n                                    setFormName('Add Resource')\r\n                                    setFormDialog(true)\r\n                                }\r\n                                if (Object.keys(params).length > 0) {\r\n                                    for (let i = 0; i < vers.length; i++) {\r\n                                        if (vers[i].versionid === params.versionid) {\r\n                                            verid = vers[i].versionid\r\n                                            setCurVersion(i)\r\n                                            setResources(vers[i].resources)\r\n                                            ress = vers[i].resources\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    if (!ress.length) {\r\n                                        setLoadTimeout(true)\r\n                                        setLoader(false)\r\n                                        setFormName('Add Resource')\r\n                                        setFormDialog(true)\r\n                                    }\r\n                                    if (params.hasOwnProperty('resourceid')) {\r\n                                        window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + match.params.serviceid + \"?versionid=\" + params.versionid + \"&resourceid=\" + params.resourceid\r\n\r\n                                        setCurRes(ress.indexOf(params.resourceid))\r\n\r\n                                        let nextAPIdata = {\r\n                                            method: \"GET\",\r\n                                            path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + curServ.serviceid + \"/\" + curServ.apiid + \"/\" + params.versionid + \"/\" + params.resourceid,\r\n                                            ref: \"GetSpecificResource\",\r\n                                            headers: {\r\n                                                headers: true,\r\n                                                apidomain: apidomain.vmurl\r\n                                            },\r\n                                            index: 0,\r\n                                            resources: ress,\r\n                                            versionid: params.versionid\r\n                                        }\r\n                                        manageAPIs(nextAPIdata)\r\n                                        if (ress.length > 1) {\r\n                                            for (let i = 0; i < ress.length; i++) {\r\n                                                let nextAPIdata = {\r\n                                                    method: \"GET\",\r\n                                                    path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + curServ.serviceid + \"/\" + curServ.apiid + \"/\" + params.versionid + \"/\" + ress[i],\r\n                                                    ref: \"GetSpecificResource\",\r\n                                                    headers: {\r\n                                                        headers: true,\r\n                                                        apidomain: apidomain.vmurl\r\n                                                    },\r\n                                                    index: i === ress.length - 1 && ress.length > 1 ? -2 : -1,\r\n                                                    resources: ress,\r\n                                                    versionid: params.versionid\r\n                                                }\r\n                                                manageAPIs(nextAPIdata)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (ress.length) {\r\n                                        window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + match.params.serviceid + \"?versionid=\" + result.body.versions[0].versionid + \"&resourceid=\" + ress[0]\r\n\r\n                                        for (let i = 0; i < ress.length; i++) {\r\n                                            let nextAPIdata = {\r\n                                                method: \"GET\",\r\n                                                path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + curServ.serviceid + \"/\" + curServ.apiid + \"/\" + result.body.versions[0].versionid + \"/\" + ress[i],\r\n                                                ref: \"GetSpecificResource\",\r\n                                                headers: {\r\n                                                    headers: true,\r\n                                                    apidomain: apidomain.vmurl\r\n                                                },\r\n                                                index: i === ress.length - 1 && ress.length > 1 ? -2 : i,\r\n                                                resources: ress,\r\n                                                versionid: result.body.versions[0].versionid\r\n                                            }\r\n                                            manageAPIs(nextAPIdata)\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + match.params.serviceid + \"?versionid=\" + result.body.versions[0].versionid\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (apidata.ref === \"GetSpecificResource\") {\r\n                        let resjson = resJSON\r\n                        resjson[result.body.resourceid] = result.body\r\n                        setResJSON(resjson)\r\n                        if (apidata.index === 0 || apidata.resources.length === 1) {\r\n                            setResObj(result.body)\r\n                            let nextAPidata = {\r\n                                method: \"GET\",\r\n                                path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + match.params.serviceid + \"/\" + curServ.apiid + \"/\" + apidata.versionid + \"/\" + result.body.resourceid + \"/method\",\r\n                                ref: \"GetAllMethods\",\r\n                                headers: {\r\n                                    headers: true,\r\n                                    apidomain: apidomain.vmurl\r\n                                },\r\n                                body: {}\r\n                            }\r\n                            manageAPIs(nextAPidata)\r\n                            let nextAPIdata1 = {\r\n                                method: \"GET\",\r\n                                headers: {\r\n                                    headers: true,\r\n                                    apidomain: apidomain.vmurl\r\n                                },\r\n                                path: apipath['liveapi'] + \"/resource/\" + match.params.serviceid + \"/\" + apidata.versionid + \"/\" + result.body.resourceid + \"/output\",\r\n                                ref: \"GetLiveResOP\",\r\n                                body: {},\r\n                                show: false,\r\n                                resjson: result.body,\r\n                                key: \"Resource\",\r\n                                reslist: apidata.resources,\r\n                                versionid: apidata.versionid\r\n                            }\r\n                            manageAPIs(nextAPIdata1)\r\n                        }\r\n                        else if (apidata.index === -2) {\r\n                            let meths = JSON.parse(window.atob(sessionStorage.getItem('rffd')))\r\n                            setMethods(meths)\r\n                        }\r\n                    }\r\n                    else if (apidata.ref === \"NewResource\") {\r\n                        setResObj({})\r\n\r\n                        window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + match.params.serviceid + \"?versionid=\" + versions[curVersion].versionid + \"&resourceid=\" + result.body.resourceid\r\n\r\n                        let res = [...resources]\r\n                        res.push(result.body.resourceid)\r\n                        setResources(res)\r\n\r\n                        let resjson = resJSON\r\n                        resjson[result.body.resourceid] = result.body\r\n                        setResJSON(resjson)\r\n\r\n                        setCurRes(res.length - 1)\r\n                        setFormDialog(false)\r\n                        setFormData({})\r\n                        setMethods(result.body.methods)\r\n                        setResObj(result.body)\r\n                        setLoader(false)\r\n                        setresname('')\r\n                    }\r\n                    else if (apidata.ref === \"NewVersion\") {\r\n                        let vers = result.body.versions\r\n                        window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + match.params.serviceid + \"?versionid=\" + result.body.versions[vers.length - 1].versionid\r\n                        setResources([])\r\n                        setCurRes(0)\r\n                        setResObj({})\r\n                        setResJSON({})\r\n                        setMethods([])\r\n                        setVersions(vers)\r\n                        setCurVersion(vers.length - 1)\r\n                        setFormDialog(false)\r\n                        setFormData({})\r\n                        setvername('')\r\n                        if (!vers[vers.length - 1].resources.length) {\r\n                            setLoadTimeout(true)\r\n                            setLoader(false)\r\n                            setFormName('Add Resource')\r\n                            setFormDialog(true)\r\n                        }\r\n                        // let nextAPIdata = {\r\n                        //     method: \"GET\",\r\n                        //     path: '/api/' + curServ.apiid + \"/\" + result.body.versions[vers.length - 1].versionid + \"/resource\",\r\n                        //     ref: \"GetResources\",\r\n                        //     headers: true,\r\n                        //     params: {}\r\n                        // }\r\n                        // manageAPIs(nextAPIdata)\r\n                    }\r\n                    else if (apidata.ref === \"DeleteVersion\") {\r\n                        setResourceStatus('')\r\n                        setDelInterval(false)\r\n                        liveintervalflag = false\r\n                        clearInterval(liveinterval)\r\n                        clearTimeout(deltimeout)\r\n                        setVersions([])\r\n                        setCurVersion(0)\r\n                        setResources([])\r\n                        setCurRes(0)\r\n                        setResObj({})\r\n                        setMethods([])\r\n                        setMethodProps({})\r\n                        setShowVersions(false)\r\n                        let nextAPIdata = {\r\n                            method: \"GET\",\r\n                            path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + curServ.serviceid + \"/\" + curServ.apiid,\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                            body: {},\r\n                            ref: \"GetAPI\",\r\n                            params: {},\r\n                            status: servstatus\r\n                        }\r\n                        manageAPIs(nextAPIdata)\r\n                    }\r\n                    else if (apidata.ref === \"DeleteResource\") {\r\n                        setResourceStatus('')\r\n                        setDelInterval(false)\r\n                        liveintervalflag = false\r\n                        clearInterval(liveinterval)\r\n                        clearTimeout(deltimeout)\r\n                        let ress = [...resources]\r\n                        ress.splice(ress.indexOf(apidata.resourceid), 1)\r\n                        setResources(ress)\r\n\r\n                        setResObj({})\r\n                        setMethods([])\r\n                        setMethodProps({})\r\n                        setCurRes(0)\r\n                        setLoader(false)\r\n\r\n                        let resjson = resJSON\r\n                        delete resjson[apidata.resourceid]\r\n                        setResJSON(resjson)\r\n\r\n                        if (!ress.length) {\r\n                            window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + match.params.serviceid + \"?versionid=\" + versions[curVersion].versionid\r\n\r\n                            setLoadTimeout(true)\r\n                            setLoader(false)\r\n                            setFormName('Add Resource')\r\n                            setFormDialog(true)\r\n                        }\r\n                        else {\r\n                            window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + match.params.serviceid + \"?versionid=\" + versions[curVersion].versionid + \"&resourceid=\" + ress[0]\r\n\r\n                            setResObj(resJSON[ress[0]])\r\n                            sessionStorage.setItem(\"rffd\", window.btoa(JSON.stringify(resJSON[ress[0]].methods)))\r\n                            if (resJSON[ress[0]].methods > 0) {\r\n                                let meths = resJSON[ress[0]].methods\r\n                                setMethods(meths)\r\n                                setLoader(false)\r\n                            }\r\n                            else {\r\n                                setLoadTimeout(true)\r\n                                setLoader(false)\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (apidata.ref === \"DeleteService\") {\r\n                        ServiceAPIs.DeleteService(apidata, function (success, response) {\r\n                            if (response.hasOwnProperty('message') && response.message !== \"\") {\r\n\r\n                            }\r\n                            sessionStorage.removeItem('CurrentService')\r\n                            DataList.ActiveService = {}\r\n                            window.setTimeout(function () {\r\n                                window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services\"\r\n                            }, 500)\r\n                        })\r\n                    }\r\n                    else if (apidata.ref === \"NewMethod\") {\r\n                        setFormDialog(false)\r\n                        setMethods(result.body)\r\n                        setLoader(false)\r\n\r\n                        let resjson = resJSON\r\n                        resjson[resources[curRes]]['methods'] = result.body\r\n                        setResJSON(resjson)\r\n\r\n                        let meths = [...Methods]\r\n                        meths.push(result.body)\r\n                        setMethods(meths)\r\n                    }\r\n                    else if (apidata.ref === \"DeleteMethod\") {\r\n                        // setMethods(result.body)\r\n                        // setLoader(false)\r\n\r\n                        setMethods([])\r\n                        setLoadTimeout(false)\r\n\r\n                        let resjson = resJSON\r\n                        resjson[resources[curRes]]['methods'] = result.body\r\n                        setResJSON(resjson)\r\n\r\n                        let nextAPidata = {\r\n                            method: \"GET\",\r\n                            path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + match.params.serviceid + \"/\" + curServ.apiid + \"/\" + versions[curVersion].versionid + \"/\" + resources[curRes] + \"/method\",\r\n                            ref: \"GetAllMethods\",\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                            body: {}\r\n                        }\r\n                        manageAPIs(nextAPidata)\r\n                    }\r\n                    else if (apidata.ref === \"GetSpecificMethod\") {\r\n                        let metjson = methodJSON\r\n                        metjson[result.body.methodid] = result.body\r\n                        setMethodJSON(metjson)\r\n                        let meths = [...Methods]\r\n                        setMethods([])\r\n                        setMethods(meths)\r\n                    }\r\n                    else if (apidata.ref === \"GetAllMethods\") {\r\n                        if (result.body.length > 0) {\r\n                            let meths = result.body\r\n                            sessionStorage.setItem(\"rffd\", window.btoa(JSON.stringify(result.body)))\r\n                            setMethods(meths)\r\n                            setLoader(false)\r\n                            setLoadTimeout(true)\r\n                        }\r\n                        else {\r\n                            setLoadTimeout(true)\r\n                            setLoader(false)\r\n                        }\r\n                    }\r\n                    else if (apidata.ref === \"PublishDesign\") {\r\n                        // sessionStorage.setItem('servicestatus', result.body.status)\r\n                        // setServStatus(result.body.status)\r\n                        // setCurServ(result.body)\r\n                        // DataList.ActiveService = result.body\r\n                        // sessionStorage.setItem('CurrentService', window.btoa(JSON.stringify(result.body)))\r\n                        // if (result.body.status !== \"design\") {\r\n                        //     setBtnAction(true)\r\n                        // }\r\n                        // else {\r\n                        //     setBtnAction(false)\r\n                        // }\r\n                        setLoader(false)\r\n                        setTimeout(function () {\r\n                            window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + match.params.serviceid + \"/deploy\"\r\n                        }, 1000)\r\n                    }\r\n                    else if (apidata.ref === \"DeployCode\") {\r\n                        sessionStorage.setItem('servicestatus', result.body.status)\r\n                        setServStatus(result.body.status)\r\n                        setCurServ(result.body)\r\n                        DataList.ActiveService = result.body\r\n                        sessionStorage.setItem('CurrentService', window.btoa(JSON.stringify(result.body)))\r\n                        setLoader(false)\r\n                        let apidata = {\r\n                            method: \"POST\",\r\n                            path: \"/mock/describe\",\r\n                            headers: true,\r\n                            body: {\r\n                                serviceid: match.params.serviceid,\r\n                                productid: match.params.productid,\r\n                                tenantid: userData.TenantId,\r\n                                userid: userData.EmailId\r\n                            },\r\n                            ref: \"GetDeployDetails\",\r\n                            versionid: versions[curVersion].versionid\r\n                        }\r\n                        manageAPIs(apidata)\r\n                    }\r\n                    else if (apidata.ref === \"GetDeployDetails\") {\r\n                        sessionStorage.setItem('servicestatus', result.body.status)\r\n                        setServStatus(result.body.status)\r\n                        if (result.body.hasOwnProperty('api')) {\r\n                            setApiJson(result.body.api)\r\n                        }\r\n                        if (result.body.hasOwnProperty('deployid')) {\r\n                            setDeployId(result.body.deployid)\r\n                        }\r\n                        if (result.body.hasOwnProperty('status') && result.body.status === \"deploying\") {\r\n                            if (!intervalFlag) {\r\n                                intervalFlag = true\r\n                                handleAPIInterval(apidata.versionid)\r\n                            }\r\n                        }\r\n                        else {\r\n                            clearInterval(interval)\r\n                        }\r\n                        let ress = [], resjson = { \"dummy\": \"a\" }, serv = curServ, meths = []\r\n                        serv['status'] = result.body.status\r\n                        setCurServ(serv)\r\n                        for (let i = 0; i < result.body.resources.length; i++) {\r\n                            ress.push(result.body.resources[i].resourceid)\r\n                            resjson[result.body.resources[i].resourceid] = result.body.resources[i]\r\n                            if (i === 0) {\r\n                                setResObj(result.body.resources[i])\r\n                                meths = result.body.resources[i].methods\r\n                                window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + match.params.serviceid + \"?versionid=\" + apidata.versionid + \"&resourceid=\" + result.body.resources[i].resourceid\r\n                            }\r\n                        }\r\n                        delete resjson['dummy']\r\n                        setResJSON(resjson)\r\n                        setResources(ress)\r\n                        setMethods(meths)\r\n                        DataList.ActiveService = serv\r\n                        sessionStorage.setItem('CurrentService', window.btoa(JSON.stringify(serv)))\r\n                        setLoadTimeout(true)\r\n                    }\r\n                    else if (apidata.ref === \"DeleteDeploy\") {\r\n                        // setApiJson({})\r\n                        setDeployId('')\r\n                        clearInterval(interval)\r\n                        intervalFlag = false\r\n                        setResObj({})\r\n                        let apidata = {\r\n                            method: \"GET\",\r\n                            path: \"/service/\" + match.params.productid + \"/\" + match.params.serviceid,\r\n                            headers: true,\r\n                            body: {},\r\n                            ref: \"GetService\",\r\n                        }\r\n                        manageAPIs(apidata)\r\n\r\n                    }\r\n                    else if (apidata.ref === \"DesignService\") {\r\n                        sessionStorage.setItem('servicestatus', result.body.status)\r\n                        setServStatus(result.body.status)\r\n                        setCurServ(result.body)\r\n                        DataList.ActiveService = result.body\r\n                        if (result.body.status !== \"design\") {\r\n                            if (result.body.status !== \"deploying\") {\r\n                                clearInterval(interval)\r\n                            }\r\n                            else {\r\n                                intervalFlag = false\r\n                            }\r\n                            setBtnAction(true)\r\n                        }\r\n                        else {\r\n                            setBtnAction(false)\r\n                        }\r\n                        setLoader(false)\r\n                        sessionStorage.setItem('CurrentService', window.btoa(JSON.stringify(result.body)))\r\n                    }\r\n                    else if (apidata.ref === \"GetService\") {\r\n                        sessionStorage.setItem('servicestatus', result.body.status)\r\n                        setServStatus(result.body.status)\r\n                        setCurServ(result.body)\r\n                        DataList.ActiveService = result.body\r\n                        if (result.body.status !== \"design\") {\r\n                            if (result.body.status !== \"deploying\") {\r\n                                clearInterval(interval)\r\n                            }\r\n                            else {\r\n                                intervalFlag = false\r\n                            }\r\n                            setBtnAction(true)\r\n                        }\r\n                        else {\r\n                            setBtnAction(false)\r\n                        }\r\n                        sessionStorage.setItem('CurrentService', window.btoa(JSON.stringify(result.body)))\r\n                        let apidata = {\r\n                            method: \"GET\",\r\n                            path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + result.body.serviceid + \"/\" + result.body.apiid,\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                            body: {},\r\n                            ref: \"GetAPI\",\r\n                            params: {},\r\n                            status: result.body.hasOwnProperty('status') === true ? result.body.status : \"\"\r\n\r\n                        }\r\n                        manageAPIs(apidata)\r\n                    }\r\n                    else if (apidata.ref === \"GetLogs\") {\r\n                        setFormName(apidata.logname)\r\n                        setJsontoHtml(result.body)\r\n                        setFormDialog(true)\r\n                        setLoader(false)\r\n                    }\r\n                    else if (apidata.ref === \"TriggerAutopopulateMethods\") {\r\n                        let nextAPIdata = {\r\n                            ref: \"AutopopulateMethods\",\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                            body: {\r\n                                actions: result.body,\r\n                                resourcename: resObj.resourcename,\r\n                                versionname: versions[curVersion].versionname\r\n                            },\r\n                            method: \"POST\",\r\n                            path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + match.params.serviceid + \"/\" + curServ.apiid + \"/\" + versions[curVersion].versionid + \"/\" + resObj.resourceid,\r\n                        }\r\n                        manageAPIs(nextAPIdata)\r\n                    }\r\n                    else if (apidata.ref === \"AutopopulateMethods\") {\r\n                        let nextAPidata = {\r\n                            method: \"GET\",\r\n                            path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + match.params.serviceid + \"/\" + curServ.apiid + \"/\" + versions[curVersion].versionid + \"/\" + resObj.resourceid + \"/method\",\r\n                            ref: \"GetAllMethods\",\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                            body: {}\r\n                        }\r\n                        manageAPIs(nextAPidata)\r\n                        setMethods([])\r\n                        setLoadTimeout(false)\r\n                    }\r\n                    else if (apidata.ref === \"CreateLiveResource\" || apidata.ref === \"UpdateLiveResource\") {\r\n                        if (apidata.ref === \"CreateLiveResource\") {\r\n                            if (result.hasOwnProperty('containerstatus')) {\r\n                                if (result.containerstatus === \"success\") {\r\n                                    setMessage(\"Resource Deployment Started\")\r\n                                    setSeverrity(\"info\")\r\n                                    setOpenAlert(true)\r\n                                }\r\n                                else if (result.containerstatus === \"error\") {\r\n                                    setMessage(\"Some internal error, Please try after some time\")\r\n                                    setSeverrity(\"info\")\r\n                                    setOpenAlert(true)\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (apidata.ref === \"UpdateLiveResource\") {\r\n                            if (result.hasOwnProperty('containerstatus')) {\r\n                                if (result.containerstatus === \"success\") {\r\n                                    setMessage(\"Resource Deployment Updated\")\r\n                                    setSeverrity(\"info\")\r\n                                    setOpenAlert(true)\r\n                                }\r\n                                else if (result.containerstatus === \"error\") {\r\n                                    setMessage(\"Some internal error, Please try after some time\")\r\n                                    setSeverrity(\"info\")\r\n                                    setOpenAlert(true)\r\n                                }\r\n                            }\r\n                        }\r\n                        setLoader(false)\r\n                        setLiveInterval(true)\r\n                        liveintervalflag = true\r\n                        liveinterval = window.setInterval(function () {\r\n                            let nextAPIdata = {\r\n                                path: apipath['liveapi'] + \"/resource/\" + match.params.serviceid + \"/\" + versions[curVersion].versionid + \"/\" + resObj.resourceid + \"/output\",\r\n                                showMessage: true,\r\n                                reslist: resources,\r\n                                ref: \"GetLiveResOP\",\r\n                                method: \"GET\",\r\n                                headers: {\r\n                                    headers: true,\r\n                                    apidomain: apidomain.vmurl\r\n                                },\r\n                                body: {},\r\n                                formname: \"Resource Outputs\",\r\n                                show: false,\r\n                                key: \"Resource\",\r\n                                resjson: resObj,\r\n                                versionid: versions[curVersion].versionid\r\n                            }\r\n                            manageAPIs(nextAPIdata)\r\n                        }, 5000)\r\n                    }\r\n                    else if (apidata.ref === \"GetLiveResOP\" || apidata.ref === \"GetLiveResLogs\") {\r\n                        let allresjson = resJSON\r\n                        if (result.hasOwnProperty('resource_output')) {\r\n                            if (apidata.show) {\r\n                                setJsontoHtml(result.resource_output)\r\n                                setFormName(apidata.formname)\r\n                                setLoader(false)\r\n                                setFormDialog(true)\r\n                            }\r\n                            else {\r\n                                if (!allresjson.hasOwnProperty(apidata.resjson.resourceid)) {\r\n                                    allresjson[apidata.resjson.resourceid] = apidata.resjson\r\n                                }\r\n                                allresjson[apidata.resjson.resourceid]['status'] = result.resource_output.status\r\n                                if (apidata.key === \"Resource\" && (apidata.hasOwnProperty('showMessage') && apidata.showMessage)) {\r\n                                    if (result.hasOwnProperty('resource_output')) {\r\n                                        if (result.resource_output.hasOwnProperty('status')) {\r\n                                            if (result.resource_output.status !== \"Initiated\") {\r\n                                                setLiveInterval(false)\r\n                                                clearInterval(liveinterval)\r\n                                                liveintervalflag = false\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (result.resource_output.hasOwnProperty('status')) {\r\n                                setResourceStatus(result.resource_output.status)\r\n                                if (result.resource_output.status !== \"Running\") {\r\n                                    sessionStorage.removeItem('isResourceLive')\r\n                                    if (result.resource_output.status === \"Initiated\") {\r\n                                        if (apidata.key === \"CRLive\") {\r\n                                            setLoader(false)\r\n                                            setMessage('You cannot update in Initiated, Please wait for some time to update')\r\n                                            setSeverrity('info')\r\n                                            setOpenAlert(true)\r\n                                        }\r\n                                        else {\r\n                                            setLiveInterval(true)\r\n                                            if (liveintervalflag === false) {\r\n                                                liveintervalflag = true\r\n                                                liveinterval = window.setInterval(function () {\r\n                                                    let nextAPIdata = {\r\n                                                        path: apipath['liveapi'] + \"/resource/\" + match.params.serviceid + \"/\" + apidata.versionid + \"/\" + apidata.resjson.resourceid + \"/output\",\r\n                                                        showMessage: true,\r\n                                                        ref: \"GetLiveResOP\",\r\n                                                        method: \"GET\",\r\n                                                        headers: {\r\n                                                            headers: true,\r\n                                                            apidomain: apidomain.vmurl\r\n                                                        },\r\n                                                        body: {},\r\n                                                        formname: \"Resource Outputs\",\r\n                                                        show: false,\r\n                                                        key: \"Resource\",\r\n                                                        resjson: apidata.resjson,\r\n                                                        reslist: apidata.reslist,\r\n                                                        versionid: apidata.versionid\r\n                                                    }\r\n                                                    manageAPIs(nextAPIdata)\r\n                                                }, 5000)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    else if (result.resource_output.status === \"Error\" || result.resource_output.status === \"Degraded\") {\r\n                                        setLiveInterval(false)\r\n                                        clearInterval(liveinterval)\r\n                                        liveintervalflag = false\r\n                                        if (apidata.key === \"CRLive\") {\r\n                                            let nextAPIdata = {\r\n                                                ref: \"UpdateLiveResource\",\r\n                                                method: \"POST\",\r\n                                                headers: {\r\n                                                    headers: true,\r\n                                                    apidomain: apidomain.vmurl\r\n                                                },\r\n                                                body: {\r\n                                                    type: \"PYTHON_FLASK\",\r\n                                                    serviceid: match.params.serviceid,\r\n                                                    versionid: versions[curVersion].versionid,\r\n                                                    versionname: versions[curVersion].versionname,\r\n                                                    resourceid: apidata.resjson.resourceid\r\n                                                },\r\n                                                path: apipath['liveapi'] + \"/resource\",\r\n                                                resjson: apidata.resjson\r\n                                            }\r\n                                            manageAPIs(nextAPIdata)\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if (result.resource_output.status === \"Running\") {\r\n                                    sessionStorage.setItem('isResourceLive', \"yes\")\r\n                                    setLiveInterval(false)\r\n                                    clearInterval(liveinterval)\r\n                                    liveintervalflag = false\r\n                                    let meths = [...Methods]\r\n                                    if (meths.length > 0) {\r\n                                        setMethods([])\r\n                                        setMethods(meths)\r\n                                    }\r\n                                    if (apidata.key === \"CRLive\") {\r\n                                        setLiveInterval(true)\r\n                                        setResourceStatus('')\r\n                                        let nextAPIdata = {\r\n                                            ref: \"UpdateLiveResource\",\r\n                                            method: \"POST\",\r\n                                            headers: {\r\n                                                headers: true,\r\n                                                apidomain: apidomain.vmurl\r\n                                            },\r\n                                            body: {\r\n                                                type: \"PYTHON_FLASK\",\r\n                                                serviceid: match.params.serviceid,\r\n                                                versionid: versions[curVersion].versionid,\r\n                                                versionname: versions[curVersion].versionname,\r\n                                                resourceid: apidata.resjson.resourceid\r\n                                            },\r\n                                            path: apipath['liveapi'] + \"/resource/update\",\r\n                                            resjson: apidata.resjson\r\n                                        }\r\n                                        manageAPIs(nextAPIdata)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (result.hasOwnProperty('job_status')) {\r\n                            sessionStorage.removeItem('isResourceLive')\r\n                            setResourceStatus('')\r\n                            if (!allresjson.hasOwnProperty(apidata.resjson.resourceid)) {\r\n                                allresjson[apidata.resjson.resourceid] = apidata.resjson\r\n                            }\r\n                            if (result.job_status === \"Initiated\") {\r\n                                if (apidata.key === \"CRLive\") {\r\n                                    setLoader(false)\r\n                                    setMessage('You cannot update in Initiated, Please wait for some time to update')\r\n                                    setSeverrity('info')\r\n                                    setOpenAlert(true)\r\n                                }\r\n                                else {\r\n                                    setLiveInterval(true)\r\n                                    if (liveintervalflag === false) {\r\n                                        liveintervalflag = true\r\n                                        liveinterval = window.setInterval(function () {\r\n                                            let nextAPIdata = {\r\n                                                path: apipath['liveapi'] + \"/resource/\" + match.params.serviceid + \"/\" + apidata.versionid + \"/\" + apidata.resjson.resourceid + \"/output\",\r\n                                                showMessage: true,\r\n                                                ref: \"GetLiveResOP\",\r\n                                                method: \"GET\",\r\n                                                headers: {\r\n                                                    headers: true,\r\n                                                    apidomain: apidomain.vmurl\r\n                                                },\r\n                                                body: {},\r\n                                                formname: \"Resource Outputs\",\r\n                                                show: false,\r\n                                                key: \"Resource\",\r\n                                                resjson: apidata.resjson,\r\n                                                reslist: apidata.reslist,\r\n                                                versionid: apidata.versionid\r\n                                            }\r\n                                            manageAPIs(nextAPIdata)\r\n                                        }, 5000)\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (result.job_status === \"Not Deployed\") {\r\n                                if (apidata.key === \"CRLive\") {\r\n                                    let nextAPIdata = {\r\n                                        ref: \"CreateLiveResource\",\r\n                                        method: \"POST\",\r\n                                        headers: {\r\n                                            headers: true,\r\n                                            apidomain: apidomain.vmurl\r\n                                        },\r\n                                        body: {\r\n                                            type: \"PYTHON_FLASK\",\r\n                                            serviceid: match.params.serviceid,\r\n                                            versionid: versions[curVersion].versionid,\r\n                                            versionname: versions[curVersion].versionname,\r\n                                            resourceid: apidata.resjson.resourceid\r\n                                        },\r\n                                        path: apipath['liveapi'] + \"/resource\",\r\n                                        resjson: apidata.resjson\r\n                                    }\r\n                                    manageAPIs(nextAPIdata)\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            setResourceStatus('')\r\n                            sessionStorage.removeItem('isResourceLive')\r\n                            if (apidata.show) {\r\n                                setMessage('Some internal error, Please try after sometime')\r\n                                setSeverrity('error')\r\n                                setOpenAlert(true)\r\n                            }\r\n                            setLoader(false)\r\n                        }\r\n                    }\r\n                    else if (apidata.ref === \"DeleteLiveRes\") {\r\n                        setDelInterval(true)\r\n                        setLoader(false)\r\n                        setResourceStatus('Stopping')\r\n                        deltimeout = window.setTimeout(function () {\r\n                            setMessage(\"Resource Deployment deleted\")\r\n                            setResourceStatus('')\r\n                            setSeverrity(\"info\")\r\n                            setOpenAlert(true)\r\n                            setDelInterval(false)\r\n                            let params = { versionid: '', resourceid: resources[curRes] }\r\n                            let apidata1 = {\r\n                                method: \"GET\",\r\n                                path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + curServ.serviceid + \"/\" + curServ.apiid + \"/\" + versions[curVersion].versionid + \"/\" + resources[curRes],\r\n                                ref: \"GetSpecificResource\",\r\n                                headers: {\r\n                                    headers: true,\r\n                                    apidomain: apidomain.vmurl\r\n                                },\r\n                                versionid: versions[curVersion].versionid,\r\n                                params: params,\r\n                                index: 0,\r\n                                resources: resources\r\n                            }\r\n                            manageAPIs(apidata1)\r\n                        }, 60000)\r\n                    }\r\n                    else if (apidata.ref === \"GetGitCredentials\") {\r\n                        GitAPIs.GetGitDetails(apidata, function (success, response) {\r\n                            if (success) {\r\n                                if (Object.keys(response.data).length > 0) {\r\n                                    setIsGitConfigured(true)\r\n                                }\r\n                                else {\r\n                                    window.location.href = window.location.origin + \"/#/app/gitsetup\"\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    else if (apidata.ref === \"GetBranchesByCategory\") {\r\n                        setBranches(result.body)\r\n                        setFormName('Share Service')\r\n                        setFormDialog(true)\r\n                        setLoader(false)\r\n                    }\r\n                    else if(apidata.ref === \"Shareservice\"){\r\n                        setLoader(false)\r\n                        setFormName('')\r\n                        setFormDialog(false)\r\n                        setCurBr({\r\n                            \"Branchname\": \"Select Branch\",\r\n                            \"Name\": \"\"\r\n                        })\r\n                    }\r\n                }\r\n                else {\r\n                    if (result.hasOwnProperty('error_message')) {\r\n                        setMessage(result.error_message)\r\n                    }\r\n                    else if (result.hasOwnProperty('errorMessage')) {\r\n                        setMessage(result.errorMessage)\r\n                    }\r\n                    else {\r\n                        setMessage('Some internal error, Please try after sometime')\r\n                    }\r\n                    if (apidata.ref === \"GetLiveResOP\" || apidata.ref === \"GetLiveResLogs\") {\r\n                        if (apidata.hasOwnProperty('show')) {\r\n                            if (apidata.show) {\r\n                                setSeverrity('error')\r\n                                setOpenAlert(true)\r\n                            }\r\n                            setLoader(false)\r\n                        }\r\n                    }\r\n                    else {\r\n                        setSeverrity('error')\r\n                        setOpenAlert(true)\r\n                        setLoader(false)\r\n                    }\r\n                }\r\n            })\r\n            .catch(err => {\r\n                setMessage(\"Some internal error,Please try after some time.\")\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n                setLoader(false)\r\n            })\r\n    }\r\n\r\n    const handleActions = (apidata) => {\r\n        if (apidata.Action === 'redirect') {\r\n            window.open(apidata.url, '_blank')\r\n        }\r\n        else if (apidata.Action === 'refresh') {\r\n            if (apidata.key === \"api\") {\r\n                clearInterval(interval)\r\n                intervalFlag = false\r\n                setLoader(true)\r\n                setCurServ({})\r\n                setVersions([])\r\n                setResources([])\r\n                setResObj({})\r\n                setMethodJSON({})\r\n                setMethods([])\r\n                setLoadTimeout(false)\r\n                let apidata = {\r\n                    method: \"GET\",\r\n                    path: apipath['designapi'] + \"/service/\" + match.params.productid + \"/\" + match.params.serviceid,\r\n                    headers: {\r\n                        headers: true,\r\n                        apidomain: apidomain.vmurl\r\n                    },\r\n                    body: {},\r\n                    ref: \"GetService\",\r\n                }\r\n                manageAPIs(apidata)\r\n            }\r\n            else if (apidata.key === \"resource\") {\r\n                setResObj({})\r\n                setMethodJSON({})\r\n                setMethods([])\r\n                setLoadTimeout(false)\r\n                if (curServ.hasOwnProperty('status') && (servstatus === \"deploying\" || servstatus === \"running\" || servstatus === \"failed\")) {\r\n                    setResources([])\r\n                    let apidata = {\r\n                        method: \"POST\",\r\n                        path: \"/mock/describe\",\r\n                        headers: true,\r\n                        body: {\r\n                            serviceid: match.params.serviceid,\r\n                            productid: match.params.productid,\r\n                            tenantid: userData.TenantId,\r\n                            userid: userData.EmailId\r\n                        },\r\n                        ref: \"GetDeployDetails\",\r\n                        versionid: versions[curVersion].versionid\r\n                    }\r\n                    manageAPIs(apidata)\r\n                }\r\n                else {\r\n                    let params = { versionid: '', resourceid: resources[curRes] }\r\n                    let apidata = {\r\n                        method: \"GET\",\r\n                        path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + curServ.serviceid + \"/\" + curServ.apiid + \"/\" + versions[curVersion].versionid + \"/\" + resources[curRes],\r\n                        ref: \"GetSpecificResource\",\r\n                        headers: {\r\n                            headers: true,\r\n                            apidomain: apidomain.vmurl\r\n                        },\r\n                        versionid: versions[curVersion].versionid,\r\n                        params: params,\r\n                        index: 0,\r\n                        resources: resources\r\n                    }\r\n                    manageAPIs(apidata)\r\n                }\r\n            }\r\n        }\r\n        else if (apidata.Action === \"confirmation\") {\r\n            setConfApiData(apidata['apidata'])\r\n            setConfirmation(apidata.confirmText)\r\n        }\r\n        else {\r\n            if (apidata.method === \"DELETE\") {\r\n                setLoader(true)\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n    }\r\n\r\n    const handleAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n\r\n    const handleConfirmation = (key) => {\r\n        setConfirmation('')\r\n        if (key) {\r\n            setLoader(true)\r\n            handleActions(confApiData)\r\n            // console.log(confApiData)\r\n            setConfApiData({})\r\n        }\r\n        else {\r\n            setConfApiData({})\r\n        }\r\n    }\r\n\r\n    const Sidebar = () => {\r\n        return (\r\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"flex-start\" position=\"relative\">\r\n                <Box display=\"flex\" style={{ width: '100%' }} mb={1}>\r\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" style={{ width: '100%' }} p={1} bgcolor=\"#e4e7e9\" position=\"relative\">\r\n                        <Box onClick={() => { setShowVersions(!showVersions) }} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" style={{ width: '100%', cursor: \"pointer\" }}>\r\n                            <Box mr={1} display=\"flex\" alignItems=\"center\">\r\n                                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n                                    <Box>\r\n                                        <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>{versions.length > 0 ? versions[curVersion].versionname : ''}</Typography>\r\n                                    </Box>\r\n                                    <Box>\r\n                                        <Typography className={`${typographyClasses.smallText}`}>versions</Typography>\r\n                                    </Box>\r\n                                </Box>\r\n                            </Box>\r\n                            <Box display=\"flex\">\r\n                                {\r\n                                    showVersions === true ?\r\n                                        <ArrowDropUpIcon fontSize=\"small\" />\r\n                                        :\r\n                                        <ArrowDropDownIcon fontSize=\"small\" />\r\n                                }\r\n                            </Box>\r\n                        </Box>\r\n                        {\r\n                            showVersions === true ?\r\n                                <Box position=\"absolute\" bgcolor=\"white\" height={250} style={{ width: '100%' }} boxShadow={1} top={55} left={0} zIndex={1}>\r\n                                    <Box position=\"relative\" style={{ height: '100%' }}>\r\n                                        <Box overflow=\"auto\" height={210}>\r\n                                            {\r\n                                                versions.length > 0 ?\r\n                                                    versions.map((ver, index) => {\r\n                                                        return (\r\n                                                            <Box key={index} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" p={1} bgcolor={index === curVersion ? \"#e6e8f3\" : \"white\"} className={`${sideBarClasses.root} ${sideBarClasses.onhoveritem}`} onClick={() => {\r\n                                                                handleSidebarPopover(\"version\", index)\r\n                                                            }} title={ver.description}>\r\n                                                                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n                                                                    <Typography className={`${typographyClasses.bold} ${typographyClasses.smallText}`} color={index === curVersion ? \"primary\" : \"inherit\"}>{ver.versionname}</Typography>\r\n                                                                    <Typography className={typographyClasses.smallText} color={index === curVersion ? \"primary\" : \"inherit\"}>{ver.versionid}</Typography>\r\n                                                                </Box>\r\n                                                                {\r\n                                                                    btnAction === false ?\r\n                                                                        <Box display=\"flex\"\r\n                                                                            onClick={(event) => {\r\n                                                                                event.stopPropagation()\r\n                                                                                handleActions({\r\n                                                                                    Action: \"confirmation\",\r\n                                                                                    confirmText: \"Are you sure you want to delete this version(\" + ver.versionname + \")?\",\r\n                                                                                    apidata: {\r\n                                                                                        method: \"DELETE\",\r\n                                                                                        path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + curServ.serviceid + \"/\" + curServ.apiid + \"/\" + ver.versionid,\r\n                                                                                        headers: {\r\n                                                                                            headers: true,\r\n                                                                                            apidomain: apidomain.vmurl\r\n                                                                                        },\r\n                                                                                        body: {},\r\n                                                                                        ref: \"DeleteVersion\"\r\n                                                                                    }\r\n                                                                                })\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <DeleteIcon className={typographyClasses.text} color=\"secondary\" />\r\n                                                                        </Box>\r\n                                                                        :\r\n                                                                        null\r\n                                                                }\r\n                                                            </Box>\r\n                                                        )\r\n                                                    })\r\n                                                    :\r\n                                                    <Box p={1}>\r\n                                                        {\r\n                                                            loadTimeout === false ?\r\n                                                                <Loader type=\"block\" />\r\n                                                                :\r\n                                                                <Typography className={typographyClasses.smallText}>No Versions</Typography>\r\n                                                        }\r\n                                                    </Box>\r\n                                            }\r\n                                        </Box>\r\n                                        <Box position=\"absolute\" bottom={0} left={0} borderTop={1} style={{ borderColor: 'lightgray', width: '100%' }} top={210} height={40} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" >\r\n                                            <Box style={{ height: '100%', width: '100%' }} display=\"flex\" alignItems=\"center\">\r\n                                                <Button\r\n                                                    variant=\"text\"\r\n                                                    color=\"primary\"\r\n                                                    onClick={() => {\r\n                                                        setFormData({ 'versionname': '' })\r\n                                                        setFormName('Add Version')\r\n                                                        setFormDialog(true)\r\n                                                    }}\r\n                                                    disabled={btnAction}\r\n                                                >\r\n                                                    <AddIcon className={typographyClasses.smallText} />&nbsp;Version\r\n                                                </Button>\r\n                                            </Box>\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Box>\r\n                                :\r\n                                null\r\n                        }\r\n                    </Box>\r\n                </Box>\r\n                <Box display=\"flex\" style={{ width: '100%' }} mb={1}>\r\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" style={{ width: '100%' }} p={1} bgcolor=\"#e4e7e9\" position=\"relative\">\r\n                        <Box onClick={() => { setShowRes(!showRes) }} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" style={{ width: '100%', cursor: \"pointer\" }}>\r\n                            <Box mr={1} display=\"flex\" alignItems=\"center\">\r\n                                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n                                    <Box>\r\n                                        <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>{resObj.hasOwnProperty('resourcename') === true ? resObj['resourcename'] : \"\"}</Typography>\r\n                                    </Box>\r\n                                    <Box>\r\n                                        <Typography className={`${typographyClasses.smallText}`}>Resources</Typography>\r\n                                    </Box>\r\n                                </Box>\r\n                            </Box>\r\n                            <Box display=\"flex\">\r\n                                {\r\n                                    showRes === true ?\r\n                                        <ArrowDropUpIcon fontSize=\"small\" />\r\n                                        :\r\n                                        <ArrowDropDownIcon fontSize=\"small\" />\r\n                                }\r\n                            </Box>\r\n                        </Box>\r\n                        {\r\n                            showRes === true ?\r\n                                <Box position=\"absolute\" bgcolor=\"white\" height={250} style={{ width: '100%' }} boxShadow={1} top={55} left={0}>\r\n                                    <Box position=\"relative\" style={{ height: '100%' }}>\r\n                                        <Box overflow=\"auto\" height={210}>\r\n                                            {\r\n                                                resources.length > 0 && Object.keys(resJSON).length > 0 ?\r\n                                                    resources.map((res, index) => {\r\n                                                        return (\r\n                                                            <Box key={index} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" p={1} bgcolor={curRes === index ? \"#e6e8f3\" : \"white\"} className={`${sideBarClasses.root} ${sideBarClasses.onhoveritem}`} onClick={() => {\r\n                                                                if (curRes !== index) {\r\n                                                                    handleSidebarPopover(\"resource\", index)\r\n                                                                }\r\n                                                            }}>\r\n                                                                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n                                                                    <Typography className={` ${typographyClasses.bold} ${typographyClasses.smallText}`} color={curRes === index ? \"primary\" : \"inherit\"}>{resJSON.hasOwnProperty(res) === true ? resJSON[res]['resourcename'] : \"\"}</Typography>\r\n                                                                    <Typography className={typographyClasses.smallText} color={index === curRes ? \"primary\" : \"inherit\"}>{res}</Typography>\r\n                                                                </Box>\r\n                                                                {\r\n                                                                    btnAction === false ?\r\n                                                                        <Box display=\"flex\"\r\n                                                                            disabled={resourceStatus === \"Running\" ? true : false}\r\n                                                                            onClick={(event) => {\r\n                                                                                event.stopPropagation()\r\n                                                                                handleActions({\r\n                                                                                    Action: \"confirmation\",\r\n                                                                                    confirmText: \"Are you sure you want to delete this resource(\" + res + \")?\",\r\n                                                                                    apidata: {\r\n                                                                                        method: \"DELETE\",\r\n                                                                                        path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + curServ.serviceid + \"/\" + curServ.apiid + \"/\" + versions[curVersion].versionid + \"/\" + res,\r\n                                                                                        headers: {\r\n                                                                                            headers: true,\r\n                                                                                            apidomain: apidomain.vmurl\r\n                                                                                        },\r\n                                                                                        body: {},\r\n                                                                                        ref: \"DeleteResource\",\r\n                                                                                        resourceid: res\r\n                                                                                    }\r\n                                                                                })\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <DeleteIcon className={typographyClasses.text} color=\"secondary\" />\r\n                                                                        </Box>\r\n                                                                        :\r\n                                                                        null\r\n                                                                }\r\n                                                            </Box>\r\n                                                        )\r\n                                                    })\r\n                                                    :\r\n                                                    Object.keys(resObj).length > 0 ?\r\n                                                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" p={1} bgcolor=\"#e6e8f3\" className={`${sideBarClasses.root} ${sideBarClasses.onhoveritem}`}>\r\n                                                            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n                                                                <Typography className={` ${typographyClasses.bold} ${typographyClasses.smallText}`} color={\"primary\"}>{resObj['resourcename']}</Typography>\r\n                                                                <Typography className={typographyClasses.smallText} color={\"primary\"}>{resObj['resourceid']}</Typography>\r\n                                                            </Box>\r\n                                                            {\r\n                                                                btnAction === false ?\r\n                                                                    <Box display=\"flex\"\r\n                                                                        onClick={(event) => {\r\n                                                                            event.stopPropagation()\r\n                                                                            handleActions({\r\n                                                                                Action: \"confirmation\",\r\n                                                                                confirmText: \"Are you sure you want to delete this resource(\" + resObj['resourcename'] + \")?\",\r\n                                                                                apidata: {\r\n                                                                                    method: \"DELETE\",\r\n                                                                                    path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + curServ.serviceid + \"/\" + curServ.apiid + \"/\" + versions[curVersion].versionid + \"/\" + resObj['resourceid'],\r\n                                                                                    headers: {\r\n                                                                                        headers: true,\r\n                                                                                        apidomain: apidomain.vmurl\r\n                                                                                    },\r\n                                                                                    body: {},\r\n                                                                                    ref: \"DeleteResource\",\r\n                                                                                    resourceid: resObj['resourceid']\r\n                                                                                }\r\n                                                                            })\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <DeleteIcon className={typographyClasses.text} color=\"secondary\" />\r\n                                                                    </Box>\r\n                                                                    :\r\n                                                                    null\r\n                                                            }\r\n                                                        </Box>\r\n                                                        :\r\n                                                        <Box p={1}>\r\n                                                            {\r\n                                                                loadTimeout === false ?\r\n                                                                    <Loader type=\"block\" />\r\n                                                                    :\r\n                                                                    <Typography className={typographyClasses.smallText}>No Resources</Typography>\r\n                                                            }\r\n                                                        </Box>\r\n                                            }\r\n                                        </Box>\r\n                                        <Box position=\"absolute\" bottom={0} left={0} borderTop={1} style={{ borderColor: 'lightgray', width: '100%' }} top={210} height={40} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                                            <Box style={{ height: '100%', width: '100%' }} display=\"flex\" alignItems=\"center\">\r\n                                                <Button\r\n                                                    variant=\"text\"\r\n                                                    color=\"primary\"\r\n                                                    onClick={() => {\r\n                                                        setFormData({ 'resourcename': '' })\r\n                                                        setFormName('Add Resource')\r\n                                                        setFormDialog(true)\r\n                                                    }}\r\n                                                    disabled={btnAction}\r\n                                                >\r\n                                                    <AddIcon className={typographyClasses.smallText} />&nbsp;Resource\r\n                                                </Button>\r\n                                            </Box>\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Box>\r\n                                :\r\n                                null\r\n                        }\r\n                    </Box>\r\n                </Box>\r\n            </Box >\r\n        )\r\n    }\r\n\r\n    const handleSidebarPopover = (key, value) => {\r\n        if (key === \"version\") {\r\n            if (value === curVersion) {\r\n                setShowVersions(false)\r\n            }\r\n            else {\r\n                setLoadTimeout(false)\r\n                window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + match.params.serviceid + \"?versionid=\" + versions[value].versionid\r\n\r\n                setResources([])\r\n                let ress = versions[value].resources\r\n                if (!ress.length) {\r\n                    setLoadTimeout(true)\r\n                    setLoader(false)\r\n                    setFormName('Add Resource')\r\n                    setFormDialog(true)\r\n                }\r\n                // setLoader(true)\r\n                setMethodProps({})\r\n                setCurVersion(value)\r\n                setResObj({})\r\n                setResources(ress)\r\n                setMethods([])\r\n                setCurRes(0)\r\n                setShowVersions(false)\r\n                if (ress.length) {\r\n                    window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + match.params.serviceid + \"?versionid=\" + versions[value].versionid + \"&resourceid=\" + ress[0]\r\n\r\n                    for (let i = 0; i < ress.length; i++) {\r\n                        let nextAPIdata = {\r\n                            method: \"GET\",\r\n                            path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + curServ.serviceid + \"/\" + curServ.apiid + \"/\" + versions[value].versionid + \"/\" + ress[i],\r\n                            ref: \"GetSpecificResource\",\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                            index: i === ress.length - 1 && ress.length > 1 ? -2 : i,\r\n                            resources: ress,\r\n                            versionid: versions[value].versionid\r\n                        }\r\n                        manageAPIs(nextAPIdata)\r\n                    }\r\n                }\r\n                else {\r\n                    window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + match.params.serviceid + \"?versionid=\" + versions[value].versionid\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (value === curRes) {\r\n                setShowRes(false)\r\n            }\r\n            else {\r\n                setLoadTimeout(false)\r\n                window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + match.params.serviceid + \"?versionid=\" + versions[curVersion].versionid + \"&resourceid=\" + resources[value]\r\n                setResObj({})\r\n                setMainBlk('actions')\r\n                setMethodProps({})\r\n                setCurRes(value)\r\n                let apidata = {\r\n                    method: \"GET\",\r\n                    path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + curServ.serviceid + \"/\" + curServ.apiid + \"/\" + versions[curVersion].versionid + \"/\" + resources[value],\r\n                    ref: \"GetSpecificResource\",\r\n                    headers: {\r\n                        headers: true,\r\n                        apidomain: apidomain.vmurl\r\n                    },\r\n                    versionid: versions[curVersion].versionid,\r\n                    params: {},\r\n                    index: 0\r\n                }\r\n                manageAPIs(apidata)\r\n            }\r\n        }\r\n    }\r\n\r\n    const handlePanelChange = (method, index) => {\r\n        let methprops = methodProps\r\n        methprops[method.methodid]['expanded'] = !methprops[method.methodid]['expanded']\r\n        setMethodProps(methprops)\r\n        let meths = [...Methods]\r\n        setMethods([])\r\n        setMethods(meths)\r\n        if (methprops[method.methodid]['expanded']) {\r\n            setShowSideBar(false)\r\n            var elmnt = document.getElementById(method.methodid);\r\n            elmnt.scrollIntoView();\r\n            setCurMethod(index)\r\n            let nextAPidata = {\r\n                method: \"GET\",\r\n                path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + match.params.serviceid + \"/\" + curServ.apiid + \"/\" + versions[curVersion].versionid + \"/\" + resObj.resourceid + \"/\" + method.methodid,\r\n                ref: \"GetSpecificMethod\",\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                body: {}\r\n            }\r\n            manageAPIs(nextAPidata)\r\n        }\r\n    };\r\n\r\n    const PopulateMethods = () => {\r\n        return (\r\n            <Box>\r\n                {\r\n                    Methods.map((method, metindex) => {\r\n                        if (!methodProps.hasOwnProperty(method.methodid)) {\r\n                            methodProps[method.methodid] = {\r\n                                expanded: false,\r\n                                ipeditor: {\r\n                                    code: method.inputschema,\r\n                                    readonly: true\r\n                                },\r\n                                opeditor: {\r\n                                    code: method.outputschema,\r\n                                    readonly: true\r\n                                },\r\n                                req: {\r\n                                    code: method.requirements,\r\n                                    readonly: true\r\n                                },\r\n                                tab: 0,\r\n                                index: metindex,\r\n                                method: method.methodtype,\r\n                                apiurl: method.apiurl,\r\n                                headers: method.headers,\r\n                            }\r\n                        }\r\n                        return (\r\n                            <Accordion key={method.methodid} square TransitionProps={{ unmountOnExit: true }} style={{ marginBottom: '4px' }} defaultExpanded expanded={methodProps[method.methodid]['expanded']} onChange={() => handlePanelChange(method, metindex)} id={method.methodid}>\r\n                                <AccordionSummary {...expansionProps(\"method-type\", metindex)} expandIcon={<ExpandMoreIcon fontSize=\"small\" />} style={{ minHeight: 35, height: 40, margin: '0 !important', padding: 5, border: '1px solid' }} className={`${accordionClassess[method.methodtype]} ${accordionClassess['bd' + method.methodtype]}`}>\r\n                                    <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%' }} justifyContent=\"space-between\">\r\n                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" p={1} pt={0.5} pb={0.5} minWidth={75} className={accordionClassess['bg' + method.methodtype]} color=\"white\" mr={3}>\r\n                                                <Box display=\"flex\">\r\n                                                    <Typography color=\"inherit\" className={`${typographyClasses.smallText}`}>{method.methodtype}</Typography>\r\n                                                </Box>\r\n                                            </Box>\r\n                                            {\r\n                                                resourceStatus === \"Running\" ?\r\n                                                    <Box display=\"flex\" alignItems=\"center\">\r\n                                                        <Box>\r\n                                                            <Box display=\"flex\" alignItems=\"center\">\r\n                                                                <Typography className={`${typographyClasses.smallText}`} align=\"left\">{window.location.origin}/liveapp/{match.params.serviceid}/{versions[curVersion].versionname}/{resObj.resourcename}{method.hasOwnProperty('methodpath') === true ? method.methodpath : \"\"}</Typography>\r\n                                                                <IconButton\r\n                                                                    color=\"inherit\"\r\n                                                                    title=\"Copy\"\r\n                                                                    onClick={(e) => {\r\n                                                                        e.stopPropagation()\r\n                                                                        let strtocp = window.location.origin + \"/liveapp/\" + match.params.serviceid + \"/\" + versions[curVersion].versionname + \"/\" + resObj.resourcename\r\n                                                                        let metpth = method.hasOwnProperty('methodpath') === true ? method.methodpath : \"\"\r\n                                                                        strtocp = strtocp + metpth\r\n\r\n                                                                        copyText(strtocp)\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <FileCopyIcon fontSize=\"small\" style={{ fontSize: '0.8rem' }} />\r\n                                                                </IconButton>\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                    :\r\n                                                    <Box>\r\n                                                        <Typography color=\"inherit\" className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>/{versions[curVersion].versionname}/{resObj.resourcename}{method.methodpath}</Typography>\r\n                                                    </Box>\r\n                                            }\r\n                                        </Box>\r\n                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                            <Box mr={1}>\r\n                                                <Button\r\n                                                    variant=\"text\"\r\n                                                    color=\"secondary\"\r\n                                                    onClick={(e) => {\r\n                                                        e.stopPropagation()\r\n                                                        handleActions({\r\n                                                            Action: \"confirmation\",\r\n                                                            confirmText: \"Are you sure you want to delete this method?\",\r\n                                                            apidata: {\r\n                                                                method: \"DELETE\",\r\n                                                                path: apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + curServ.serviceid + \"/\" + curServ.apiid + \"/\" + versions[curVersion].versionid + \"/\" + resources[curRes] + \"/\" + method.methodid,\r\n                                                                headers: {\r\n                                                                    headers: true,\r\n                                                                    apidomain: apidomain.vmurl\r\n                                                                },\r\n                                                                ref: \"DeleteMethod\"\r\n                                                            }\r\n                                                        })\r\n                                                    }}\r\n                                                    disabled={btnAction}\r\n                                                >\r\n                                                    <DeleteIcon className={typographyClasses.text} />\r\n                                                </Button>\r\n                                            </Box>\r\n                                            {\r\n                                                method.hasOwnProperty('state') === true ?\r\n                                                    method.state.hasOwnProperty('status') === true ?\r\n                                                        method.state.hasOwnProperty(method.state.status) === true ?\r\n                                                            <Box mr={1} style={{ cursor: 'pointer' }} borderRadius={16} height={28} p={0.5} pl={2} pr={2} className={statusClasses[method.state.status]} onClick={(e) => {\r\n                                                                e.stopPropagation()\r\n                                                                setCurstate(method.state.status)\r\n                                                                setJsontoHtml(method.state[method.state.status])\r\n                                                                setFormName('Status')\r\n                                                                setFormDialog(true)\r\n                                                            }}>\r\n                                                                <Typography className={`${typographyClasses.root} ${typographyClasses.smallText}`}>Method Status - {method.state.status}</Typography>\r\n                                                            </Box>\r\n                                                            :\r\n                                                            null\r\n                                                        :\r\n                                                        null\r\n                                                    :\r\n                                                    null\r\n                                            }\r\n                                            {\r\n                                                method.hasOwnProperty('output') === true ?\r\n                                                    <Box mr={1} height={28} style={{ cursor: 'pointer', borderColor: 'gray' }} border={1} p={0.5} pl={2} pr={2} onClick={(e) => {\r\n                                                        e.stopPropagation()\r\n                                                        setJsontoHtml(method.output)\r\n                                                        setFormName('Outputs')\r\n                                                        setFormDialog(true)\r\n                                                    }}>\r\n                                                        <Typography className={typographyClasses.smallText}>Output</Typography>\r\n                                                    </Box>\r\n                                                    :\r\n                                                    null\r\n\r\n                                            }\r\n                                            {\r\n                                                method.hasOwnProperty('logpath') === true ?\r\n                                                    <Box style={{ cursor: 'pointer', borderColor: 'gray' }} border={1} mr={1} height={28} p={0.5} pl={2} pr={2} onClick={(e) => {\r\n                                                        e.stopPropagation()\r\n                                                        setLoader(true)\r\n                                                        let apidata = {\r\n                                                            path: \"/mock/log\",\r\n                                                            headers: true,\r\n                                                            method: \"POST\",\r\n                                                            body: {\r\n                                                                logpath: method.logpath\r\n                                                            },\r\n                                                            ref: \"GetLogs\",\r\n                                                            logname: \"Method Logs\"\r\n                                                        }\r\n                                                        manageAPIs(apidata)\r\n                                                    }}>\r\n                                                        <Typography className={typographyClasses.smallText}>Logs</Typography>\r\n                                                    </Box>\r\n                                                    :\r\n                                                    null\r\n\r\n                                            }\r\n                                        </Box>\r\n                                    </Box>\r\n                                </AccordionSummary>\r\n                                <AccordionDetails style={{ padding: 0 }}>\r\n                                    <Box style={{ width: '100%' }} className={accordionClassess['bd' + method.methodtype]} border={1} borderTop={0}>\r\n                                        {\r\n                                            methodJSON.hasOwnProperty(method.methodid) === true ?\r\n                                                <MethodTabs methodid={method.methodid} methodtype={method.methodtype} codetype={method.language} methodjson={Methods[curMethod].methodid === method.methodid ? methodJSON[method.methodid] : method} />\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </Box>\r\n                                </AccordionDetails>\r\n                            </Accordion>\r\n                        )\r\n                    })\r\n                }\r\n            </Box >\r\n        )\r\n    }\r\n\r\n    function copyText(key) {\r\n        var tempIp = document.createElement('input')\r\n        tempIp.value = key\r\n        tempIp.style.position = 'fixed'\r\n        tempIp.setAttribute('id', 'temp-copy')\r\n        var root = document.getElementById('root')\r\n        root.appendChild(tempIp)\r\n        let copytext = document.getElementById('temp-copy')\r\n        copytext.select()\r\n        document.execCommand(\"copy\");\r\n        setMessage(\"Text copied\")\r\n        setSeverrity('success')\r\n        setOpenAlert(true)\r\n        tempIp.remove()\r\n    }\r\n\r\n    const handleMethoTab = (methodid, event, newValue) => {\r\n        let methprops = methodProps\r\n        methprops[methodid]['tab'] = newValue\r\n        setMethodProps(methprops);\r\n        let meths = [...Methods]\r\n        setMethods([])\r\n        setMethods(meths)\r\n    };\r\n\r\n    const MethodTabs = ({ methodid, ...props }) => {\r\n        const { codetype, methodtype, methodjson } = props\r\n        return (\r\n            <div className={tabClasses.root}>\r\n                <AppBar position=\"static\" color=\"default\" className={tabClasses.header}>\r\n                    <Tabs\r\n                        value={methodProps[methodid]['tab']}\r\n                        onChange={handleMethoTab.bind(this, methodid)}\r\n                        variant=\"scrollable\"\r\n                        scrollButtons=\"auto\"\r\n                        aria-label=\"Main auto tabs example\"\r\n                    >\r\n                        <Tab label={<Typography className={typographyClasses.smallText}>Functions</Typography>} {...TabProps(\"Main\", 0)} />\r\n                        {/* <Tab label={<Typography className={typographyClasses.smallText}>Test Case</Typography>} {...TabProps(\"Main\", 1)} /> */}\r\n                    </Tabs>\r\n                </AppBar>\r\n                <TabPanel value={methodProps[methodid]['tab']} index={0}>\r\n                    {\r\n                        Methods.length > 0 ?\r\n                            <FunctionEditor\r\n                                methodid={methodid}\r\n                                btnAction={btnAction}\r\n                                codetype={codetype}\r\n                                methodtype={methodtype}\r\n                                methodJson={methodjson}\r\n                                serviceid={match.params.serviceid}\r\n                                productid={match.params.productid}\r\n                                apiid={curServ.apiid}\r\n                                versionid={versions[curVersion].versionid}\r\n                                resourceid={resObj['resourceid']}\r\n                                versionname={versions[curVersion].versionname}\r\n                                datasource={methodjson['datasource']}\r\n                            />\r\n                            :\r\n                            <Box></Box>\r\n                    }\r\n                </TabPanel>\r\n                {/* <TabPanel value={methodProps[functionid]['tab']} index={1}>\r\n                    <Box p={1} pt={0} pb={0}>\r\n                        <TestCaseComp functionid={functionid} btnAction={btnAction} />\r\n                    </Box>\r\n                </TabPanel> */}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const handleFormDataChage = (field, event) => {\r\n        let formFields = formData;\r\n        if (field === \"resourcename\") {\r\n            const re = /^[a-z][a-z0-9_]*[a-z0-9]*$/;\r\n            if (re.test(event.target.value)) {\r\n                formFields[field] = event.target.value.toLowerCase();\r\n                setresname(event.target.value.toLowerCase())\r\n            }\r\n            else if (event.target.value === \"\") {\r\n                formFields[field] = event.target.value.toLowerCase();\r\n                setresname(event.target.value.toLowerCase())\r\n            }\r\n        }\r\n        else if (field === \"versionname\") {\r\n            const re = /^[a-z][a-z0-9_]*[a-z0-9]*$/;\r\n            if (re.test(event.target.value)) {\r\n                formFields[field] = event.target.value.toLowerCase();\r\n                setvername(event.target.value.toLowerCase())\r\n            }\r\n            else if (event.target.value === \"\") {\r\n                formFields[field] = event.target.value.toLowerCase();\r\n                setvername(event.target.value.toLowerCase())\r\n            }\r\n        }\r\n        else {\r\n            formFields[field] = event.target.value;\r\n            setFormData(formFields);\r\n        }\r\n    }\r\n\r\n    const FormDialogSubmit = () => {\r\n        setLoader(true)\r\n        let canSubmit = true, requireAttrs = [], path = '', ref = ''\r\n        if (formName === \"Add Resource\") {\r\n            requireAttrs.push('resourcename')\r\n            // requireAttrs.push('databasetype')\r\n            path = apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + curServ.serviceid + \"/\" + curServ.apiid + \"/\" + versions[curVersion].versionid + \"/resource\"\r\n            ref = \"NewResource\"\r\n        }\r\n        else if (formName === \"Add Version\") {\r\n            requireAttrs.push('versionname')\r\n            path = apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + curServ.serviceid + \"/\" + curServ.apiid + \"/version\"\r\n            ref = \"NewVersion\"\r\n        }\r\n        else if (formName === \"Add Action\") {\r\n            if (formData.hasOwnProperty('path') && formData.path !== \"\") {\r\n                let fmdata = formData\r\n                fmdata['path'] = \"/\" + fmdata['path']\r\n                setFormData(fmdata)\r\n            }\r\n            requireAttrs.push('methodtype')\r\n            path = apipath['designapi'] + \"/api/\" + match.params.productid + \"/\" + curServ.serviceid + \"/\" + curServ.apiid + \"/\" + versions[curVersion].versionid + \"/\" + resources[curRes] + \"/method\"\r\n            ref = \"NewMethod\"\r\n        }\r\n        else if (formName === \"Share Service\") {\r\n            requireAttrs.push('commitmessage')\r\n            path = apipath['datastore'] + \"/git/designpush/\" + match.params.productid + \"/\" + match.params.serviceid\r\n            ref = \"Shareservice\"\r\n            if (curBr['Branchname'] === \"\") {\r\n                setMessage('Please select branch to publish')\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n                setLoader(false)\r\n            }\r\n            formData['Branchname'] = curBr['Branchname']\r\n            formData['Name'] = curBr['Name']\r\n        }\r\n        for (let i = 0; i < requireAttrs.length; i++) {\r\n            if (formData[requireAttrs[i]] === undefined || formData[requireAttrs[i]] === \"\" || formData[requireAttrs[i]] === []) {\r\n                canSubmit = false\r\n                setLoader(false)\r\n                setMessage(\"Please fill the required details.\")\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n            }\r\n        }\r\n        if (canSubmit) {\r\n            let apidata = {\r\n                method: \"POST\",\r\n                path: path,\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                body: formData,\r\n                ref: ref\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n    }\r\n\r\n    const handleAPIInterval = (verid) => {\r\n        interval = setInterval(function () {\r\n            if (sessionStorage.getItem('servicestatus') !== \"design\" && sessionStorage.getItem('servicestatus') !== \"published\" && intervalFlag) {\r\n                setResObj({})\r\n                let apidata = {\r\n                    method: \"POST\",\r\n                    path: \"/mock/describe\",\r\n                    headers: true,\r\n                    body: {\r\n                        serviceid: match.params.serviceid,\r\n                        productid: match.params.productid,\r\n                        tenantid: userData.TenantId,\r\n                        userid: userData.EmailId\r\n                    },\r\n                    ref: \"GetDeployDetails\",\r\n                    versionid: verid\r\n                }\r\n                manageAPIs(apidata)\r\n            }\r\n            else {\r\n                clearInterval(interval)\r\n            }\r\n        }, 60000)\r\n    }\r\n\r\n    const handleAddMethodTrigger = (tablejson) => {\r\n        setLoadTimeout(false)\r\n        let apidata = {\r\n            ref: \"TriggerAutopopulateMethods\",\r\n            headers: {\r\n                headers: true,\r\n                apidomain: apidomain.vmurl\r\n            },\r\n            body: {\r\n                servicetype: \"dynamodb_eks_flask\",\r\n                tablename: tablejson.tablename,\r\n                indexes: tablejson.indexes,\r\n                schema: tablejson.schema,\r\n                dbtype: \"dynamodb\",\r\n                tableid: tablejson.tableid,\r\n                dbid: tablejson.dbid\r\n            },\r\n            method: \"POST\",\r\n            path: apipath['designapi'] + \"/api/snippetmethods\"\r\n        }\r\n        manageAPIs(apidata)\r\n    }\r\n\r\n    const handleMainBlock = (key) => {\r\n        setMainBlk(key)\r\n    }\r\n\r\n    const ResourceOpStatus = () => {\r\n        return (\r\n            <Box>\r\n                {\r\n                    Object.keys(resObj).length > 0 ?\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                            {\r\n                                resourceStatus !== \"\" && resourceStatus !== \"Stopping\" ?\r\n                                    <Box display=\"flex\" alignItems=\"center\">\r\n                                        <Box mr={1} style={{ cursor: 'pointer' }} borderRadius={16} height={28} p={0.5} pl={2} pr={2} className={statusClasses[resourceStatus]}>\r\n                                            <Typography className={`${typographyClasses.root} ${typographyClasses.smallText}`}>Resource Status - {resourceStatus}</Typography>\r\n                                        </Box>\r\n                                        <Box style={{ cursor: 'pointer', borderColor: 'gray' }} border={1} mr={1} height={28} p={0.5} pl={2} pr={2} onClick={(e) => {\r\n                                            e.stopPropagation()\r\n                                            setLoader(true)\r\n                                            let apidata = {\r\n                                                path: apipath['liveapi'] + \"/resource/\" + match.params.serviceid + \"/\" + versions[curVersion].versionid + \"/\" + resObj.resourceid + \"/output\",\r\n                                                headers: {\r\n                                                    headers: true,\r\n                                                    apidomain: apidomain.vmurl\r\n                                                },\r\n                                                method: \"GET\",\r\n                                                body: {},\r\n                                                ref: \"GetLiveResOP\",\r\n                                                formname: \"Resource Outputs\",\r\n                                                show: true,\r\n                                                key: \"Resource\",\r\n                                                resjson: resObj,\r\n                                                reslist: resources,\r\n                                                versionid: versions[curVersion].versionid\r\n                                            }\r\n                                            manageAPIs(apidata)\r\n                                        }}>\r\n                                            <Typography className={typographyClasses.smallText}>Output</Typography>\r\n                                        </Box>\r\n                                        <Box style={{ cursor: 'pointer', borderColor: 'gray' }} border={1} mr={1} height={28} p={0.5} pl={2} pr={2} onClick={(e) => {\r\n                                            e.stopPropagation()\r\n                                            setLoader(true)\r\n                                            setLoader(true)\r\n                                            let apidata = {\r\n                                                path: apipath['liveapi'] + \"/resource/\" + match.params.serviceid + \"/\" + versions[curVersion].versionid + \"/\" + resObj.resourceid + \"/logs\",\r\n                                                headers: {\r\n                                                    headers: true,\r\n                                                    apidomain: apidomain.vmurl\r\n                                                },\r\n                                                method: \"GET\",\r\n                                                body: {},\r\n                                                ref: \"GetLiveResLogs\",\r\n                                                formname: \"Resource Logs\",\r\n                                                show: true,\r\n                                                key: \"Resource\",\r\n                                                resjson: resObj,\r\n                                                reslist: resources\r\n                                            }\r\n                                            manageAPIs(apidata)\r\n                                        }}>\r\n                                            <Typography className={typographyClasses.smallText}>Logs</Typography>\r\n                                        </Box>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </Box>\r\n                        :\r\n                        null\r\n                }\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    const CheckResourceForLive = () => {\r\n        if (sessionStorage.getItem('isDBLive') && sessionStorage.getItem('isDBLive') === \"yes\") {\r\n            if (sessionStorage.getItem('isTableLive') && (sessionStorage.getItem('isTableLive') === \"yes\" || sessionStorage.getItem('isTableLive') !== \"Stopping\")) {\r\n                if (Methods.length > 0) {\r\n                    let apidata = {\r\n                        ref: \"GetLiveResOP\",\r\n                        path: apipath['liveapi'] + \"/resource/\" + match.params.serviceid + \"/\" + versions[curVersion].versionid + \"/\" + resObj.resourceid + \"/output\",\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            headers: true,\r\n                            apidomain: apidomain.vmurl\r\n                        },\r\n                        body: {},\r\n                        formname: \"Resource Outputs\",\r\n                        show: false,\r\n                        key: \"CRLive\",\r\n                        resjson: resObj,\r\n                        reslist: resources,\r\n                        versionid: versions[curVersion].versionid\r\n                    }\r\n                    manageAPIs(apidata)\r\n                }\r\n                else {\r\n                    setMessage('No actions are there, please add atleast one action.')\r\n                    setSeverrity('info')\r\n                    setOpenAlert(true)\r\n                }\r\n            }\r\n            else {\r\n                setMessage('One or more Tables are not in running state')\r\n                setSeverrity('info')\r\n                setOpenAlert(true)\r\n            }\r\n        }\r\n        else {\r\n            setMessage('No DB are in running state.')\r\n            setSeverrity('info')\r\n            setOpenAlert(true)\r\n        }\r\n    }\r\n\r\n    const handleBranchesPopover = (br) => {\r\n        setCurBr(br)\r\n        setShowBranches(false)\r\n    }\r\n\r\n    const PopulateBranches = () => {\r\n        return (\r\n            <Box display=\"flex\" style={{ width: '100%' }} mt={1}>\r\n                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" style={{ width: '100%', border: '1px solid gray' }} position=\"relative\">\r\n                    <Box onClick={() => { setShowBranches(!showBranches) }} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" style={{ width: '100%', cursor: \"pointer\" }} p={1}>\r\n                        <Box mr={1} display=\"flex\" alignItems=\"center\">\r\n                            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\" >\r\n                                <Box>\r\n                                    <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>{curBr['Branchname']}</Typography>\r\n                                </Box>\r\n                                <Box>\r\n                                    <Typography color=\"inherit\" className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>{curBr['Name']}</Typography>\r\n                                </Box>\r\n                            </Box>\r\n                        </Box>\r\n                        <Box display=\"flex\">\r\n                            {\r\n                                showBranches === true ?\r\n                                    <ArrowDropUpIcon fontSize=\"small\" />\r\n                                    :\r\n                                    <ArrowDropDownIcon fontSize=\"small\" />\r\n                            }\r\n                        </Box>\r\n                    </Box>\r\n                    {\r\n                        showBranches === true ?\r\n                            <Box height={250} style={{ width: '100%', borderTop: '1px solid gray' }}>\r\n                                <Box position=\"relative\" style={{ height: '100%' }}>\r\n                                    <Box overflow=\"auto\" height={210}>\r\n                                        {\r\n                                            branches.length > 0 ?\r\n                                                branches.map((br, index) => {\r\n                                                    return (\r\n                                                        <Box key={index} display=\"flex\" alignItems=\"center\" borderBottom={1} style={{ borderColor: 'lightgray' }} justifyContent=\"space-between\" p={1} bgcolor={curBr.Branchname === br.Branchname ? \"#e6e8f3\" : \"\"} className={`${sideBarClasses.root} ${sideBarClasses.onhoveritem}`} onClick={() => {\r\n                                                            handleBranchesPopover(br)\r\n                                                        }}>\r\n                                                            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n                                                                <Typography className={`${typographyClasses.smallText}`} color={curBr.Branchname === br.Branchname ? \"primary\" : \"inherit\"}>{br['Branchname']}</Typography>\r\n                                                                <Typography className={typographyClasses.smallText} color={curBr.Branchname === br.Branchname ? \"primary\" : \"inherit\"}>{br['Name']}</Typography>\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                    )\r\n                                                })\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </Box>\r\n                                </Box>\r\n                            </Box>\r\n                            :\r\n                            null\r\n                    }\r\n                </Box>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                loader === true ?\r\n                    <Loader type=\"page\" open={true} />\r\n                    :\r\n                    null\r\n            }\r\n            {\r\n                Object.keys(curServ).length > 0 ?\r\n                    <Helmet>\r\n                        <title>Services - {curServ.servicename}</title>\r\n                    </Helmet>\r\n                    :\r\n                    null\r\n            }\r\n            <Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n            <TopNav />\r\n            <Container className={containerClasses.root}>\r\n                <Box style={{ width: '100%' }}>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" borderBottom={1} style={{ borderColor: 'lightgray' }} p={1}>\r\n                        <Breadcrumbs separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\">\r\n                            <Box\r\n                                style={{ cursor: \"pointer\" }}\r\n                                onClick={() => {\r\n                                    sessionStorage.removeItem('CurrentProduct')\r\n                                    sessionStorage.removeItem('Services')\r\n                                    sessionStorage.removeItem('CurrentService')\r\n                                    DataList.ActiveService = {}\r\n                                    DataList.ActiveProduct = {}\r\n                                    DataList.ServiceList = []\r\n                                    window.location.href = window.location.origin + \"/#/app/products\"\r\n                                }}\r\n                            >\r\n                                <Typography className={`${typographyClasses.text} ${'text-design'} ${typographyClasses.bold}`}>Products</Typography>\r\n                            </Box>\r\n                            <Typography className={typographyClasses.smallText}>{match.params.productid}</Typography>\r\n                            <Box\r\n                                style={{ cursor: \"pointer\" }}\r\n                                onClick={() => {\r\n                                    sessionStorage.removeItem('Services')\r\n                                    sessionStorage.removeItem('CurrentService')\r\n                                    DataList.ActiveService = {}\r\n                                    DataList.ServiceList = []\r\n                                    window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services\"\r\n                                }}\r\n                            >\r\n                                <Typography className={`${typographyClasses.smallText} ${'text-design'} ${typographyClasses.bold}`}>Services</Typography>\r\n                            </Box>\r\n                            <Typography className={typographyClasses.smallText}>{match.params.serviceid}</Typography>\r\n                            <Typography className={typographyClasses.smallText}>API</Typography>\r\n                            {\r\n                                versions.length > 0 ?\r\n                                    <Typography className={typographyClasses.smallText}>{versions[curVersion].versionname}</Typography>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            {\r\n                                resources.length > 0 ?\r\n                                    <Typography className={typographyClasses.smallText}>{resources[curRes]}</Typography>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </Breadcrumbs>\r\n                        <Box display=\"flex\">\r\n                            <Box mr={1}>\r\n                                <Button\r\n                                    variant=\"text\"\r\n                                    color=\"primary\"\r\n                                    onClick={handleActions.bind(this, { \"Action\": \"refresh\", key: \"api\" })}\r\n                                    disabled={versions.length > 0 ? false : true}\r\n                                >\r\n                                    <RefreshIcon className={typographyClasses.text} />\r\n                                </Button>\r\n                            </Box>\r\n                            <Box mr={1}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    className=\"trigger-btn\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => {\r\n                                        setLoader(true)\r\n                                        let apidata1 = {\r\n                                            ref: \"GetBranchesByCategory\",\r\n                                            cat: \"shared\",\r\n                                            body: {},\r\n                                            path: apipath['datastore'] + \"/git/getbranch/sharedbranch\",\r\n                                            headers: {\r\n                                                headers: true,\r\n                                                apidomain: apidomain.vmurl\r\n                                            }\r\n                                        }\r\n                                        manageAPIs(apidata1)\r\n                                    }}\r\n                                >\r\n                                    Share Service\r\n                                </Button>\r\n                            </Box>\r\n                            {/* {\r\n                                servstatus !== \"deploying\" ?\r\n                                    <Box p={0.5} pl={2} pr={2} height={28} mr={1} className={statusClasses[servstatus]} borderRadius={16}>\r\n                                        <Typography className={`${typographyClasses.root} ${typographyClasses.smallText}`}>Service Status - {statemap[servstatus]}</Typography>\r\n                                    </Box>\r\n                                    :\r\n                                    <Box>\r\n                                        {\r\n                                            servstatus === \"deploying\" ?\r\n                                                <Box p={0.5} pl={2} pr={2} height={28} mr={1} className={statusClasses[servstatus]} borderRadius={16} display=\"flex\" alignItems=\"center\">\r\n                                                    <Box display=\"flex\" mr={0.5}>\r\n                                                        <Typography className={`${typographyClasses.root} ${typographyClasses.smallText}`}>Service Status - {statemap[servstatus]}</Typography>\r\n                                                    </Box>\r\n                                                    <Box display=\"flex\">\r\n                                                        <CircularProgress size={12} />\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </Box>\r\n                            } */}\r\n                            {\r\n                                servstatus === \"design\" ?\r\n                                    Methods.length > 0 ?\r\n                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                            <Box>\r\n                                                <Button\r\n                                                    title={isGitConfigured === true ? \"Publish Design\" : \"Add Code Repo to publish\"}\r\n                                                    variant=\"contained\"\r\n                                                    color=\"primary\"\r\n                                                    className=\"trigger-btn\"\r\n                                                    onClick={() => {\r\n                                                        setLoader(true)\r\n                                                        manageAPIs({\r\n                                                            path: apipath['publish'] + \"/createdeploy/\" + match.params.productid + \"/\" + match.params.serviceid,\r\n                                                            ref: \"PublishDesign\",\r\n                                                            method: \"POST\",\r\n                                                            headers: {\r\n                                                                headers: true,\r\n                                                                apidomain: apidomain.vmurl\r\n                                                            },\r\n                                                            body: {\r\n                                                                servicetype: curServ.servicetype\r\n                                                            }\r\n                                                        })\r\n                                                    }}\r\n                                                    disabled={!isGitConfigured}\r\n                                                >\r\n                                                    <PublishIcon className={typographyClasses.text} />&nbsp;&nbsp;Publish Design\r\n                                                </Button>\r\n                                            </Box>\r\n                                        </Box>\r\n                                        :\r\n                                        null\r\n                                    :\r\n                                    null\r\n                            }\r\n                            {/* {\r\n                                resourceStatus === \"Running\" ?\r\n                                    <Box>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className=\"trigger-btn\"\r\n                                            onClick={() => {\r\n                                                window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + match.params.serviceid + \"/deploy\"\r\n                                            }}\r\n                                        >\r\n                                            <DeviceHubIcon className={typographyClasses.text} />&nbsp;&nbsp;Deploy\r\n                                        </Button>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                            } */}\r\n                            {/* {\r\n                                servstatus === \"published\" ?\r\n                                    <Box>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className=\"trigger-btn\"\r\n                                            onClick={() => {\r\n                                                handleActions({\r\n                                                    Action: \"confirmation\",\r\n                                                    confirmText: \"Are you sure you want to start this deployment process?\",\r\n                                                    apidata: {\r\n                                                        path: \"/mock/deploy\",\r\n                                                        method: \"POST\",\r\n                                                        ref: \"DeployCode\",\r\n                                                        headers: true,\r\n                                                        body: {\r\n                                                            serviceid: match.params.serviceid,\r\n                                                            productid: match.params.productid,\r\n                                                            tenantid: userData.TenantId,\r\n                                                            userid: userData.EmailId\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                            }}\r\n                                        >\r\n                                            <DeviceHubIcon className={typographyClasses.text} />&nbsp;&nbsp;Deploy\r\n                                        </Button>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                            } */}\r\n                            {\r\n                                servstatus === \"published\" ?\r\n                                    <Box ml={1}>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className=\"trigger-btn\"\r\n                                            onClick={() => {\r\n                                                setLoader(true)\r\n                                                manageAPIs({\r\n                                                    path: apipath['designapi'] + \"/service/\" + match.params.productid + \"/\" + match.params.serviceid + \"/updatestatus\",\r\n                                                    ref: \"DesignService\",\r\n                                                    method: \"POST\",\r\n                                                    headers: {\r\n                                                        headers: true,\r\n                                                        apidomain: apidomain.vmurl\r\n                                                    },\r\n                                                    body: {\r\n                                                        servicetype: curServ.servicetype\r\n                                                    }\r\n                                                })\r\n                                            }}\r\n                                        >\r\n                                            <MemoryIcon className={typographyClasses.text} />&nbsp;&nbsp;Design\r\n                                        </Button>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            {\r\n                                servstatus === \"running\" || servstatus === \"failed\" || servstatus === \"deploying\" ?\r\n                                    <Box ml={1}>\r\n                                        <Button\r\n                                            variant=\"outlined\"\r\n                                            color=\"secondary\"\r\n                                            onClick={() => {\r\n                                                handleActions({\r\n                                                    Action: \"confirmation\",\r\n                                                    confirmText: \"Are you sure you want to delete this deployment process?\",\r\n                                                    apidata: {\r\n                                                        method: \"POST\",\r\n                                                        path: \"/mock/delete\",\r\n                                                        headers: true,\r\n                                                        body: {\r\n                                                            serviceid: match.params.serviceid,\r\n                                                            productid: match.params.productid,\r\n                                                            tenantid: userData.TenantId,\r\n                                                            userid: userData.EmailId\r\n                                                        },\r\n                                                        ref: \"DeleteDeploy\"\r\n                                                    }\r\n                                                })\r\n                                            }}\r\n                                        >\r\n                                            <DeleteIcon className={typographyClasses.text} />&nbsp;&nbsp;Delete Mock\r\n                                        </Button>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </Box>\r\n                    </Box>\r\n                    <Box style={{ width: '100%' }}>\r\n                        <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%' }}>\r\n                            {\r\n                                showSidebar === false ?\r\n                                    <Box style={{ height: 'calc(100vh - 120px)' }} bgcolor=\"#FAFBFC\" width={40}>\r\n                                        <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%', cursor: 'pointer' }} onClick={() => setShowSideBar(true)} p={1} justifyContent=\"center\">\r\n                                            <MenuIcon className={`${typographyClasses.h5}`} />\r\n                                        </Box>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            <Box style={{ width: '100%' }}>\r\n                                <Grid container>\r\n                                    {\r\n                                        showSidebar === true ?\r\n                                            <Grid item xs={2}>\r\n                                                <Box bgcolor=\"#FAFBFC\">\r\n                                                    <Box p={1} borderBottom={1} style={{ borderColor: 'lightgray' }}>\r\n                                                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                                                            <Box display='flex'>\r\n                                                                <Typography className={`${typographyClasses.text} ${typographyClasses.bold}`}>API</Typography>\r\n                                                            </Box>\r\n                                                            <Box display='flex' style={{ cursor: 'pointer' }} onClick={(e) => {\r\n                                                                e.stopPropagation()\r\n                                                                setShowSideBar(false)\r\n                                                            }}>\r\n                                                                <Clear className={`${typographyClasses.h5}`} />\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                    <Box style={{ height: 'calc(100vh - 180px)' }} position=\"relative\" pl={1} pr={1} pt={1} pb={1}  >\r\n                                                        <Box >\r\n                                                            <Sidebar />\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            </Grid>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    <Grid item xs={showSidebar === true ? 10 : 12}>\r\n                                        <Box style={{ height: 'calc(100vh - 120px)' }} boxShadow={2}>\r\n                                            <Box p={0.5} pl={1} pr={1} borderBottom={1} style={{ borderColor: 'lightgray' }} height={41}>\r\n                                                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" style={{ height: '100%' }}>\r\n                                                    <ResourceOpStatus />\r\n                                                    {\r\n                                                        deployId !== \"\" ?\r\n                                                            <Box display=\"flex\" p={0.5} pl={2} pr={2} bgcolor=\"#fafafa\" alignItems=\"center\">\r\n                                                                <Typography className={typographyClasses.smallText}>Deploy Id - {deployId}</Typography>\r\n                                                                <Box ml={0.5} display=\"flex\" style={{ cursor: 'pointer' }} onClick={(e) => {\r\n                                                                    e.stopPropagation()\r\n                                                                    copyText(deployId)\r\n                                                                }}>\r\n                                                                    <FileCopyIcon fontSize=\"small\" style={{ fontSize: '0.8rem' }} />\r\n                                                                </Box>\r\n                                                            </Box>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    <Box display=\"flex\" alignItems=\"center\">\r\n                                                        {\r\n                                                            mainBlk === \"actions\" ?\r\n                                                                <Box mr={1}>\r\n                                                                    <Button\r\n                                                                        variant=\"text\"\r\n                                                                        color=\"primary\"\r\n                                                                        onClick={handleActions.bind(this, { \"Action\": \"refresh\", key: \"resource\" })}\r\n                                                                        disabled={resources.length > 0 ? false : true}\r\n                                                                    >\r\n                                                                        <RefreshIcon className={typographyClasses.text} />\r\n                                                                    </Button>\r\n                                                                </Box>\r\n                                                                :\r\n                                                                null\r\n                                                        }\r\n                                                        {\r\n                                                            liveInterval === false && resources.length > 0 && resourceStatus === \"\" && delInterval === false ?\r\n                                                                <Box mr={1} p={1} height={28} color=\"white\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" style={{ backgroundImage: 'linear-gradient(45deg, #05877b, #4caf50)', cursor: 'pointer' }} pr={2} pl={2} onClick={CheckResourceForLive}>\r\n                                                                    <Box mr={0.5} display=\"flex\">\r\n                                                                        <PlayArrowIcon className={typographyClasses.text} />\r\n                                                                    </Box>\r\n                                                                    <Box display=\"flex\">\r\n                                                                        <Typography className={typographyClasses.smallText}>Live Resource</Typography>\r\n                                                                    </Box>\r\n                                                                </Box>\r\n                                                                :\r\n                                                                null\r\n                                                        }\r\n                                                        {\r\n                                                            liveInterval === false && resources.length > 0 && delInterval === false && resourceStatus !== \"Initiated\" && resourceStatus !== \"\" && btnAction === false ?\r\n                                                                <Box mr={1} p={1} height={28} color=\"white\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" style={{ backgroundImage: 'linear-gradient(45deg, #05877b, #4caf50)', cursor: 'pointer' }} pr={2} pl={2} onClick={CheckResourceForLive}>\r\n                                                                    <Box mr={0.5} display=\"flex\">\r\n                                                                        <PlayArrowIcon className={typographyClasses.text} />\r\n                                                                    </Box>\r\n                                                                    <Box display=\"flex\">\r\n                                                                        <Typography className={typographyClasses.smallText}>Update Resource</Typography>\r\n                                                                    </Box>\r\n                                                                </Box>\r\n                                                                :\r\n                                                                null\r\n                                                        }\r\n                                                        {\r\n                                                            Object.keys(resObj).length > 0 ?\r\n                                                                resourceStatus !== \"\" && delInterval === false && resourceStatus !== \"Initiated\" ?\r\n                                                                    <Box mr={1} p={1} height={28} color=\"white\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" style={{ backgroundImage: 'linear-gradient(45deg, #f44336, #d10147)', cursor: 'pointer' }} pr={2} pl={2} onClick={() => {\r\n                                                                        handleActions({\r\n                                                                            Action: \"confirmation\",\r\n                                                                            confirmText: \"Are you sure you want to stop this process?\",\r\n                                                                            apidata: {\r\n                                                                                path: apipath['liveapi'] + \"/resource/\" + match.params.serviceid + \"/\" + versions[curVersion].versionid + \"/\" + resObj.resourceid,\r\n                                                                                headers: {\r\n                                                                                    headers: true,\r\n                                                                                    apidomain: apidomain.vmurl\r\n                                                                                },\r\n                                                                                method: \"DELETE\",\r\n                                                                                body: {},\r\n                                                                                ref: \"DeleteLiveRes\",\r\n                                                                            }\r\n                                                                        })\r\n                                                                    }}>\r\n                                                                        <Box mr={0.5} display=\"flex\">\r\n                                                                            <StopIcon className={typographyClasses.text} />\r\n                                                                        </Box>\r\n                                                                        <Box display=\"flex\">\r\n                                                                            <Typography className={typographyClasses.smallText}>Stop Resource</Typography>\r\n                                                                        </Box>\r\n                                                                    </Box>\r\n                                                                    :\r\n                                                                    null\r\n                                                                :\r\n                                                                null\r\n                                                        }\r\n                                                        {\r\n                                                            liveInterval === true && (resourceStatus === \"\" || resourceStatus === \"Initiated\") ?\r\n                                                                <Box p={0.5} pl={2} pr={2} height={28} mr={1} className={statusClasses[\"deploying\"]} borderRadius={16} display=\"flex\" alignItems=\"center\">\r\n                                                                    <Box display=\"flex\" mr={0.5}>\r\n                                                                        <Typography className={`${typographyClasses.root} ${typographyClasses.smallText}`}>Deploying</Typography>\r\n                                                                    </Box>\r\n                                                                    <Box display=\"flex\">\r\n                                                                        <CircularProgress size={12} />\r\n                                                                    </Box>\r\n                                                                </Box>\r\n                                                                :\r\n                                                                null\r\n                                                        }\r\n                                                        {\r\n                                                            resourceStatus === \"Stopping\" && delInterval === true ?\r\n                                                                <Box p={0.5} pl={2} pr={2} height={28} mr={1} className={statusClasses['failed']} borderRadius={16} display=\"flex\" alignItems=\"center\">\r\n                                                                    <Box display=\"flex\" mr={0.5}>\r\n                                                                        <Typography className={`${typographyClasses.root} ${typographyClasses.smallText}`}>Stopping</Typography>\r\n                                                                    </Box>\r\n                                                                    <Box display=\"flex\">\r\n                                                                        <CircularProgress size={12} />\r\n                                                                    </Box>\r\n                                                                </Box>\r\n                                                                :\r\n                                                                null\r\n                                                        }\r\n                                                        <Box>\r\n                                                            <Button\r\n                                                                variant=\"outlined\"\r\n                                                                color=\"primary\"\r\n                                                                onClick={() => {\r\n                                                                    if (mainBlk === \"actions\") {\r\n                                                                        setMainBlk('testcase')\r\n                                                                    }\r\n                                                                    else if (mainBlk === \"testcase\") {\r\n                                                                        setMainBlk('actions')\r\n                                                                    }\r\n                                                                }}\r\n                                                                disabled={resources.length > 0 ? false : true}\r\n                                                            >\r\n                                                                {mainBlk === \"actions\" ? \"Test Cases\" : \"Methods\"}\r\n                                                            </Button>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            </Box>\r\n                                            {\r\n                                                mainBlk === \"actions\" ?\r\n                                                    <Box style={{ height: 'calc(100vh - 161px)' }} overflow=\"auto\">\r\n                                                        <Box mb={2}>\r\n                                                            <Box p={1} pb={0} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                                                                <Box display=\"flex\">\r\n                                                                    <Typography className={`${typographyClasses.text} ${typographyClasses.bold}`}>Actions</Typography>\r\n                                                                </Box>\r\n                                                                <Box>\r\n                                                                    <Box display=\"flex\" style={{ height: '100%' }}>\r\n                                                                        <Box>\r\n                                                                            <Button\r\n                                                                                variant=\"contained\"\r\n                                                                                color=\"primary\"\r\n                                                                                className=\"trigger-btn\"\r\n                                                                                onClick={() => {\r\n                                                                                    setFormName('Add Action')\r\n                                                                                    setFormDialog(true)\r\n                                                                                }}\r\n                                                                                disabled={btnAction === false ? (resources.length > 0 ? false : true) : true}\r\n                                                                            >\r\n                                                                                <AddIcon className={typographyClasses.smallText} />&nbsp;Action\r\n                                                                        </Button>\r\n                                                                        </Box>\r\n                                                                    </Box>\r\n                                                                </Box>\r\n                                                            </Box>\r\n                                                            <Box style={{ height: 'calc(100% - 41px)' }} p={1} overflow=\"auto\">\r\n                                                                {\r\n                                                                    Methods.length > 0 ?\r\n                                                                        <PopulateMethods />\r\n                                                                        :\r\n                                                                        <Box p={1}>\r\n                                                                            {\r\n                                                                                loadTimeout === false ?\r\n                                                                                    <Loader type=\"block\" />\r\n                                                                                    :\r\n                                                                                    <Typography className={typographyClasses.smallText}>No Actions</Typography>\r\n                                                                            }\r\n                                                                        </Box>\r\n                                                                }\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                        <Box borderTop={1} style={{ borderColor: 'lightgray' }}>\r\n                                                            <Box p={1} display=\"flex\" pb={0}>\r\n                                                                <Typography className={`${typographyClasses.text} ${typographyClasses.bold}`}>Databases</Typography>\r\n                                                            </Box>\r\n                                                            <Box p={1} pb={0}>\r\n                                                                <Box style={{ width: '100%', height: '100%', overflow: 'auto', borderColor: 'lightgray' }} p={1} border={1}>\r\n                                                                    {\r\n                                                                        resources.length > 0 ?\r\n                                                                            Object.keys(resObj).length > 0 ?\r\n                                                                                curServ.hasOwnProperty('status') === false || servstatus === \"design\" || servstatus === \"published\" ?\r\n                                                                                    <TableDetails resourceid={resObj['resourceid']} btnAction={btnAction} callapi={true} serviceid={match.params.serviceid} versionid={versions[curVersion].versionid} trigger={handleAddMethodTrigger} />\r\n                                                                                    :\r\n                                                                                    null\r\n                                                                                :\r\n                                                                                <Box p={1}>\r\n                                                                                    {\r\n                                                                                        loadTimeout === false ?\r\n                                                                                            <Loader type=\"block\" />\r\n                                                                                            :\r\n                                                                                            <Typography className={typographyClasses.smallText}>No Database</Typography>\r\n                                                                                    }\r\n                                                                                </Box>\r\n                                                                            :\r\n                                                                            <Box p={1}>\r\n                                                                                {\r\n                                                                                    loadTimeout === false ?\r\n                                                                                        <Loader type=\"block\" />\r\n                                                                                        :\r\n                                                                                        <Typography className={typographyClasses.smallText}>No Resources</Typography>\r\n                                                                                }\r\n                                                                            </Box>\r\n                                                                    }\r\n                                                                </Box>\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                    :\r\n                                                    null\r\n                                            }\r\n                                            {\r\n                                                mainBlk === \"testcase\" ?\r\n                                                    <Box style={{ height: 'calc(100vh - 161px)' }} overflow=\"auto\" boxShadow={2} >\r\n                                                        {\r\n                                                            resources.length > 0 && Methods.length > 0 ?\r\n                                                                Object.keys(resObj).length > 0 ?\r\n                                                                    <TestCaseComp\r\n                                                                        btnAction={btnAction}\r\n                                                                        methods={Methods}\r\n                                                                        resourceid={resources[curRes]}\r\n                                                                        mainBlkTrigger={handleMainBlock}\r\n                                                                        resourceStatus={resourceStatus}\r\n                                                                        resourcename={resObj.resourcename}\r\n                                                                        versionname={versions[curVersion].versionname}\r\n                                                                        serviceid={match.params.serviceid}\r\n                                                                        apiid={curServ.apiid}\r\n                                                                        productid={match.params.productid}\r\n                                                                        versionid={versions[curVersion].versionid}\r\n                                                                    />\r\n                                                                    :\r\n                                                                    null\r\n                                                                :\r\n                                                                <Box p={1}>\r\n                                                                    <Typography className={typographyClasses.smallText}>No Resources</Typography>\r\n                                                                </Box>\r\n                                                        }\r\n                                                    </Box>\r\n                                                    :\r\n                                                    null\r\n                                            }\r\n                                        </Box>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            </Container>\r\n            <Dialog\r\n                open={formDialog}\r\n                onClose={() => setFormDialog(false)}\r\n                aria-labelledby=\"acc-dialog-title\"\r\n                fullWidth={true}\r\n                maxWidth={formName.indexOf('Outputs') !== -1 || formName === \"Status\" || formName.indexOf('Logs') !== -1 ? \"lg\" : \"sm\"}\r\n            >\r\n                <DialogTitle id=\"acc-dialog-title\" style={{ borderBottom: '1px solid lightgrey' }}>{formName === \"Status\" ? \"Status - \" + curState : formName}</DialogTitle>\r\n                <DialogContent>\r\n                    <Box style={{ width: '100%' }}>\r\n                        {\r\n                            formName.indexOf('Outputs') !== -1 || formName === \"Status\" || formName.indexOf('Logs') !== -1 ?\r\n                                <Box>\r\n                                    {\r\n                                        formName.indexOf('Logs') !== -1 ?\r\n                                            Object.keys(jsontohtml).length > 0 ?\r\n                                                <Box className=\"json-to-html\">\r\n                                                    <JSONToHTMLTable data={jsontohtml} tableClassName=\"table table-sm\" />\r\n                                                </Box>\r\n                                                :\r\n                                                <Box>\r\n                                                    <Typography>No Logs</Typography>\r\n                                                </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        formName.indexOf('Outputs') !== -1 ?\r\n                                            Object.keys(jsontohtml).length > 0 ?\r\n                                                <Box className=\"json-to-html\">\r\n                                                    <JSONToHTMLTable data={jsontohtml} tableClassName=\"table table-sm\" />\r\n                                                </Box>\r\n                                                :\r\n                                                <Box>\r\n                                                    <Typography>No Outputs</Typography>\r\n                                                </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        formName === \"Status\" ?\r\n                                            Object.keys(jsontohtml).length > 0 ?\r\n                                                <Box className=\"json-to-html\">\r\n                                                    <JSONToHTMLTable data={jsontohtml} tableClassName=\"table table-sm\" />\r\n                                                </Box>\r\n                                                :\r\n                                                <Box>\r\n                                                    <Typography>No Status</Typography>\r\n                                                </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                </Box>\r\n                                :\r\n                                <form autoComplete=\"off\">\r\n                                    {\r\n                                        formName === \"Add Resource\" ?\r\n                                            <Box>\r\n                                                <Box mb={1}>\r\n                                                    <FormControl fullWidth>\r\n                                                        <label htmlFor=\"ResourceName\" required>Resource Name</label>\r\n                                                        <TextField\r\n                                                            id=\"ResourceName\"\r\n                                                            required\r\n                                                            value={resname}\r\n                                                            fullWidth\r\n                                                            placeholder=\"Enter Resource Name\"\r\n                                                            onChange={handleFormDataChage.bind(this, \"resourcename\")}\r\n                                                            variant=\"outlined\"\r\n                                                            helperText=\"No capital letters,special characters except underscore is allowed.\"\r\n                                                        >\r\n                                                        </TextField>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                                <Box mb={1}>\r\n                                                    <FormControl fullWidth>\r\n                                                        <label htmlFor=\"Description\">Description</label>\r\n                                                        <TextField\r\n                                                            id=\"Description\"\r\n                                                            required\r\n                                                            fullWidth\r\n                                                            placeholder=\"Enter Description\"\r\n                                                            onChange={handleFormDataChage.bind(this, \"description\")}\r\n                                                            variant=\"outlined\"\r\n                                                            multiline\r\n                                                            rows={3}\r\n                                                        >\r\n                                                        </TextField>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                                {/* <Box>\r\n                                                    <FormControl fullWidth>\r\n                                                        <label required>Database Type</label>\r\n                                                        <Select\r\n                                                            native\r\n                                                            variant=\"outlined\"\r\n                                                            fullWidth\r\n                                                            onChange={handleFormDataChage.bind(this, \"databasetype\")}\r\n                                                        >\r\n                                                            <option value=\"\">Select Type</option>\r\n                                                            <option value=\"dynamodb\">Dynamo DB</option>\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                </Box> */}\r\n                                            </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        formName === \"Add Version\" ?\r\n                                            <Box>\r\n                                                <Box mb={1}>\r\n                                                    <FormControl fullWidth>\r\n                                                        <label htmlFor=\"VersionName\" required>Version Name</label>\r\n                                                        <TextField\r\n                                                            id=\"VersionName\"\r\n                                                            required\r\n                                                            value={vername}\r\n                                                            fullWidth\r\n                                                            placeholder=\"Enter Version Name\"\r\n                                                            onChange={handleFormDataChage.bind(this, \"versionname\")}\r\n                                                            variant=\"outlined\"\r\n                                                            helperText=\"No capital letters,special characters except underscore is allowed.\"\r\n                                                        >\r\n                                                        </TextField>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                                <Box>\r\n                                                    <FormControl fullWidth>\r\n                                                        <label htmlFor=\"Description\">Description</label>\r\n                                                        <TextField\r\n                                                            id=\"Description\"\r\n                                                            required\r\n                                                            fullWidth\r\n                                                            placeholder=\"Enter Description\"\r\n                                                            onChange={handleFormDataChage.bind(this, \"description\")}\r\n                                                            variant=\"outlined\"\r\n                                                            multiline\r\n                                                            rows={3}\r\n                                                        >\r\n                                                        </TextField>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                            </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        formName === \"Add Action\" ?\r\n                                            <Box>\r\n                                                <Box mb={1}>\r\n                                                    <FormControl fullWidth>\r\n                                                        <label required>Method Type</label>\r\n                                                        <Select\r\n                                                            native\r\n                                                            variant=\"outlined\"\r\n                                                            fullWidth\r\n                                                            onChange={handleFormDataChage.bind(this, \"methodtype\")}\r\n                                                        >\r\n                                                            <option value=\"\">Select Type</option>\r\n                                                            <option value=\"POST\">POST</option>\r\n                                                            <option value=\"GET\">GET</option>\r\n                                                            <option value=\"PUT\">PUT</option>\r\n                                                            <option value=\"DELETE\">DELETE</option>\r\n                                                            <option value=\"UPDATE\">UPDATE</option>\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                                <Box mb={1}>\r\n                                                    <FormControl fullWidth>\r\n                                                        <label htmlFor=\"Path\">Path</label>\r\n                                                        <OutlinedInput\r\n                                                            id=\"Path\"\r\n                                                            required\r\n                                                            fullWidth\r\n                                                            placeholder=\"Enter Path\"\r\n                                                            onChange={handleFormDataChage.bind(this, \"path\")}\r\n                                                            variant=\"outlined\"\r\n                                                            startAdornment={<InputAdornment position=\"start\">/</InputAdornment>}\r\n                                                        >\r\n                                                        </OutlinedInput>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                            </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        formName === \"Share Service\" ?\r\n                                            <Box>\r\n                                                <Box mb={1}>\r\n                                                    <FormControl fullWidth>\r\n                                                        <label htmlFor=\"branch\" required>Branch to Share</label>\r\n                                                        <PopulateBranches />\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                                <Box mb={1}>\r\n                                                    <FormControl fullWidth>\r\n                                                        <label htmlFor=\"Commit\" required>Commit Message</label>\r\n                                                        <TextField\r\n                                                            id=\"Commit\"\r\n                                                            required\r\n                                                            fullWidth\r\n                                                            placeholder=\"Enter Commit Message\"\r\n                                                            onChange={handleFormDataChage.bind(this, \"commitmessage\")}\r\n                                                            variant=\"outlined\"\r\n                                                            multiline\r\n                                                            rows={2}\r\n                                                        >\r\n                                                        </TextField>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                            </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                </form>\r\n                        }\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => {\r\n                        setFormDialog(false)\r\n                        setCurstate(\"\")\r\n                        setJsontoHtml({})\r\n                    }} color=\"secondary\" variant=\"contained\">\r\n                        {formName.indexOf('Outputs') !== -1 || formName === \"Status\" || formName.indexOf('Logs') !== -1 ? \"Close\" : \"Cancel\"}\r\n                    </Button>\r\n                    {\r\n                        formName.indexOf('Outputs') === -1 && formName !== \"Status\" && formName.indexOf('Logs') === -1 ?\r\n                            <Button onClick={FormDialogSubmit} color=\"primary\" variant=\"contained\" className=\"api-btn\">\r\n                                Add\r\n                            </Button>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Footer page=\"app\" />\r\n            {\r\n                confirmation !== '' ?\r\n                    <Confirm confirmText={confirmation} clickHandler={handleConfirmation} />\r\n                    :\r\n                    null\r\n            }\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default ServiceDetails;\r\n\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n// Material UI\r\nimport Box from '@material-ui/core/Box';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n// Styles\r\nimport TypographyStyles from '../../assets/styles/TypographySyles'\r\n\r\n// Material Icons\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\n//Ace Editor\r\nimport AceEditor from 'react-ace'\r\nimport \"ace-builds/src-noconflict/theme-dreamweaver\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\nimport \"ace-builds/src-noconflict/theme-clouds\";\r\nimport \"ace-builds/src-noconflict/theme-github\";\r\nimport \"ace-builds/src-noconflict/theme-eclipse\";\r\nimport \"ace-builds/src-noconflict/mode-sh\";\r\n\r\nconst tabStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n        backgroundColor: 'white !important'\r\n    },\r\n    header: {\r\n        boxShadow: 'none',\r\n        background: 'white',\r\n        border: 'none',\r\n    }\r\n}));\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box >\r\n                    {children}\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction TabProps(name, index) {\r\n    return {\r\n        id: `${name}-auto-tab-${index}`,\r\n        'aria-controls': `${name}-auto-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst Actions = ({ actions }) => {\r\n    const [tab, setTab] = useState(0)\r\n\r\n    const tabClasses = tabStyles();\r\n    const typographyClasses = TypographyStyles()\r\n\r\n    function copyText(key) {\r\n        let cptext = key.split(\"↵\").join('\\n')\r\n        var tempIp = document.createElement('textarea')\r\n        tempIp.value = cptext\r\n        tempIp.style.position = 'fixed'\r\n        tempIp.setAttribute('id', 'temp-copy')\r\n        var root = document.getElementById('root')\r\n        root.appendChild(tempIp)\r\n        let copytext = document.getElementById('temp-copy')\r\n        copytext.select()\r\n        document.execCommand(\"copy\");\r\n        tempIp.remove()\r\n    }\r\n\r\n    const handleActionsTab = (event, newValue) => {\r\n        setTab(newValue)\r\n    }\r\n\r\n    return (\r\n        <Box style={{ width: '100%' }}>\r\n            {\r\n                actions.hasOwnProperty('initscript') === true ?\r\n                    <Box display=\"flex\">\r\n                        <Box style={{ borderColor: '#272822', width: '100%' }} border={4} bgcolor=\"#272822\" borderRadius={0} p={1} pt={0}>\r\n                            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                                <Box display=\"flex\" alignItems=\"center\">\r\n                                    <Box display=\"flex\" width={10} boxShadow={6} height={10} style={{ borderRadius: '50%' }} bgcolor=\"green\" mr={1}>\r\n                                    </Box>\r\n                                    <Box display=\"flex\" width={10} boxShadow={6} height={10} style={{ borderRadius: '50%' }} bgcolor=\"yellow\" mr={1}>\r\n                                    </Box>\r\n                                    <Box display=\"flex\" width={10} boxShadow={6} height={10} style={{ borderRadius: '50%' }} bgcolor=\"red\">\r\n                                    </Box>\r\n                                </Box>\r\n                                <Box display=\"flex\" color=\"white\" style={{ cursor: 'pointer' }}>\r\n                                    <IconButton\r\n                                        color=\"inherit\"\r\n                                        onClick={() => {\r\n                                            copyText(actions['initscript'])\r\n                                        }}\r\n                                    >\r\n                                        <FileCopyIcon className={typographyClasses.text} />\r\n                                    </IconButton>\r\n                                </Box>\r\n                            </Box>\r\n                            <Box display=\"flex\" color=\"white\" overflow=\"auto\" maxHeight={250}>\r\n                                <AceEditor\r\n                                    style={{ height: '100%', width: '100%' }}\r\n                                    mode=\"sh\"\r\n                                    theme=\"monokai\"\r\n                                    setOptions={{\r\n                                        showLineNumbers: false,\r\n                                        showGutter: false,\r\n                                        highlightActiveLine: false,\r\n                                        highlightGutterLine: false,\r\n                                        highlightSelectedWord: false,\r\n                                        fontSize: 12,\r\n                                        readOnly: true,\r\n                                        useSoftTabs: true,\r\n                                        tabSize: 4,\r\n                                        showPrintMargin: false,\r\n                                        wrap: true,\r\n                                        maxLines: Infinity,\r\n                                        dragEnabled: false,\r\n                                    }}\r\n                                    editorProps={{ $blockScrolling: true, $blockSelectEnabled: false, $enableMultiselect: false }}\r\n                                    value={actions['initscript']}\r\n                                />\r\n                            </Box>\r\n                        </Box>\r\n                    </Box>\r\n                    :\r\n                    <div className={tabClasses.root}>\r\n                        <AppBar position=\"static\" color=\"default\" className={tabClasses.header}>\r\n                            <Tabs\r\n                                value={tab}\r\n                                onChange={handleActionsTab}\r\n                                variant=\"scrollable\"\r\n                                scrollButtons=\"auto\"\r\n                                aria-label=\"Actions auto tabs example\"\r\n                            >\r\n                                {\r\n                                    Object.keys(actions).map((act, index) => {\r\n                                        return (\r\n                                            <Tab disableFocusRipple disableRipple disableTouchRipple key={index} label={<Typography className={typographyClasses.text}>{act}</Typography>} {...TabProps(\"Actions\", index)} />\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Tabs>\r\n                        </AppBar>\r\n                        {\r\n                            Object.keys(actions).map((act, index) => {\r\n                                return (\r\n                                    <TabPanel value={tab} index={index}>\r\n                                        <Box>\r\n                                            {\r\n                                                actions[act].hasOwnProperty('script') === true ?\r\n                                                    <Box display=\"flex\">\r\n                                                        <Box style={{ borderColor: '#272822', width: '100%' }} border={4} bgcolor=\"#272822\" borderRadius={0} p={1} pt={0}>\r\n                                                            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                                                                <Box display=\"flex\" alignItems=\"center\">\r\n                                                                    <Box display=\"flex\" width={10} boxShadow={6} height={10} style={{ borderRadius: '50%' }} bgcolor=\"green\" mr={1}>\r\n                                                                    </Box>\r\n                                                                    <Box display=\"flex\" width={10} boxShadow={6} height={10} style={{ borderRadius: '50%' }} bgcolor=\"yellow\" mr={1}>\r\n                                                                    </Box>\r\n                                                                    <Box display=\"flex\" width={10} boxShadow={6} height={10} style={{ borderRadius: '50%' }} bgcolor=\"red\">\r\n                                                                    </Box>\r\n                                                                </Box>\r\n                                                                <Box display=\"flex\" color=\"white\" style={{ cursor: 'pointer' }}>\r\n                                                                    <IconButton\r\n                                                                        color=\"inherit\"\r\n                                                                        onClick={() => {\r\n                                                                            copyText(actions[act]['script'])\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <FileCopyIcon className={typographyClasses.text} />\r\n                                                                    </IconButton>\r\n                                                                </Box>\r\n                                                            </Box>\r\n                                                            <Box display=\"flex\" color=\"white\" overflow=\"auto\" maxHeight={250}>\r\n                                                                <AceEditor\r\n                                                                    style={{ height: '100%', width: '100%' }}\r\n                                                                    mode=\"sh\"\r\n                                                                    theme=\"monokai\"\r\n                                                                    setOptions={{\r\n                                                                        showLineNumbers: false,\r\n                                                                        showGutter: false,\r\n                                                                        highlightActiveLine: false,\r\n                                                                        highlightGutterLine: false,\r\n                                                                        highlightSelectedWord: false,\r\n                                                                        fontSize: 12,\r\n                                                                        readOnly: true,\r\n                                                                        useSoftTabs: true,\r\n                                                                        tabSize: 4,\r\n                                                                        showPrintMargin: false,\r\n                                                                        wrap: true,\r\n                                                                        maxLines: Infinity,\r\n                                                                        dragEnabled: false,\r\n                                                                    }}\r\n                                                                    editorProps={{ $blockScrolling: true, $blockSelectEnabled: false, $enableMultiselect: false }}\r\n                                                                    value={actions[act]['script']}\r\n                                                                />\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                    :\r\n                                                    null\r\n                                            }\r\n                                        </Box>\r\n                                    </TabPanel>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Actions","import React, { useState } from 'react';\r\n\r\n//Material UI\r\nimport TextField from '@material-ui/core/TextField';\r\n// import Checkbox from '@material-ui/core/Checkbox';\r\n// import Radio from '@material-ui/core/Radio';\r\n// import RadioGroup from '@material-ui/core/RadioGroup';\r\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n// import FormLabel from '@material-ui/core/FormLabel';\r\n// import InputLabel from '@material-ui/core/InputLabel';\r\n// import MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\n//Material Icons\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\n//Custom components\r\n// import MinMax from './MinMax';\r\nimport Alert from './Alert';\r\nimport Loader from './Loader';\r\n\r\n//Ace Editor\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-yaml\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\nimport \"ace-builds/src-noconflict/mode-sh\";\r\n\r\n// import Editor from \"@monaco-editor/react\";\r\n\r\n\r\n\r\nconst typographyStyles = makeStyles((theme) => ({\r\n    root: {\r\n        color: 'white'\r\n    },\r\n    text: {\r\n        fontSize: '1rem',\r\n    },\r\n    h2: {\r\n        fontSize: theme.typography.h2.fontSize,\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: theme.typography.h3.fontSize\r\n        },\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            fontSize: theme.typography.h4.fontSize\r\n        }\r\n    },\r\n    h4: {\r\n        fontSize: theme.typography.h4.fontSize,\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: theme.typography.h5.fontSize\r\n        },\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            fontSize: theme.typography.h6.fontSize\r\n        }\r\n    },\r\n    h5: {\r\n        fontSize: theme.typography.h5.fontSize,\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: theme.typography.h6.fontSize\r\n        },\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            fontSize: '0.9rem'\r\n        }\r\n    },\r\n    h6: {\r\n        fontSize: theme.typography.h6.fontSize,\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: '1rem'\r\n        }\r\n    },\r\n    bold: {\r\n        fontWeight: 'bold'\r\n    },\r\n    smallText: {\r\n        fontSize: '0.8rem'\r\n    }\r\n}));\r\n\r\nconst Form = ({ UserParameters, clickHandler, formname }) => {\r\n    // const [formData, setFormData] = useState({})\r\n    const [loader, setLoader] = useState(false)\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [severity, setSeverrity] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [formProps, setFormProps] = useState(UserParameters)\r\n    const [disableBtn, setDisableBtn] = useState(false)\r\n    const [multiIp, setMultiIp] = useState({})\r\n    const [curIpList, setCurIpList] = useState([])\r\n    const [paramList, setParamList] = useState([])\r\n\r\n    const typographyClasses = typographyStyles()\r\n\r\n    useState(() => {\r\n        for (var i in formProps) {\r\n            paramList.push(i)\r\n        }\r\n    })\r\n\r\n    const handleFormDataChage = (field, Type, minvalue, maxvalue, event) => {\r\n        let formFields = formProps;\r\n        if (Type === 'Number') {\r\n            if (maxvalue !== \"\") {\r\n                if (parseInt(event.target.value) > maxvalue) {\r\n                    setMessage('Maximum limit reached')\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                    formFields[field]['value'] = parseInt(event.target.value)\r\n                    event.target.value = parseInt(event.target.value)\r\n                    setDisableBtn(true)\r\n                }\r\n            }\r\n            else {\r\n                setDisableBtn(false)\r\n                formFields[field]['value'] = parseInt(event.target.value)\r\n            }\r\n            if (minvalue !== \"\") {\r\n                if (parseInt(event.target.value) < minvalue) {\r\n                    setOpenAlert(true)\r\n                    setMessage('Minimum limit reached')\r\n                    setSeverrity('error')\r\n                    formFields[field]['value'] = parseInt(event.target.value) + 1\r\n                    event.target.value = parseInt(event.target.value) + 1\r\n                    setDisableBtn(true)\r\n                }\r\n            }\r\n            else {\r\n                if (parseInt(event.target.value) > 0) {\r\n                    setDisableBtn(false)\r\n                    formFields[field]['value'] = parseInt(event.target.value)\r\n                }\r\n                else {\r\n                    formFields[field]['value'] = 0\r\n                    event.target.value = 0\r\n                }\r\n            }\r\n        }\r\n        else if (Type === 'yaml') {\r\n            formFields[field]['value'] = event\r\n        }\r\n        else {\r\n            setDisableBtn(false)\r\n\r\n            formFields[field]['value'] = event.target.value;\r\n        }\r\n        setFormProps(formFields);\r\n    }\r\n\r\n    const handleFormSubmit = (key) => {\r\n        if(!key){\r\n            clickHandler(false)\r\n        }\r\n        else{\r\n            setLoader(true)\r\n            let cansubmit = true\r\n            for (var i in formProps) {\r\n                if ((!formProps[i].hasOwnProperty('value') || formProps[i]['value'] === '')) {\r\n                    if (formProps[i].Type !== \"array\") {\r\n                        cansubmit = false\r\n                        setMessage('Please fill all the required details')\r\n                        setSeverrity('error')\r\n                        setOpenAlert(true)\r\n                        setLoader(false)\r\n                    }\r\n                }\r\n            }\r\n            if (cansubmit) {\r\n                clickHandler(true, formProps)\r\n                // console.log(formProps)\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n\r\n    // const handleMinMax = (field, key) => {\r\n    //     let formFields = formData\r\n    //     setFormData({})\r\n    //     if (key === 'add') {\r\n    //         formFields[field] = (formFields[field] !== undefined ? formFields[field] : formProps[field].minvalue) + 1\r\n    //     }\r\n    //     else if (key === 'minus') {\r\n    //         formFields[field] = formFields[field] - 1\r\n    //     }\r\n    //     setFormData(formFields);\r\n    // }\r\n\r\n    function codeChange(field, newValue) {\r\n        let formFields = formProps\r\n        formFields[field].value = newValue\r\n        // console.log(newValue)\r\n        setFormProps(formFields)\r\n    }\r\n\r\n    const ProcessInput = ({ KeyName }) => {\r\n        let value = ''\r\n        if (formProps[KeyName].hasOwnProperty('value')) {\r\n            value = formProps[KeyName].value\r\n        }\r\n        else if (formProps[KeyName].hasOwnProperty('Default')) {\r\n            value = formProps[KeyName]['Default']\r\n        }\r\n        else if (formProps[KeyName].hasOwnProperty('AllowedValues') && formProps[KeyName].AllowedValues.length > 0) {\r\n            value = formProps[KeyName]['AllowedValues'][0]\r\n        }\r\n        else {\r\n            if (formProps[KeyName].Type === \"Number\") {\r\n                if (formProps[KeyName].hasOwnProperty('MinValue')) {\r\n                    value = formProps[KeyName].MinValue\r\n                }\r\n                else if (formProps[KeyName].hasOwnProperty('MaxValue')) {\r\n                    value = formProps[KeyName].MaxValue\r\n                }\r\n                else {\r\n                    value = 0\r\n                }\r\n            }\r\n            else {\r\n                value = KeyName\r\n            }\r\n        }\r\n        return (\r\n            <Box>\r\n                {\r\n                    formProps[KeyName].Type === \"String\" ?\r\n                        <Box>\r\n                            {\r\n                                formProps[KeyName].hasOwnProperty('AllowedValues') === true && formProps[KeyName].AllowedValues.length > 0 ?\r\n                                    <Box>\r\n                                        <FormControl fullWidth>\r\n                                            <label htmlFor={KeyName} required style={{ fontWeight: 'bold' }}>{KeyName}{\r\n                                                formProps[KeyName].hasOwnProperty('ConstraintDescription') === true ?\r\n                                                    <span style={{ fontSize: '0.8rem', fontWeight: 'normal', color: 'grey' }}>&nbsp;({formProps[KeyName].ConstraintDescription})</span>\r\n                                                    :\r\n                                                    null\r\n                                            }</label>\r\n                                            <Select\r\n                                                native\r\n                                                labelId={KeyName}\r\n                                                id={KeyName}\r\n                                                variant=\"outlined\"\r\n                                                defaultValue={value}\r\n                                                onChange={handleFormDataChage.bind(this, KeyName, formProps[KeyName].Type, -1, 0)}\r\n                                            >\r\n                                                {\r\n                                                    formProps[KeyName].AllowedValues.map((valItem, valIndex) => {\r\n                                                        return (\r\n                                                            <option value={valItem} key={valIndex}>{valItem}</option>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </Select>\r\n                                            {\r\n                                                formProps[KeyName].hasOwnProperty('Description') === true ?\r\n                                                    <FormHelperText>{formProps[KeyName].Description}</FormHelperText>\r\n                                                    :\r\n                                                    null\r\n                                            }\r\n                                        </FormControl>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            {\r\n                                formProps[KeyName].hasOwnProperty('AllowedValues') === false || formProps[KeyName].AllowedValues.length === 0 ?\r\n                                    <FormControl fullWidth>\r\n                                        <label htmlFor={KeyName} required style={{ fontWeight: 'bold' }}>{KeyName}{\r\n                                            formProps[KeyName].hasOwnProperty('ConstraintDescription') === true ?\r\n                                                <span style={{ fontSize: '0.8rem', fontWeight: 'normal', color: 'grey' }}>&nbsp;({formProps[KeyName].ConstraintDescription})</span>\r\n                                                :\r\n                                                null\r\n                                        }</label>\r\n                                        <TextField\r\n                                            id={KeyName}\r\n                                            helperText={formProps[KeyName].hasOwnProperty('Description') === true ? formProps[KeyName].Description : ''}\r\n                                            defaultValue={value}\r\n                                            required\r\n                                            fullWidth\r\n                                            placeholder={\"Enter \" + KeyName}\r\n                                            onChange={handleFormDataChage.bind(this, KeyName, formProps[KeyName].Type, -1, 0)}\r\n                                            variant=\"outlined\"\r\n                                        >\r\n                                        </TextField>\r\n                                    </FormControl>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </Box>\r\n                        :\r\n                        null\r\n                }\r\n                {\r\n                    formProps[KeyName].Type === \"Number\" ?\r\n                        <Box>\r\n                            {\r\n                                formProps[KeyName].hasOwnProperty('AllowedValues') === true && formProps[KeyName].AllowedValues.length > 0 ?\r\n                                    <Box>\r\n                                        <FormControl fullWidth>\r\n                                            <label htmlFor={KeyName} required style={{ fontWeight: 'bold' }}>{KeyName}{\r\n                                                formProps[KeyName].hasOwnProperty('ConstraintDescription') === true ?\r\n                                                    <span style={{ fontSize: '0.8rem', fontWeight: 'normal', color: 'grey' }}>&nbsp;({formProps[KeyName].ConstraintDescription})</span>\r\n                                                    :\r\n                                                    null\r\n                                            }</label>\r\n                                            <Select\r\n                                                native\r\n                                                labelId={KeyName}\r\n                                                variant=\"outlined\"\r\n                                                id={KeyName}\r\n                                                defaultValue={value}\r\n                                                onChange={handleFormDataChage.bind(this, KeyName, formProps[KeyName].Type, \"\", \"\")}\r\n                                            >\r\n                                                {\r\n                                                    formProps[KeyName].AllowedValues.map((valItem, valIndex) => {\r\n                                                        return (\r\n                                                            <option value={valItem} key={valIndex}>{valItem}</option>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </Select>\r\n                                            {\r\n                                                formProps[KeyName].hasOwnProperty('Description') === true ?\r\n                                                    <FormHelperText>{formProps[KeyName].Description}</FormHelperText>\r\n                                                    :\r\n                                                    null\r\n                                            }\r\n                                        </FormControl>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            {\r\n                                formProps[KeyName].hasOwnProperty('AllowedValues') === false || formProps[KeyName].AllowedValues.length === 0 ?\r\n                                    <Box>\r\n                                        <FormControl fullWidth>\r\n                                            <label htmlFor={KeyName} required style={{ fontWeight: 'bold' }}>{KeyName}{\r\n                                                formProps[KeyName].hasOwnProperty('ConstraintDescription') === true ?\r\n                                                    <span style={{ fontSize: '0.8rem', fontWeight: 'normal', color: 'grey' }}>&nbsp;({formProps[KeyName].ConstraintDescription})</span>\r\n                                                    :\r\n                                                    null\r\n                                            }</label>\r\n                                            <TextField\r\n                                                id={KeyName}\r\n                                                helperText={formProps[KeyName].hasOwnProperty('Description') === true ? formProps[KeyName].Description : ''}\r\n                                                defaultValue={value}\r\n                                                required\r\n                                                fullWidth\r\n                                                type=\"number\"\r\n                                                placeholder={\"Enter \" + KeyName}\r\n                                                onChange={handleFormDataChage.bind(this, KeyName, formProps[KeyName].Type, formProps[KeyName].hasOwnProperty('MinValue') ? formProps[KeyName].MinValue : \"\", formProps[KeyName].hasOwnProperty('MaxValue') ? formProps[KeyName].MaxValue : \"\")}\r\n                                                variant=\"outlined\"\r\n                                            >\r\n                                            </TextField>\r\n                                        </FormControl>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </Box>\r\n                        :\r\n                        null\r\n                }\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    // function handleAddMultiIp(KeyName) {\r\n    //     let muip = multiIp, pmList = [...paramList]\r\n    //     // let delIndex = pmList.indexOf(KeyName)\r\n    //     // pmList.splice(delIndex,1)\r\n    //     // let curKey = multiIp[KeyName][0]\r\n    //     // delete multiIp[KeyName]\r\n    //     // muip[KeyName] = curKey\r\n    //     muip[KeyName].push(muip[KeyName][0])\r\n    //     setMultiIp(muip)\r\n    //     let fmFields = formProps\r\n    //     fmFields[KeyName].Parameters = muip[KeyName]\r\n    //     setFormProps(fmFields)\r\n    //     // pmList.splice(delIndex,0,KeyName)\r\n    //     setParamList(pmList)\r\n    //     // setCurIpList(muip[KeyName])\r\n    // };\r\n\r\n    // function handleRemMultiIp(index, KeyName) {\r\n    //     let muip = multiIp, pmList = [...paramList]\r\n    //     let list = muip[KeyName];\r\n    //     // delete multiIp[KeyName]\r\n    //     list.splice(index, 1);\r\n    //     muip[KeyName] = list\r\n    //     setMultiIp(muip)\r\n    //     let fmFields = formProps\r\n    //     fmFields[KeyName].Parameters = muip[KeyName]\r\n    //     setFormProps(fmFields)\r\n    //     setParamList(pmList)\r\n    //     // let formFields = addModuleData;\r\n    //     // formFields= list;\r\n    //     // setAddModuleData(formFields);\r\n    // };\r\n\r\n    // const handleMultiIpValue = (field, parent, index, Type, minvalue, maxvalue, e) => {\r\n    //     let muip = multiIp;\r\n    //     if (Type === 'Number') {\r\n    //         if (maxvalue !== \"\") {\r\n    //             if (parseInt(e.target.value) > maxvalue) {\r\n    //                 setMessage('Maximum limit reached')\r\n    //                 setSeverrity('error')\r\n    //                 setOpenAlert(true)\r\n    //                 muip[parent][index][field]['value'] = parseInt(e.target.value)\r\n    //                 e.target.value = parseInt(e.target.value)\r\n    //                 setDisableBtn(true)\r\n    //             }\r\n    //         }\r\n    //         else {\r\n    //             setDisableBtn(false)\r\n    //             muip[parent][index][field]['value'] = parseInt(e.target.value)\r\n    //         }\r\n    //         if (minvalue !== \"\") {\r\n    //             if (parseInt(e.target.value) < minvalue) {\r\n    //                 setOpenAlert(true)\r\n    //                 setMessage('Minimum limit reached')\r\n    //                 setSeverrity('error')\r\n    //                 muip[parent][index][field]['value'] = parseInt(e.target.value) + 1\r\n    //                 e.target.value = parseInt(e.target.value) + 1\r\n    //                 setDisableBtn(true)\r\n    //             }\r\n    //         }\r\n    //         else {\r\n    //             if (parseInt(e.target.value) >= 0) {\r\n    //                 setDisableBtn(false)\r\n    //                 muip[parent][index][field]['value'] = parseInt(e.target.value)\r\n    //             }\r\n    //             else {\r\n    //                 muip[parent][index][field]['value'] = 0\r\n    //                 e.target.value = 0\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     else if (Type === 'yaml') {\r\n    //         muip[parent][index][field]['value'] = e\r\n    //     }\r\n    //     else {\r\n    //         setDisableBtn(false)\r\n    //         muip[parent][index][field]['value'] = e.target.value;\r\n    //         if (e.target.value === \"\") {\r\n    //             setDisableBtn(true)\r\n    //         }\r\n    //     }\r\n    //     setMultiIp(muip);\r\n    //     let fmFields = formProps\r\n    //     fmFields[parent].Parameters[index][field]['value'] = muip[parent][index][field]['value']\r\n    //     setFormProps(fmFields)\r\n    // };\r\n\r\n    // const ProcessMultiInput = ({ KeyName, parentKey, index }) => {\r\n    //     if (formProps[parentKey]['Parameters'][index][KeyName].hasOwnProperty('value')) {\r\n    //         formProps[parentKey]['Parameters'][index][KeyName]['value'] = formProps[parentKey]['Parameters'][index][KeyName].value\r\n    //     }\r\n    //     else if (formProps[parentKey]['Parameters'][index][KeyName].hasOwnProperty('Default')) {\r\n    //         formProps[parentKey]['Parameters'][index][KeyName]['value'] = formProps[parentKey]['Parameters'][index][KeyName]['Default']\r\n    //     }\r\n    //     else if (formProps[parentKey]['Parameters'][index][KeyName].hasOwnProperty('AllowedValues') && formProps[parentKey]['Parameters'][index][KeyName].AllowedValues.length > 0) {\r\n    //         formProps[parentKey]['Parameters'][index][KeyName]['value'] = formProps[parentKey]['Parameters'][index][KeyName]['AllowedValues'][0]\r\n    //     }\r\n    //     else {\r\n    //         if (formProps[parentKey]['Parameters'][index][KeyName].Type === \"Number\") {\r\n    //             if (formProps[parentKey]['Parameters'][index][KeyName].hasOwnProperty('MinValue')) {\r\n    //                 formProps[parentKey]['Parameters'][index][KeyName]['value'] = formProps[parentKey]['Parameters'][index][KeyName].MinValue\r\n    //             }\r\n    //             else if (formProps[parentKey]['Parameters'][index][KeyName].hasOwnProperty('MaxValue')) {\r\n    //                 formProps[parentKey]['Parameters'][index][KeyName]['value'] = formProps[parentKey]['Parameters'][index][KeyName].MaxValue\r\n    //             }\r\n    //             else {\r\n    //                 formProps[parentKey]['Parameters'][index][KeyName]['value'] = 0\r\n    //             }\r\n    //         }\r\n    //         else {\r\n    //             formProps[parentKey]['Parameters'][index][KeyName]['value'] = KeyName\r\n    //         }\r\n    //     }\r\n    //     return (\r\n    //         <Box>\r\n    //             {\r\n    //                 multiIp[parentKey][index][KeyName].Type === \"String\" ?\r\n    //                     <Box>\r\n    //                         {\r\n    //                             multiIp[parentKey][index][KeyName].hasOwnProperty('AllowedValues') === true && multiIp[parentKey][index][KeyName].AllowedValues.length > 0 ?\r\n    //                                 <Box>\r\n    //                                     <FormControl fullWidth>\r\n    //                                         <label htmlFor={KeyName} required style={{ fontWeight: 'bold' }}>{KeyName}{\r\n    //                                             multiIp[parentKey][index][KeyName].hasOwnProperty('ConstraintDescription') === true ?\r\n    //                                                 <span style={{ fontSize: '0.8rem', fontWeight: 'normal', color: 'grey' }}>&nbsp;({multiIp[parentKey][index][KeyName].ConstraintDescription})</span>\r\n    //                                                 :\r\n    //                                                 null\r\n    //                                         }</label>\r\n    //                                         <Select\r\n    //                                             native\r\n    //                                             labelId={KeyName}\r\n    //                                             // id={KeyName}\r\n    //                                             variant=\"outlined\"\r\n    //                                             defaultValue={multiIp[parentKey][index][KeyName].hasOwnProperty('Default') === true ? multiIp[parentKey][index][KeyName].Default : ''}\r\n    //                                             onChange={handleMultiIpValue.bind(this, KeyName, parentKey, index, multiIp[parentKey][index][KeyName].Type, -1, 0)}\r\n    //                                         >\r\n    //                                             {\r\n    //                                                 multiIp[parentKey][index][KeyName].AllowedValues.map((valItem, valIndex) => {\r\n    //                                                     return (\r\n    //                                                         <option value={valItem} key={valIndex}>{valItem}</option>\r\n    //                                                     )\r\n    //                                                 })\r\n    //                                             }\r\n    //                                         </Select>\r\n    //                                         {\r\n    //                                             multiIp[parentKey][index][KeyName].hasOwnProperty('Description') === true ?\r\n    //                                                 <FormHelperText>{multiIp[parentKey][index][KeyName].Description}</FormHelperText>\r\n    //                                                 :\r\n    //                                                 null\r\n    //                                         }\r\n    //                                     </FormControl>\r\n    //                                 </Box>\r\n    //                                 :\r\n    //                                 null\r\n    //                         }\r\n    //                         {\r\n    //                             multiIp[parentKey][index][KeyName].hasOwnProperty('AllowedValues') === false || multiIp[parentKey][index][KeyName].AllowedValues.length === 0 ?\r\n    //                                 <FormControl fullWidth>\r\n    //                                     <label htmlFor={KeyName} required style={{ fontWeight: 'bold' }}>{KeyName}{\r\n    //                                         multiIp[parentKey][index][KeyName].hasOwnProperty('ConstraintDescription') === true ?\r\n    //                                             <span style={{ fontSize: '0.8rem', fontWeight: 'normal', color: 'grey' }}>&nbsp;({multiIp[parentKey][index][KeyName].ConstraintDescription})</span>\r\n    //                                             :\r\n    //                                             null\r\n    //                                     }</label>\r\n    //                                     <TextField\r\n    //                                         // id={KeyName}\r\n    //                                         helperText={multiIp[parentKey][index][KeyName].hasOwnProperty('Description') === true ? multiIp[parentKey][index][KeyName].Description : ''}\r\n    //                                         defaultValue={multiIp[parentKey][index][KeyName].hasOwnProperty('Default') === true ? multiIp[parentKey][index][KeyName].Default : ''}\r\n    //                                         required\r\n    //                                         fullWidth\r\n    //                                         placeholder={\"Enter \" + KeyName}\r\n    //                                         onChange={handleMultiIpValue.bind(this, KeyName, parentKey, index, multiIp[parentKey][index][KeyName].Type, -1, 0)}\r\n    //                                         variant=\"outlined\"\r\n    //                                     >\r\n    //                                     </TextField>\r\n    //                                 </FormControl>\r\n    //                                 :\r\n    //                                 null\r\n    //                         }\r\n    //                     </Box>\r\n    //                     :\r\n    //                     null\r\n    //             }\r\n    //             {\r\n    //                 multiIp[parentKey][index][KeyName].Type === \"Number\" ?\r\n    //                     <Box>\r\n    //                         {\r\n    //                             multiIp[parentKey][index][KeyName].hasOwnProperty('AllowedValues') === true && multiIp[parentKey][index][KeyName].AllowedValues.length > 0 ?\r\n    //                                 <Box>\r\n    //                                     <FormControl fullWidth>\r\n    //                                         <label htmlFor={KeyName} required style={{ fontWeight: 'bold' }}>{KeyName}{\r\n    //                                             multiIp[parentKey][index][KeyName].hasOwnProperty('ConstraintDescription') === true ?\r\n    //                                                 <span style={{ fontSize: '0.8rem', fontWeight: 'normal', color: 'grey' }}>&nbsp;({multiIp[parentKey][index][KeyName].ConstraintDescription})</span>\r\n    //                                                 :\r\n    //                                                 null\r\n    //                                         }</label>\r\n    //                                         <Select\r\n    //                                             native\r\n    //                                             labelId={KeyName}\r\n    //                                             variant=\"outlined\"\r\n    //                                             // id={KeyName}\r\n    //                                             defaultValue={multiIp[parentKey][index][KeyName].hasOwnProperty('Default') === true ? multiIp[parentKey][index][KeyName].Default : ''}\r\n    //                                             onChange={handleMultiIpValue.bind(this, KeyName, parentKey, index, multiIp[parentKey][index][KeyName].Type, -1, 0)}\r\n    //                                         >\r\n    //                                             {\r\n    //                                                 multiIp[parentKey][index][KeyName].AllowedValues.map((valItem, valIndex) => {\r\n    //                                                     return (\r\n    //                                                         <option value={valItem} key={valIndex}>{valItem}</option>\r\n    //                                                     )\r\n    //                                                 })\r\n    //                                             }\r\n    //                                         </Select>\r\n    //                                         {\r\n    //                                             multiIp[parentKey][index][KeyName].hasOwnProperty('Description') === true ?\r\n    //                                                 <FormHelperText>{multiIp[parentKey][index][KeyName].Description}</FormHelperText>\r\n    //                                                 :\r\n    //                                                 null\r\n    //                                         }\r\n    //                                     </FormControl>\r\n    //                                 </Box>\r\n    //                                 :\r\n    //                                 null\r\n    //                         }\r\n    //                         {\r\n    //                             multiIp[parentKey][index][KeyName].hasOwnProperty('AllowedValues') === false || multiIp[parentKey][index][KeyName].AllowedValues.length === 0 ?\r\n    //                                 <Box>\r\n    //                                     <FormControl fullWidth>\r\n    //                                         <label htmlFor={KeyName} required style={{ fontWeight: 'bold' }}>{KeyName}{\r\n    //                                             multiIp[parentKey][index][KeyName].hasOwnProperty('ConstraintDescription') === true ?\r\n    //                                                 <span style={{ fontSize: '0.8rem', fontWeight: 'normal', color: 'grey' }}>&nbsp;({multiIp[parentKey][index][KeyName].ConstraintDescription})</span>\r\n    //                                                 :\r\n    //                                                 null\r\n    //                                         }</label>\r\n    //                                         <TextField\r\n    //                                             // id={KeyName}\r\n    //                                             helperText={multiIp[parentKey][index][KeyName].hasOwnProperty('Description') === true ? multiIp[parentKey][index][KeyName].Description : ''}\r\n    //                                             defaultValue={multiIp[parentKey][index][KeyName].hasOwnProperty('Default') === true ? multiIp[parentKey][index][KeyName].Default : ''}\r\n    //                                             required\r\n    //                                             fullWidth\r\n    //                                             type=\"number\"\r\n    //                                             placeholder={\"Enter \" + KeyName}\r\n    //                                             onChange={handleMultiIpValue.bind(this, KeyName, parentKey, index, multiIp[parentKey][index][KeyName].Type, multiIp[parentKey][index][KeyName].hasOwnProperty('MinValue') ? multiIp[parentKey][index][KeyName].MinValue : 0, multiIp[parentKey][index][KeyName].hasOwnProperty('MaxValue') ? multiIp[parentKey][index][KeyName].MaxValue : -1)}\r\n    //                                             variant=\"outlined\"\r\n    //                                         >\r\n    //                                         </TextField>\r\n    //                                     </FormControl>\r\n    //                                 </Box>\r\n    //                                 :\r\n    //                                 null\r\n    //                         }\r\n    //                     </Box>\r\n    //                     :\r\n    //                     null\r\n    //             }\r\n    //         </Box>\r\n    //     )\r\n    // }\r\n\r\n    // const MultiInput = ({ KeyName }) => {\r\n    //     return (\r\n    //         <Box>\r\n    //             {\r\n    //                 multiIp[KeyName].map((item, index) => {\r\n    //                     return (\r\n    //                         <Box key={index}>\r\n    //                             <Box display=\"flex\" justifyContent=\"space-between\">\r\n    //                                 <Grid container>\r\n    //                                     {\r\n    //                                         Object.keys(item).map((ipparam, ipindex) => {\r\n    //                                             return (\r\n    //                                                 <Grid item xs={12} md={6} style={{ padding: '0 10px 0 0' }} key={ipindex}>\r\n    //                                                     <ProcessMultiInput KeyName={ipparam} parentKey={KeyName} index={index} />\r\n    //                                                 </Grid>\r\n    //                                             )\r\n    //                                         })\r\n    //                                     }\r\n    //                                 </Grid>\r\n    //                             </Box>\r\n    //                             <Box display=\"flex\">\r\n    //                                 {\r\n    //                                     multiIp[KeyName].length !== 1 ?\r\n    //                                         <Button\r\n    //                                             color=\"secondary\"\r\n    //                                             variant=\"outlined\"\r\n    //                                             style={{ margin: '0px 10px 10px 0' }}\r\n    //                                             onClick={() => handleRemMultiIp(index, KeyName)}\r\n    //                                         >\r\n    //                                             <ClearIcon />\r\n    //                                         </Button>\r\n    //                                         :\r\n    //                                         <Button\r\n    //                                             color=\"secondary\"\r\n    //                                             variant=\"outlined\"\r\n    //                                             disabled={true}\r\n    //                                             style={{ margin: '0px 10px 10px 0' }}\r\n    //                                         >\r\n    //                                             <ClearIcon />\r\n    //                                         </Button>\r\n    //                                 }\r\n    //                                 {\r\n    //                                     multiIp[KeyName].length - 1 === index ?\r\n    //                                         <Button\r\n    //                                             color=\"primary\"\r\n    //                                             variant=\"outlined\"\r\n    //                                             onClick={() => handleAddMultiIp(KeyName)}\r\n    //                                             style={{ margin: '0px 10px 10px 0' }}\r\n    //                                         >\r\n    //                                             <AddIcon />\r\n    //                                         </Button>\r\n    //                                         :\r\n    //                                         null\r\n    //                                 }\r\n    //                             </Box>\r\n    //                         </Box>\r\n    //                     );\r\n    //                 })\r\n    //             }\r\n    //         </Box>\r\n    //     )\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <Loader open={loader} />\r\n            <Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n            <Dialog\r\n                open={true}\r\n                onClose={() => handleFormSubmit(false)}\r\n                aria-labelledby=\"acc-dialog-title\"\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle id=\"acc-dialog-title\" style={{ borderBottom: '1px solid lightgrey' }}>{formname}</DialogTitle>\r\n                <DialogContent>\r\n                    <Box>\r\n                        <Grid container>\r\n                            {\r\n                                paramList.map((KeyName, Keyindex) => {\r\n                                    if (formProps[KeyName].Type === \"String\" || formProps[KeyName].Type === \"Number\") {\r\n                                        if (formProps[KeyName].hasOwnProperty('value')) {\r\n                                            // formProps[KeyName]['value'] = formProps[KeyName].value\r\n                                        }\r\n                                        else if (formProps[KeyName].hasOwnProperty('Default')) {\r\n                                            formProps[KeyName]['value'] = formProps[KeyName]['Default']\r\n                                        }\r\n                                        else if (formProps[KeyName].hasOwnProperty('AllowedValues') && formProps[KeyName].AllowedValues.length > 0) {\r\n                                            formProps[KeyName]['value'] = formProps[KeyName]['AllowedValues'][0]\r\n                                        }\r\n                                        else {\r\n                                            if (formProps[KeyName].Type === \"Number\") {\r\n                                                if (formProps[KeyName].hasOwnProperty('MinValue')) {\r\n                                                    formProps[KeyName]['value'] = formProps[KeyName].MinValue\r\n                                                }\r\n                                                else if (formProps[KeyName].hasOwnProperty('MaxValue')) {\r\n                                                    formProps[KeyName]['value'] = formProps[KeyName].MaxValue\r\n                                                }\r\n                                                else {\r\n                                                    formProps[KeyName]['value'] = 0\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                formProps[KeyName]['value'] = KeyName\r\n                                            }\r\n                                        }\r\n                                        return (\r\n                                            <Grid key={Keyindex} item xs={12} md={6} style={{ padding: '0 10px 10px 0' }}>\r\n                                                {\r\n                                                    formProps[KeyName].Type === \"String\" || formProps[KeyName].Type === \"Number\" ?\r\n                                                        <ProcessInput KeyName={KeyName} />\r\n                                                        :\r\n                                                        null\r\n                                                }\r\n                                            </Grid>\r\n                                        )\r\n                                    }\r\n                                    else if (formProps[KeyName].Type === \"yaml\" || formProps[KeyName].Type === \"shellscript\") {\r\n                                        let type = formProps[KeyName].Type === \"yaml\" ? \"yaml\" : 'shell'\r\n                                        if (formProps[KeyName].hasOwnProperty('value')) {\r\n                                            // formProps[KeyName]['value'] = formProps[KeyName]['value']\r\n                                        }\r\n                                        else if (formProps[KeyName].hasOwnProperty('Default')) {\r\n                                            formProps[KeyName]['value'] = formProps[KeyName]['Default']\r\n                                        }\r\n                                        return (\r\n                                            <Grid key={Keyindex} item xs={12} style={{ padding: '0 10px 0 0' }}>\r\n                                                <Box className=\"form-editor\">\r\n                                                    <FormControl fullWidth>\r\n                                                        <label htmlFor={KeyName} required style={{ fontWeight: 'bold' }}>{KeyName}{\r\n                                                            formProps[KeyName].hasOwnProperty('ConstraintDescription') === true ?\r\n                                                                <span style={{ fontSize: '0.8rem', fontWeight: 'normal', color: 'grey' }}>&nbsp;({formProps[KeyName].ConstraintDescription})</span>\r\n                                                                :\r\n                                                                null\r\n                                                        }</label>\r\n                                                        <AceEditor\r\n                                                            mode={type}\r\n                                                            theme=\"monokai\"\r\n                                                            tabSize={4}\r\n                                                            defaultValue={formProps[KeyName].hasOwnProperty('Default') === true ? formProps[KeyName].Default : ''}\r\n                                                            value={formProps[KeyName]['value']}\r\n                                                            onChange={(event) => codeChange(KeyName, event)}\r\n                                                        />\r\n                                                        {\r\n                                                            formProps[KeyName].hasOwnProperty('Description') === true ?\r\n                                                                <FormHelperText>{formProps[KeyName].Description}</FormHelperText>\r\n                                                                :\r\n                                                                null\r\n                                                        }\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                            </Grid>\r\n                                        )\r\n                                    }\r\n                                    // else if (formProps[KeyName].Type === \"array\") {\r\n                                    //     multiIp[KeyName] = formProps[KeyName].Parameters\r\n                                    //     return (\r\n                                    //         <Grid container key={Keyindex} >\r\n                                    //             {\r\n                                    //                 formProps[KeyName].Type === \"array\" ?\r\n                                    //                     <Grid key={Keyindex} item xs={12} style={{ padding: '0 0 10px 0' }}>\r\n                                    //                         <Box p={2} boxShadow={2} display=\"flex\" flexDirection=\"column\">\r\n                                    //                             <label htmlFor={KeyName} required style={{ fontWeight: 'bold' }}>{KeyName}{\r\n                                    //                                 formProps[KeyName].hasOwnProperty('ConstraintDescription') === true ?\r\n                                    //                                     <span style={{ fontSize: '0.8rem', fontWeight: 'normal', color: 'grey' }}>&nbsp;({formProps[KeyName].ConstraintDescription})</span>\r\n                                    //                                     :\r\n                                    //                                     null\r\n                                    //                             }</label>\r\n                                    //                             {\r\n                                    //                                 multiIp.hasOwnProperty(KeyName) === true ?\r\n                                    //                                     <MultiInput KeyName={KeyName} />\r\n                                    //                                     :\r\n                                    //                                     null\r\n                                    //                             }\r\n                                    //                         </Box>\r\n                                    //                     </Grid>\r\n                                    //                     :\r\n                                    //                     null\r\n                                    //             }\r\n                                    //         </Grid>\r\n                                    //     )\r\n                                    // }\r\n                                })\r\n                            }\r\n                        </Grid>\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => handleFormSubmit(false)} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        className='api-btn'\r\n                        onClick={handleFormSubmit}\r\n                    >\r\n                        Submit\r\n                \t</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Form;","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Styles\r\nimport TypographyStyles from '../../assets/styles/TypographySyles'\r\nimport ContainerStyles from '../../assets/styles/ContainerStyles'\r\n\r\n// Custom Components\r\nimport Loader from '../../Components/Loader';\r\nimport TopNav from '../../Components/AppNav';\r\nimport Alert from '../../Components/Alert';\r\nimport Footer from '../../Components/Footer/index';\r\nimport DataList from '../../Utils/DataList';\r\nimport StepActions from './actions';\r\nimport Form from '../../Components/Form';\r\nimport Cognitofunctions from '../Cognito/CognitoFunctions';\r\nimport HandleApi from '../../Utils/HandleApi';\r\nimport apipath from '../../Utils/Apipath';\r\nimport apidomain from '../../Utils/ApiDomain';\r\n\r\n// Material UI\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl'\r\n\r\n// React Helmet\r\nimport Helmet from \"react-helmet/es/Helmet\";\r\n\r\n// Material Icons\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\r\n\r\nconst tabStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n        backgroundColor: 'white !important'\r\n    },\r\n    header: {\r\n        boxShadow: 'none',\r\n        background: 'white',\r\n        border: 'none',\r\n        top: '91px'\r\n    }\r\n}));\r\n\r\nconst sidebarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        cursor: 'pointer'\r\n    },\r\n    onhoveritem: {\r\n        '&:hover': {\r\n            backgroundColor: '#e6e8f3'\r\n        }\r\n    }\r\n}));\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box >\r\n                    {children}\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction TabProps(name, index) {\r\n    return {\r\n        id: `${name}-auto-tab-${index}`,\r\n        'aria-controls': `${name}-auto-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst DeployIndex = ({ match }) => {\r\n    const [loader, setLoader] = useState(true)\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [severity, setSeverrity] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [optTab, setOptTab] = useState(0)\r\n    const [showForm, setShowForm] = useState(false)\r\n    const [curFormObj, setCurFormObj] = useState({})\r\n    const [formName, setFormName] = useState('')\r\n    const [curServ, setCurServ] = useState(Object.keys(DataList.ActiveService).length > 0 ? DataList.ActiveService : (sessionStorage.getItem('CurrentService') ? JSON.parse(window.atob(sessionStorage.getItem('CurrentService'))) : {}))\r\n    const [stepJson, setStepJson] = useState({})\r\n    // const [stepJson, setStepJson] = useState({\r\n    //     \"build\": {\r\n    //         \"description\": \"Deploy Build\",\r\n    //         \"hint\": \"Setup Code repo and aws cli before Running this task\",\r\n    //         \"stepid\": \"build\",\r\n    //         \"stepname\": \"Deploy Build for pod deployment\",\r\n    //         \"tasks\": [\r\n    //             {\r\n    //                 \"description\": \"This section build docker image, create ecr repo and push the image to ecr repo\",\r\n    //                 \"filepath\": \"https://devlocal-api-service-templates.s3.amazonaws.com/build.zip?AWSAccessKeyId=ASIA4BL5YJK5CFOLARJR&Signature=2VFord%2F%2BbHj1vmzSuc2l2tqyWbk%3D&x-amz-security-token=IQoJb3JpZ2luX2VjEOb%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJGMEQCIC9MQr5Ytz3vIyibUYtWSQCG1dBQKA%2F1Mq3DDE7YIQYuAiAS6YU8Tx3ez1qqUFv9HwaDjfs%2Bk3WJy5rTu4kKJ3ayeCrcAQg%2BEAIaDDgyNzU4MTgxMTM4NiIM9BVXgKLWXpEeW6OiKrkBNdfbp3kmtkYrK01IcySFe%2BA%2BNd2erqrx%2FuL8e5pZCX%2FgemwJdtNZACo3OlnJVlVW%2B3QOuLD4cP%2Bh63bDcwMLqPLIwT1hE5R4YtJ6X89ho1yq8r9qqss%2B4w9p7s79FD3TKMTxBWhY3X07WdlSTV%2BPlCN7m4s%2B9eXpm4BafddGE0qI%2FjT21o3ZgLExiq0FDeUr%2FWjDVSlxya3XW6rZyQbo%2Ftp%2BTuYAf3A6ZAbZrxCoDPYAV4X3T2kms3UwmP60gwY64QExmT5nMwojxfsj3GXJJGFFtpLhXa%2BZKz4JuHAoygOP%2Fnjz%2BB2oLnpgA2F0gPyOdfZG40xDnWR8J4ixmhzrIV6Hcmmipa6KzvDRqd0eWNSgGO%2BGi2IsjSQ3cptmne3mkcuBU8okBuNH1zFXV705qzPRMYe9u69QKjqjohygzorixvUdiEIzn7i2dY%2Blgw3rjkCQnD%2BOCvvlwCxKr4N991ramdniKPIsJ%2BFNSpFlYwk3%2BuZbZERVSPmczS1Waq%2BB1viFnz6dR1lRkRMZgX1moEh0H%2F62SbXAFbLOUblbupW7ijk%3D&Expires=1617772629\",\r\n    //                 \"input_options\": {\r\n\r\n    //                 },\r\n    //                 \"taskname\": \"deploy build\",\r\n    //                 \"taskno\": 1\r\n    //             }\r\n    //         ],\r\n    //         \"title\": \"AWS Interface\"\r\n    //     },\r\n    //     \"dynamodb\": {\r\n    //         \"description\": \"Deploy DynamoDB Tables\",\r\n    //         \"hint\": \"Setup Code repo and aws cli before Running this task\",\r\n    //         \"stepid\": \"dynamodb\",\r\n    //         \"stepname\": \"Deploy DynamoDB Tables\",\r\n    //         \"tasks\": [\r\n    //             {\r\n    //                 \"description\": \"This section deployes dynamodb tables using cloudformation\",\r\n    //                 \"filepath\": \"https://devlocal-api-service-templates.s3.amazonaws.com/dynamodb.zip?AWSAccessKeyId=ASIA4BL5YJK5CFOLARJR&Signature=KpSFCq%2FqUxX3gDgC09V8eLebq4U%3D&x-amz-security-token=IQoJb3JpZ2luX2VjEOb%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJGMEQCIC9MQr5Ytz3vIyibUYtWSQCG1dBQKA%2F1Mq3DDE7YIQYuAiAS6YU8Tx3ez1qqUFv9HwaDjfs%2Bk3WJy5rTu4kKJ3ayeCrcAQg%2BEAIaDDgyNzU4MTgxMTM4NiIM9BVXgKLWXpEeW6OiKrkBNdfbp3kmtkYrK01IcySFe%2BA%2BNd2erqrx%2FuL8e5pZCX%2FgemwJdtNZACo3OlnJVlVW%2B3QOuLD4cP%2Bh63bDcwMLqPLIwT1hE5R4YtJ6X89ho1yq8r9qqss%2B4w9p7s79FD3TKMTxBWhY3X07WdlSTV%2BPlCN7m4s%2B9eXpm4BafddGE0qI%2FjT21o3ZgLExiq0FDeUr%2FWjDVSlxya3XW6rZyQbo%2Ftp%2BTuYAf3A6ZAbZrxCoDPYAV4X3T2kms3UwmP60gwY64QExmT5nMwojxfsj3GXJJGFFtpLhXa%2BZKz4JuHAoygOP%2Fnjz%2BB2oLnpgA2F0gPyOdfZG40xDnWR8J4ixmhzrIV6Hcmmipa6KzvDRqd0eWNSgGO%2BGi2IsjSQ3cptmne3mkcuBU8okBuNH1zFXV705qzPRMYe9u69QKjqjohygzorixvUdiEIzn7i2dY%2Blgw3rjkCQnD%2BOCvvlwCxKr4N991ramdniKPIsJ%2BFNSpFlYwk3%2BuZbZERVSPmczS1Waq%2BB1viFnz6dR1lRkRMZgX1moEh0H%2F62SbXAFbLOUblbupW7ijk%3D&Expires=1617772629\",\r\n    //                 \"input_options\": {\r\n\r\n    //                 },\r\n    //                 \"taskname\": \"deploy dynamodb\",\r\n    //                 \"taskno\": 1\r\n    //             }\r\n    //         ],\r\n    //         \"title\": \"AWS Interface\"\r\n    //     },\r\n    //     \"eks\": {\r\n    //         \"description\": \"Deploy EKS\",\r\n    //         \"hint\": \"Setup Code repo and aws cli and deploy vpc before Running this task\",\r\n    //         \"stepid\": \"eks\",\r\n    //         \"stepname\": \"Deploy EKS\",\r\n    //         \"tasks\": [\r\n    //             {\r\n    //                 \"description\": \"This section deployes a aws eks cluster with ingresscontroller and metric server\",\r\n    //                 \"filepath\": \"https://devlocal-api-service-templates.s3.amazonaws.com/eks.zip?AWSAccessKeyId=ASIA4BL5YJK5CFOLARJR&Signature=Kph0irbgRTYij5yy0FrD2%2FX3dlU%3D&x-amz-security-token=IQoJb3JpZ2luX2VjEOb%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJGMEQCIC9MQr5Ytz3vIyibUYtWSQCG1dBQKA%2F1Mq3DDE7YIQYuAiAS6YU8Tx3ez1qqUFv9HwaDjfs%2Bk3WJy5rTu4kKJ3ayeCrcAQg%2BEAIaDDgyNzU4MTgxMTM4NiIM9BVXgKLWXpEeW6OiKrkBNdfbp3kmtkYrK01IcySFe%2BA%2BNd2erqrx%2FuL8e5pZCX%2FgemwJdtNZACo3OlnJVlVW%2B3QOuLD4cP%2Bh63bDcwMLqPLIwT1hE5R4YtJ6X89ho1yq8r9qqss%2B4w9p7s79FD3TKMTxBWhY3X07WdlSTV%2BPlCN7m4s%2B9eXpm4BafddGE0qI%2FjT21o3ZgLExiq0FDeUr%2FWjDVSlxya3XW6rZyQbo%2Ftp%2BTuYAf3A6ZAbZrxCoDPYAV4X3T2kms3UwmP60gwY64QExmT5nMwojxfsj3GXJJGFFtpLhXa%2BZKz4JuHAoygOP%2Fnjz%2BB2oLnpgA2F0gPyOdfZG40xDnWR8J4ixmhzrIV6Hcmmipa6KzvDRqd0eWNSgGO%2BGi2IsjSQ3cptmne3mkcuBU8okBuNH1zFXV705qzPRMYe9u69QKjqjohygzorixvUdiEIzn7i2dY%2Blgw3rjkCQnD%2BOCvvlwCxKr4N991ramdniKPIsJ%2BFNSpFlYwk3%2BuZbZERVSPmczS1Waq%2BB1viFnz6dR1lRkRMZgX1moEh0H%2F62SbXAFbLOUblbupW7ijk%3D&Expires=1617772629\",\r\n    //                 \"formfill\": true,\r\n    //                 \"input_options\": {\r\n    //                     \"Clustername\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"String\",\r\n    //                         \"Default\": \"myekscluster\"\r\n    //                     },\r\n    //                     \"DesiredCapacity\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"Number\",\r\n    //                         \"Default\": 3\r\n    //                     },\r\n    //                     \"InstanceType\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"String\",\r\n    //                         \"Default\": \"t3a.medium\"\r\n    //                     },\r\n    //                     \"KeyName\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"String\",\r\n    //                         \"Default\": \"eksnodekey\"\r\n    //                     },\r\n    //                     \"MaxSize\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"Number\",\r\n    //                         \"Default\": 3,\r\n    //                     },\r\n    //                     \"MinSize\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"Number\",\r\n    //                         \"Default\": 1\r\n    //                     },\r\n    //                     \"NodeGrpName\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"String\",\r\n    //                         \"Default\": \"nodegrp1\"\r\n    //                     },\r\n    //                     \"Volume\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"Number\",\r\n    //                         \"Default\": 20\r\n    //                     }\r\n    //                 },\r\n    //                 \"taskname\": \"deploy eks\",\r\n    //                 \"taskno\": 1\r\n    //             }\r\n    //         ],\r\n    //         \"title\": \"AWS Interface\"\r\n    //     },\r\n    //     \"helm\": {\r\n    //         \"description\": \"Application Deployment on EKS\",\r\n    //         \"hint\": \"Setup Code repo and aws cli and deploy vpc and deploy eks cluster before Running this task\",\r\n    //         \"stepid\": \"helm\",\r\n    //         \"stepname\": \"Deploy Application on EKS\",\r\n    //         \"tasks\": [\r\n    //             {\r\n    //                 \"description\": \"This section deployes a helm chart containing deployment, service, ingress and hpa on the eks cluster\",\r\n    //                 \"filepath\": \"https://devlocal-api-service-templates.s3.amazonaws.com/helm.zip?AWSAccessKeyId=ASIA4BL5YJK5CFOLARJR&Signature=pVcpzfRN1Y4h4xMLAddfMV7eY0A%3D&x-amz-security-token=IQoJb3JpZ2luX2VjEOb%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJGMEQCIC9MQr5Ytz3vIyibUYtWSQCG1dBQKA%2F1Mq3DDE7YIQYuAiAS6YU8Tx3ez1qqUFv9HwaDjfs%2Bk3WJy5rTu4kKJ3ayeCrcAQg%2BEAIaDDgyNzU4MTgxMTM4NiIM9BVXgKLWXpEeW6OiKrkBNdfbp3kmtkYrK01IcySFe%2BA%2BNd2erqrx%2FuL8e5pZCX%2FgemwJdtNZACo3OlnJVlVW%2B3QOuLD4cP%2Bh63bDcwMLqPLIwT1hE5R4YtJ6X89ho1yq8r9qqss%2B4w9p7s79FD3TKMTxBWhY3X07WdlSTV%2BPlCN7m4s%2B9eXpm4BafddGE0qI%2FjT21o3ZgLExiq0FDeUr%2FWjDVSlxya3XW6rZyQbo%2Ftp%2BTuYAf3A6ZAbZrxCoDPYAV4X3T2kms3UwmP60gwY64QExmT5nMwojxfsj3GXJJGFFtpLhXa%2BZKz4JuHAoygOP%2Fnjz%2BB2oLnpgA2F0gPyOdfZG40xDnWR8J4ixmhzrIV6Hcmmipa6KzvDRqd0eWNSgGO%2BGi2IsjSQ3cptmne3mkcuBU8okBuNH1zFXV705qzPRMYe9u69QKjqjohygzorixvUdiEIzn7i2dY%2Blgw3rjkCQnD%2BOCvvlwCxKr4N991ramdniKPIsJ%2BFNSpFlYwk3%2BuZbZERVSPmczS1Waq%2BB1viFnz6dR1lRkRMZgX1moEh0H%2F62SbXAFbLOUblbupW7ijk%3D&Expires=1617772629\",\r\n    //                 \"formfill\": true,\r\n    //                 \"input_options\": {\r\n    //                     \"Clustername\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"String\",\r\n    //                         \"Default\": \"myekscluster\"\r\n    //                     },\r\n    //                     \"DesiredCapacity\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"Number\",\r\n    //                         \"Default\": 3\r\n    //                     },\r\n    //                     \"InstanceType\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"String\",\r\n    //                         \"Default\": \"t3a.medium\"\r\n    //                     },\r\n    //                     \"KeyName\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"String\",\r\n    //                         \"Default\": \"eksnodekey\"\r\n    //                     },\r\n    //                     \"MaxSize\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"Number\",\r\n    //                         \"Default\": 3,\r\n    //                     },\r\n    //                     \"MinSize\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"Number\",\r\n    //                         \"Default\": 1\r\n    //                     },\r\n    //                     \"NodeGrpName\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"String\",\r\n    //                         \"Default\": \"nodegrp1\"\r\n    //                     },\r\n    //                     \"Volume\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"Number\",\r\n    //                         \"Default\": 20\r\n    //                     }\r\n    //                 },\r\n    //                 \"taskname\": \"deploy helm\",\r\n    //                 \"taskno\": 1\r\n    //             }\r\n    //         ],\r\n    //         \"title\": \"AWS Interface\"\r\n    //     },\r\n    //     \"optionname\": \"deployeksservice\",\r\n    //     \"servicetype\": curServ['servicetype'],\r\n    //     \"steporder\": [\r\n    //         \"vpc\",\r\n    //         \"eks\",\r\n    //         \"dynamodb\",\r\n    //         \"build\",\r\n    //         \"helm\"\r\n    //     ],\r\n    //     \"vpc\": {\r\n    //         \"description\": \"Deploy Vpc\",\r\n    //         \"hint\": \"Setup Code repo and aws cli before Running this task\",\r\n    //         \"stepid\": \"vpc\",\r\n    //         \"stepname\": \"Deploy Vpc\",\r\n    //         \"tasks\": [\r\n    //             {\r\n    //                 \"description\": \"This section deployes a vpc with natgw \",\r\n    //                 \"filepath\": \"https://devlocal-api-service-templates.s3.amazonaws.com/vpc.zip?AWSAccessKeyId=ASIA4BL5YJK5CFOLARJR&Signature=AGwImtl%2Fir1EnLZnudJvpDF2hmE%3D&x-amz-security-token=IQoJb3JpZ2luX2VjEOb%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJGMEQCIC9MQr5Ytz3vIyibUYtWSQCG1dBQKA%2F1Mq3DDE7YIQYuAiAS6YU8Tx3ez1qqUFv9HwaDjfs%2Bk3WJy5rTu4kKJ3ayeCrcAQg%2BEAIaDDgyNzU4MTgxMTM4NiIM9BVXgKLWXpEeW6OiKrkBNdfbp3kmtkYrK01IcySFe%2BA%2BNd2erqrx%2FuL8e5pZCX%2FgemwJdtNZACo3OlnJVlVW%2B3QOuLD4cP%2Bh63bDcwMLqPLIwT1hE5R4YtJ6X89ho1yq8r9qqss%2B4w9p7s79FD3TKMTxBWhY3X07WdlSTV%2BPlCN7m4s%2B9eXpm4BafddGE0qI%2FjT21o3ZgLExiq0FDeUr%2FWjDVSlxya3XW6rZyQbo%2Ftp%2BTuYAf3A6ZAbZrxCoDPYAV4X3T2kms3UwmP60gwY64QExmT5nMwojxfsj3GXJJGFFtpLhXa%2BZKz4JuHAoygOP%2Fnjz%2BB2oLnpgA2F0gPyOdfZG40xDnWR8J4ixmhzrIV6Hcmmipa6KzvDRqd0eWNSgGO%2BGi2IsjSQ3cptmne3mkcuBU8okBuNH1zFXV705qzPRMYe9u69QKjqjohygzorixvUdiEIzn7i2dY%2Blgw3rjkCQnD%2BOCvvlwCxKr4N991ramdniKPIsJ%2BFNSpFlYwk3%2BuZbZERVSPmczS1Waq%2BB1viFnz6dR1lRkRMZgX1moEh0H%2F62SbXAFbLOUblbupW7ijk%3D&Expires=1617772629\",\r\n    //                 \"formfill\": true,\r\n    //                 \"input_options\": {\r\n    //                     \"Clustername\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"String\",\r\n    //                         \"Default\": \"myekscluster\"\r\n    //                     },\r\n    //                     \"DesiredCapacity\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"Number\",\r\n    //                         \"Default\": 3\r\n    //                     },\r\n    //                     \"InstanceType\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"String\",\r\n    //                         \"Default\": \"t3a.medium\"\r\n    //                     },\r\n    //                     \"KeyName\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"String\",\r\n    //                         \"Default\": \"eksnodekey\"\r\n    //                     },\r\n    //                     \"MaxSize\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"Number\",\r\n    //                         \"Default\": 3,\r\n    //                     },\r\n    //                     \"MinSize\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"Number\",\r\n    //                         \"Default\": 1\r\n    //                     },\r\n    //                     \"NodeGrpName\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"String\",\r\n    //                         \"Default\": \"nodegrp1\"\r\n    //                     },\r\n    //                     \"Volume\": {\r\n    //                         \"Mandatory\": true,\r\n    //                         \"Type\": \"Number\",\r\n    //                         \"Default\": 20\r\n    //                     }\r\n    //                 },\r\n    //                 \"taskname\": \"deploy vpc\",\r\n    //                 \"taskno\": 1\r\n    //             }\r\n    //         ],\r\n    //         \"title\": \"AWS Interface\"\r\n    //     }\r\n    // })\r\n    const [options, setOptions] = useState([])\r\n    // const [options, setOptions] = useState([])\r\n    const [activeStep, setActiveStep] = useState(\"\")\r\n    // const [activeStep, setActiveStep] = useState(\"scroll-\" + stepJson['steporder'][0] + stepJson['steporder'].indexOf(stepJson['steporder'][0]))\r\n    const [curStep, setCurStep] = useState({})\r\n    const [activeTask, setActiveTask] = useState({})\r\n    const [dialog, setDialog] = useState(false)\r\n    const [formData, setFormData] = useState({})\r\n    const [isPublish, setIsPublish] = useState(false)\r\n    const [curOption, setCurOption] = useState('')\r\n    const [singleScript, setSingleScript] = useState({\r\n        \"build\": {\r\n            \"description\": \"Deploy Build\",\r\n            \"hint\": \"Setup Code repo and aws cli before Running this task\",\r\n            \"stepid\": \"build\",\r\n            \"stepname\": \"Deploy Build for pod deployment\",\r\n            \"tasks\": [\r\n                {\r\n                    \"description\": \"This section build docker image, create ecr repo and push the image to ecr repo\",\r\n                    \"taskname\": \"deploy build\",\r\n                    \"taskno\": 1\r\n                }\r\n            ],\r\n            \"title\": \"AWS Interface\"\r\n        },\r\n    })\r\n    const [showPublish, setShowPublish] = useState(true)\r\n    const [branches, setBranches] = useState([])\r\n    const [showBranches, setShowBranches] = useState(false)\r\n    const [curBr, setCurBr] = useState({\r\n        \"Branchname\": \"Select Branch\",\r\n        \"Name\": \"\"\r\n    })\r\n\r\n    const containerClasses = ContainerStyles()\r\n    const typographyClasses = TypographyStyles()\r\n    const tabClasses = tabStyles();\r\n    const sideBarClasses = sidebarStyles()\r\n\r\n    let interval = '', intervalFlag = false\r\n\r\n    useEffect(() => {\r\n        checkrole()\r\n        // HandleForms(stepJson)\r\n    }, [])\r\n\r\n    const checkrole = () => {\r\n        Cognitofunctions.CurrentUser(function (success, data) {\r\n            if (success) {\r\n                let apidata = {\r\n                    ref: \"GetServiceOptions\",\r\n                    path: apipath['publish'] + \"/getoption/\" + match.params.serviceid + \"/\" + curServ['optionname'],\r\n                    headers: {\r\n                        headers: true,\r\n                        apidomain: apidomain.vmurl\r\n                    },\r\n                    method: \"GET\",\r\n                    body: {}\r\n                }\r\n                manageAPIs(apidata)\r\n            }\r\n            else {\r\n                setMessage('You are not authorized to access this page.')\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n                setLoader(false)\r\n                setTimeout(function () {\r\n                    window.location.href = window.location.origin + \"/#/app/login\"\r\n                    window.location.reload()\r\n                }, 1000)\r\n            }\r\n        })\r\n    }\r\n\r\n    const manageAPIs = (apidata) => {\r\n        HandleApi.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n            .then(result => {\r\n                if (result.hasOwnProperty('message') && result.message !== \"\") {\r\n                    setMessage(result.message)\r\n                    setSeverrity('info')\r\n                    setOpenAlert(true)\r\n                }\r\n                if ((result.hasOwnProperty('statusCode') && result.statusCode === 200) || (result.hasOwnProperty('status') && (result.status === 200 || result.status === \"200\"))) {\r\n                    if (apidata.ref === \"GetServiceOptions\") {\r\n                        setOptions([curServ['optionname']])\r\n                        setCurOption(curServ['optionname'])\r\n                        setStepJson(result.body)\r\n                        setLoader(false)\r\n                        // if (result.body.length > 0) {\r\n                        //     setCurOption(result.body[0])\r\n                        //     let nextAPIdata = {\r\n                        //         ref: \"GetOptionMeta\",\r\n                        //         path: \"/servicetemplates/templates\",\r\n                        //         headers: true,\r\n                        //         method: \"POST\",\r\n                        //         body: {\r\n                        //             // servicetype: curServ.servicetype\r\n                        //             servicetype: curServ['servicetype'],\r\n                        //             optionname: result.body[0]\r\n                        //         }\r\n                        //     }\r\n                        //     manageAPIs(nextAPIdata)\r\n                        // }\r\n                    }\r\n                    else if (apidata.ref === \"GetFormattedSteps\") {\r\n                        setStepJson(result.body)\r\n                        setActiveStep(\"scroll-\" + result.body['steporder'][0] + result.body['steporder'].indexOf(result.body['steporder'][0]))\r\n                        HandleForms(result.body)\r\n                        setLoader(false)\r\n                    }\r\n                    else if (apidata.ref === \"PublishOption\") {\r\n                        setDialog(false)\r\n                        setLoader(false)\r\n                        setFormName('')\r\n                        setShowPublish(false)\r\n\r\n                        let finaljson = result.body[curOption]\r\n                        finaljson['steporder'] = Object.keys(finaljson)\r\n                        finaljson[finaljson['steporder'][0]]['stepname'] = finaljson['steporder'][0]\r\n                        finaljson[finaljson['steporder'][0]]['stepid'] = finaljson['steporder'][0]\r\n                        setCurStep({})\r\n                        setStepJson({})\r\n                        setActiveTask({})\r\n                        setStepJson(finaljson)\r\n                        setActiveStep(\"scroll-\" + finaljson['steporder'][0] + finaljson['steporder'].indexOf(finaljson['steporder'][0]))\r\n                    }\r\n                    else if (apidata.ref === \"GetOptionMeta\") {\r\n                        let nextAPIdata = {\r\n                            ref: \"GetFormattedSteps\",\r\n                            path: apipath['publish'] + \"/unzipfile/\" + match.params.serviceid,\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                            method: \"POST\",\r\n                            body: {\r\n                                optionjson: result.body\r\n                            }\r\n                        }\r\n                        manageAPIs(nextAPIdata)\r\n                    }\r\n                    else if (apidata.ref === \"UpdateTask\") {\r\n                        let tasks = curStep['tasks']\r\n                        for (let i = 0; i < tasks.length; i++) {\r\n                            if (result.body.taskno === tasks[i]['taskno']) {\r\n                                let index = i\r\n                                tasks.splice(index, 1)\r\n                                tasks.splice(index, 0, result.body)\r\n                                break;\r\n                            }\r\n                        }\r\n                        let stepjson = stepJson\r\n                        stepjson[curStep['stepid']]['tasks'] = tasks\r\n\r\n                        let actstep = curStep\r\n                        actstep['tasks'] = tasks\r\n\r\n                        setCurStep(actstep)\r\n                        setStepJson({})\r\n                        setStepJson(stepjson)\r\n                        setShowForm(false)\r\n                        setFormName('')\r\n                        setCurFormObj({})\r\n                        setLoader(false)\r\n                        HandleForms(stepjson)\r\n                    }\r\n                    else if (apidata.ref === \"GetOptionJson\") {\r\n                        setStepJson(result.body)\r\n                        setLoader(false)\r\n                    }\r\n                    else if (apidata.ref == \"GetBranchesByCategory\") {\r\n                        setFormName('Publish Option')\r\n                        setDialog(true)\r\n                        setBranches(result.body)\r\n                        setLoader(false)\r\n                    }\r\n                    else if (apidata.ref === \"GeneratorJob\") {\r\n                        let apidata1 = {\r\n                            ref: \"GetGeneratorStatus\",\r\n                            body: {},\r\n                            path: apipath['publish'] + \"/generator/\" + match.params.serviceid,\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                            method: \"GET\"\r\n                        }\r\n                        manageAPIs(apidata1)\r\n                    }\r\n                    else if (apidata.ref === \"GetGeneratorStatus\") {\r\n                        if (result.body.jobstatus === \"completed\") {\r\n                            clearInterval(interval)\r\n                            let apidata1 = {\r\n                                ref: \"GetBranchesByCategory\",\r\n                                cat: \"shared\",\r\n                                body: {},\r\n                                path: apipath['datastore'] + \"/git/getbranch/environmentdeploybranch\",\r\n                                headers: {\r\n                                    headers: true,\r\n                                    apidomain: apidomain.vmurl\r\n                                }\r\n                            }\r\n                            manageAPIs(apidata1)\r\n                        }\r\n                        else if (result.body.jobstatus === \"Not Deployed\") {\r\n                            let apidata1 = {\r\n                                ref: \"GeneratorJob\",\r\n                                body: {\r\n                                    \"optionname\": curOption\r\n                                },\r\n                                path: apipath['publish'] + \"/generator/\" + match.params.serviceid + \"/\" + curOption,\r\n                                headers: {\r\n                                    headers: true,\r\n                                    apidomain: apidomain.vmurl\r\n                                },\r\n                                method: \"POST\"\r\n                            }\r\n                            manageAPIs(apidata1)\r\n                        }\r\n                        else {\r\n                            if (result.body.jobstatus === \"error\") {\r\n                                clearInterval(interval)\r\n                                intervalFlag = false\r\n                                setMessage('Some internal error, You cannot Publish Now.')\r\n                                setSeverrity('error')\r\n                                setOpenAlert(true)\r\n                                setLoader(false)\r\n                            }\r\n                            else {\r\n                                if (!intervalFlag) {\r\n                                    intervalFlag = true\r\n                                    handleAPIInterval()\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    setMessage(result.errorMessage)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                    setLoader(false)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                setMessage(\"Some internal error,Please try after some time.\")\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n                setLoader(false)\r\n            })\r\n    }\r\n\r\n    const handleActions = (apidata) => {\r\n        if (apidata.Action === 'redirect') {\r\n            window.open(apidata.url, '_blank')\r\n        }\r\n        else if (apidata.Action === 'refresh') {\r\n            setActiveStep('')\r\n            setCurStep({})\r\n            setIsPublish(false)\r\n            setActiveTask({})\r\n            setStepJson({})\r\n            let apidata = {\r\n                \"ref\": \"GetOptionJson\",\r\n                \"path\": apipath['publish'] + \"/getoption/\" + match.params.serviceid + \"/\" + curOption,\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                method: \"GET\",\r\n                body: {}\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n\r\n    const handleStepClick = (key, index) => {\r\n        setActiveStep(\"scroll-\" + key + index)\r\n        setCurStep(stepJson[key])\r\n        let elmnt = document.getElementById(\"scroll-\" + key + index);\r\n        elmnt.scrollIntoView();\r\n    }\r\n\r\n    const Sidebar = () => {\r\n        return (\r\n            <Box style={{ height: 'calc(100vh - 157px)' }} bgcolor=\"#FAFBFC\" overflow=\"auto\">\r\n                {/* <Box>\r\n                    <Box p={1} color=\"#242424\" style={{ cursor: 'pointer' }} onClick={() => {\r\n                        let elmnt = document.getElementById(\"single-script-blk\");\r\n                        elmnt.scrollIntoView();\r\n                    }}>\r\n                        <Typography className={`${typographyClasses.bold} ${typographyClasses.h6}`} align=\"left\">Single Script</Typography>\r\n                    </Box>\r\n                </Box> */}\r\n                <Box p={1} bgcolor=\"#abb7fc\" color=\"#242424\">\r\n                    <Typography className={`${typographyClasses.bold} ${typographyClasses.h6}`} align=\"left\">Steps</Typography>\r\n                </Box>\r\n                {\r\n                    stepJson.hasOwnProperty('steporder') === true ?\r\n                        stepJson['steporder'].map((actorder, index) => {\r\n                            return (\r\n                                <Box key={index} style={{ cursor: 'pointer', borderColor: 'lightgray' }} className={`${sideBarClasses.root} ${sideBarClasses.onhoveritem}`} onClick={() => handleStepClick(actorder, index)}\r\n                                    bgcolor={activeStep === \"scroll-\" + actorder + index ? \"#e6e8f3\" : \"transparent\"}\r\n                                    borderBottom={1}>\r\n                                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"flex-start\" p={1}>\r\n                                        <Box display=\"flex\" p={1} width={30} height={30} style={{ borderRadius: '50%' }} alignItems=\"center\" justifyContent=\"center\" mr={2} color=\"white\" bgcolor=\"#3f51b5\">\r\n                                            <Typography className={`${typographyClasses.smallText}`}>{index + 1}</Typography>\r\n                                        </Box>\r\n                                        <Box display=\"flex\" >\r\n                                            <Typography className={`${typographyClasses.smallText}`} color=\"primary\" align=\"left\">{stepJson[actorder]['stepname']}</Typography>\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Box>\r\n                            )\r\n                        })\r\n                        :\r\n                        null\r\n                }\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    const ProcesssTasks = ({ step, dpindex }) => {\r\n        let tasksarr = stepJson[step]['tasks']\r\n        return (\r\n            <Box p={1} pt={0}>\r\n                {\r\n                    tasksarr.map((tsk, index) => {\r\n                        let actionjson = { \"dummy\": \"a\" }\r\n                        if (tsk.hasOwnProperty('createscript')) {\r\n                            actionjson['Create'] = { \"script\": tsk['createscript'] }\r\n                        }\r\n                        if (tsk.hasOwnProperty('updatescript')) {\r\n                            actionjson['Update'] = { \"script\": tsk['updatescript'] }\r\n                        }\r\n                        if (tsk.hasOwnProperty('deletescript')) {\r\n                            actionjson['Delete'] = { \"script\": tsk['deletescript'] }\r\n                        }\r\n                        if (tsk.hasOwnProperty('initscript')) {\r\n                            actionjson['initscript'] = tsk['initscript']\r\n                        }\r\n                        delete actionjson['dummy']\r\n                        return (\r\n                            <Box key={index} color=\"#616161\" boxShadow={2} mb={1}>\r\n                                <Box>\r\n                                    <Box display=\"flex\" color=\"#616161\" p={1} bgcolor=\"#d6d6d6\">\r\n                                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" style={{ width: '100%' }}>\r\n                                            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"flex-start\">\r\n                                                <Box display=\"flex\" p={1} width={35} height={35} style={{ borderRadius: '50%' }} alignItems=\"center\" justifyContent=\"center\" mr={2} bgcolor=\"#616161\" color=\"white\">\r\n                                                    <Typography className={`${typographyClasses.smallText}`}>{(dpindex + 1) + \".\" + (index + 1)}</Typography>\r\n                                                </Box>\r\n                                                <Box display=\"flex\">\r\n                                                    <Typography className={`${typographyClasses.text} ${typographyClasses.bold}`}>{tsk['taskname']}</Typography>\r\n                                                </Box>\r\n                                            </Box>\r\n                                            {\r\n                                                tsk.hasOwnProperty('formfill') === true && tsk['formfill'] === true ?\r\n                                                    tsk.hasOwnProperty('input_options') === true && Object.keys(tsk['input_options']).length > 0 ?\r\n                                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                                            <Button\r\n                                                                variant=\"contained\"\r\n                                                                color=\"secondary\"\r\n                                                                onClick={() => {\r\n                                                                    setActiveTask(tsk)\r\n                                                                    setActiveStep(\"scroll-\" + step + stepJson['steporder'].indexOf(step))\r\n                                                                    setCurStep(stepJson[step])\r\n                                                                    setCurFormObj(tsk['input_options'])\r\n                                                                    setFormName(tsk['taskname'])\r\n                                                                    setShowForm(true)\r\n                                                                }}\r\n                                                            >\r\n                                                                Fill inputs\r\n                                                            </Button>\r\n                                                        </Box>\r\n                                                        :\r\n                                                        null\r\n                                                    :\r\n                                                    null\r\n                                            }\r\n                                        </Box>\r\n                                    </Box>\r\n                                    <Box p={1.5}>\r\n                                        {\r\n                                            tsk.hasOwnProperty('description') === true && tsk['description'] !== \"\" ?\r\n                                                <Box display=\"flex\" mb={2}>\r\n                                                    <Typography className={`${typographyClasses.smallText}`} align=\"left\">{tsk['description']}</Typography>\r\n                                                </Box>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                        <Box>\r\n                                            <StepActions actions={actionjson} />\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Box>\r\n                            </Box>\r\n                        )\r\n                    })\r\n                }\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    const handleOptTab = (event, newValue) => {\r\n        setOptTab(newValue)\r\n    }\r\n\r\n    const FormHandler = (key, ipparams) => {\r\n        if (!key) {\r\n            setShowForm(false)\r\n            setCurFormObj({})\r\n            setFormName('')\r\n            setActiveTask({})\r\n            setCurStep({})\r\n            setIsPublish(false)\r\n        }\r\n        else {\r\n            setLoader(true)\r\n            let task = activeTask\r\n            task['input_options'] = ipparams\r\n            // task['formfill'] = false\r\n            let apidata = {\r\n                ref: \"UpdateTask\",\r\n                body: {\r\n                    \"task\": task,\r\n                    \"serviceid\": match.params.serviceid,\r\n                },\r\n                path: apipath['publish'] + \"/putinput/\" + curOption,\r\n                method: \"POST\",\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                }\r\n            }\r\n            // console.log(apidata['body'])\r\n            manageAPIs(apidata)\r\n            // let tasks = curStep['tasks']\r\n            // for (let i = 0; i < tasks.length; i++) {\r\n            //     if (task.taskno === tasks[i]['taskno']) {\r\n            //         let index = i\r\n            //         tasks.splice(index, 1)\r\n            //         tasks.splice(index, 0, task)\r\n            //         break;\r\n            //     }\r\n            // }\r\n            // let stepjson = stepJson\r\n            // stepjson[curStep['stepid']]['tasks'] = tasks\r\n\r\n            // let actstep = curStep\r\n            // actstep['tasks'] = tasks\r\n\r\n            // setCurStep(actstep)\r\n            // setStepJson({})\r\n            // setStepJson(stepjson)\r\n            // setShowForm(false)\r\n            // setFormName('')\r\n            // setCurFormObj({})\r\n            // setLoader(false)\r\n            // HandleForms(stepjson)\r\n        }\r\n    }\r\n\r\n    const handleFormDataChage = (field, event) => {\r\n        let formFields = formData;\r\n        formFields[field] = event.target.value;\r\n        setFormData(formFields);\r\n    }\r\n\r\n    const CheckForPublish = () => {\r\n        if (isPublish) {\r\n            setLoader(true)\r\n            let apidata1 = {\r\n                ref: \"GetGeneratorStatus\",\r\n                body: {},\r\n                path: apipath['publish'] + \"/generator/\" + match.params.serviceid,\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                method: \"GET\"\r\n            }\r\n            manageAPIs(apidata1)\r\n        }\r\n        else {\r\n            setLoader(true)\r\n            setIsPublish(true)\r\n            HandleForms(stepJson)\r\n        }\r\n    }\r\n\r\n    const HandleForms = (steps) => {\r\n        let flag = false, stor = steps['steporder']\r\n        for (let i = 0; i < stor.length; i++) {\r\n            if (steps[stor[i]].hasOwnProperty('tasks') && steps[stor[i]]['tasks'].length > 0) {\r\n                for (let tsk = 0; tsk < steps[stor[i]]['tasks'].length; tsk++) {\r\n                    if (steps[stor[i]]['tasks'][tsk].hasOwnProperty('formfill') && steps[stor[i]]['tasks'][tsk]['formfill']) {\r\n                        flag = true\r\n                        setLoader(false)\r\n                        setActiveStep(\"scroll-\" + stor[i] + i)\r\n                        setCurStep(steps[stor[i]])\r\n                        setActiveTask(steps[stor[i]]['tasks'][tsk])\r\n                        setFormName(steps[stor[i]]['tasks'][tsk]['taskname'])\r\n                        setCurFormObj(steps[stor[i]]['tasks'][tsk]['input_options'])\r\n                        setShowForm(true)\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!flag) {\r\n            setIsPublish(true)\r\n            setLoader(false)\r\n            setMessage('Your deployment scripts are ready, you can publish now.')\r\n            setSeverrity('info')\r\n            setOpenAlert(true)\r\n        }\r\n    }\r\n\r\n    const FormDialogSubmit = () => {\r\n        setLoader(true)\r\n        let canSubmit = true, requireAttrs = [], path = '', ref = ''\r\n        if (formName === \"Publish Option\") {\r\n            requireAttrs.push('commitmessage')\r\n            path = apipath['datastore'] + \"/git/publish/\" + match.params.serviceid + \"/\" + curOption\r\n            ref = \"PublishOption\"\r\n            formData['Branchname'] = curBr['Branchname']\r\n            formData['Name'] = curBr['Name']\r\n        }\r\n        for (let i = 0; i < requireAttrs.length; i++) {\r\n            if (formData[requireAttrs[i]] === undefined || formData[requireAttrs[i]] === \"\" || formData[requireAttrs[i]] === []) {\r\n                canSubmit = false\r\n                setLoader(false)\r\n                setMessage(\"Please fill the required details.\")\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n            }\r\n        }\r\n        if (canSubmit) {\r\n            let apidata = {\r\n                method: \"POST\",\r\n                path: path,\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                body: formData,\r\n                ref: ref\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n    }\r\n\r\n    const handleBranchesPopover = (br) => {\r\n        setCurBr(br)\r\n        setShowBranches(false)\r\n    }\r\n\r\n    const PopulateBranches = () => {\r\n        return (\r\n            <Box display=\"flex\" style={{ width: '100%' }} mt={1}>\r\n                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" style={{ width: '100%', border: '1px solid gray' }} position=\"relative\">\r\n                    <Box onClick={() => { setShowBranches(!showBranches) }} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" style={{ width: '100%', cursor: \"pointer\" }} p={1}>\r\n                        <Box mr={1} display=\"flex\" alignItems=\"center\">\r\n                            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\" >\r\n                                <Box>\r\n                                    <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>{curBr['Branchname']}</Typography>\r\n                                </Box>\r\n                                <Box>\r\n                                    <Typography color=\"inherit\" className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>{curBr['Name']}</Typography>\r\n                                </Box>\r\n                            </Box>\r\n                        </Box>\r\n                        <Box display=\"flex\">\r\n                            {\r\n                                showBranches === true ?\r\n                                    <ArrowDropUpIcon fontSize=\"small\" />\r\n                                    :\r\n                                    <ArrowDropDownIcon fontSize=\"small\" />\r\n                            }\r\n                        </Box>\r\n                    </Box>\r\n                    {\r\n                        showBranches === true ?\r\n                            <Box height={250} style={{ width: '100%', borderTop: '1px solid gray' }}>\r\n                                <Box position=\"relative\" style={{ height: '100%' }}>\r\n                                    <Box overflow=\"auto\" height={210}>\r\n                                        {\r\n                                            branches.length > 0 ?\r\n                                                branches.map((br, index) => {\r\n                                                    return (\r\n                                                        <Box key={index} display=\"flex\" alignItems=\"center\" borderBottom={1} style={{ borderColor: 'lightgray' }} justifyContent=\"space-between\" p={1} bgcolor={curBr.Branchname === br.Branchname ? \"#e6e8f3\" : \"\"} className={`${sideBarClasses.root} ${sideBarClasses.onhoveritem}`} onClick={() => {\r\n                                                            handleBranchesPopover(br)\r\n                                                        }}>\r\n                                                            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n                                                                <Typography className={`${typographyClasses.smallText}`} color={curBr.Branchname === br.Branchname ? \"primary\" : \"inherit\"}>{br['Branchname']}</Typography>\r\n                                                                <Typography className={typographyClasses.smallText} color={curBr.Branchname === br.Branchname ? \"primary\" : \"inherit\"}>{br['Name']}</Typography>\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                    )\r\n                                                })\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </Box>\r\n                                </Box>\r\n                            </Box>\r\n                            :\r\n                            null\r\n                    }\r\n                </Box>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    const handleAPIInterval = (verid) => {\r\n        interval = setInterval(function () {\r\n            let apidata = {\r\n                path: apipath['publish'] + \"/generator/\" + match.params.serviceid,\r\n                ref: \"GetGeneratorStatus\",\r\n                method: \"GET\",\r\n                body: {},\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                }\r\n            }\r\n            manageAPIs(apidata)\r\n        }, 5000)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Helmet>\r\n                <title>Deploy Service</title>\r\n            </Helmet>\r\n            <TopNav />\r\n            <Loader type=\"page\" open={loader} />\r\n            <Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n            <Container className={containerClasses.root} style={{ height: 'calc(100% - 81px)', marginBottom: '30px' }}>\r\n                <Box style={{ width: '100%' }}>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" borderBottom={1} style={{ borderColor: 'lightgray', width: '100%' }} p={1} pt={0.7} pb={0.7} position=\"fixed\" bgcolor=\"white\" zIndex={1}>\r\n                        <Box>\r\n                            <Breadcrumbs separator={<NavigateNextIcon fontSize=\"small\" />} aria-label=\"breadcrumb\">\r\n                                <Box\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    onClick={() => {\r\n                                        sessionStorage.removeItem('CurrentProduct')\r\n                                        sessionStorage.removeItem('Services')\r\n                                        sessionStorage.removeItem('CurrentService')\r\n                                        DataList.ActiveService = {}\r\n                                        DataList.ActiveProduct = {}\r\n                                        DataList.ServiceList = []\r\n                                        window.location.href = window.location.origin + \"/#/app/products\"\r\n                                    }}\r\n                                >\r\n                                    <Typography className={`${typographyClasses.text} ${'text-design'} ${typographyClasses.bold}`}>Products</Typography>\r\n                                </Box>\r\n                                <Typography className={typographyClasses.smallText}>{match.params.productid}</Typography>\r\n                                <Box\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    onClick={() => {\r\n                                        sessionStorage.removeItem('Services')\r\n                                        sessionStorage.removeItem('CurrentService')\r\n                                        DataList.ActiveService = {}\r\n                                        DataList.ServiceList = []\r\n                                        window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services\"\r\n                                    }}\r\n                                >\r\n                                    <Typography className={`${typographyClasses.smallText} ${'text-design'} ${typographyClasses.bold}`}>Services</Typography>\r\n                                </Box>\r\n                                <Box\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    onClick={() => {\r\n                                        window.location.href = window.location.origin + \"/#/app/products/\" + match.params.productid + \"/services/\" + match.params.serviceid\r\n                                    }}\r\n                                >\r\n                                    <Typography className={`${typographyClasses.smallText} ${'text-design'} ${typographyClasses.bold}`}>{match.params.serviceid}</Typography>\r\n                                </Box>\r\n                                <Typography className={typographyClasses.smallText}>Deploy</Typography>\r\n                            </Breadcrumbs>\r\n                        </Box>\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                            {/* <Box mr={1}>\r\n                                <Button\r\n                                    variant=\"text\"\r\n                                    color=\"primary\"\r\n                                    onClick={handleActions.bind(this, { \"Action\": \"refresh\", key: \"api\" })}\r\n                                >\r\n                                    <RefreshIcon className={typographyClasses.text} />\r\n                                </Button>\r\n                            </Box> */}\r\n                            {\r\n                                showPublish === true ?\r\n                                    <Box>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className=\"trigger-btn\"\r\n                                            onClick={() => CheckForPublish()}\r\n                                        >\r\n                                            <PublishIcon className={typographyClasses.text} />&nbsp;&nbsp;Publish Option\r\n                                        </Button>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </Box>\r\n                    </Box>\r\n                    <Box style={{ marginTop: '41px', width: '100%' }} zIndex={1} bgcolor=\"white\">\r\n                        <div className={tabClasses.root}>\r\n                            <AppBar position=\"fixed\" color=\"default\" className={tabClasses.header}>\r\n                                <Tabs\r\n                                    value={optTab}\r\n                                    onChange={handleOptTab}\r\n                                    variant=\"scrollable\"\r\n                                    scrollButtons=\"auto\"\r\n                                    aria-label=\"Options auto tabs example\"\r\n                                >\r\n                                    {\r\n                                        options.map((act, index) => {\r\n                                            return (\r\n                                                <Tab disableFocusRipple disableRipple disableTouchRipple key={index} label={<Typography className={typographyClasses.text}>{act}</Typography>} {...TabProps(\"Options\", index)} />\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Tabs>\r\n                            </AppBar>\r\n                        </div>\r\n                    </Box>\r\n                    <Box style={{ marginTop: '77px' }}>\r\n                        <Box position=\"fixed\" width={240}>\r\n                            <Sidebar />\r\n                        </Box>\r\n                        <Box style={{ marginLeft: '240px', width: 'calc(100% - 240px)', borderColor: 'lightgray', height: 'calc(100vh - 157px)' }} overflow=\"auto\" boxShadow={2} borderLeft={1}>\r\n                            <Grid container>\r\n                                <Grid item xs={12}>\r\n                                    <Box>\r\n                                        {/* <Box borderBottom={3} style={{ borderColor: 'gray' }} id=\"single-script-blk\">\r\n                                            <Box display=\"flex\" p={1} pl={2}>\r\n                                                <Typography className={`${typographyClasses.bold} ${typographyClasses.h4}`}>Single Script</Typography>\r\n                                            </Box>\r\n                                        </Box> */}\r\n                                        <Box display=\"flex\" p={1} pl={2}>\r\n                                            <Typography className={`${typographyClasses.bold} ${typographyClasses.h4}`}>Steps</Typography>\r\n                                        </Box>\r\n                                        {\r\n                                            stepJson.hasOwnProperty('steporder') === true ?\r\n                                                stepJson['steporder'].map((dporder, index) => {\r\n                                                    return (\r\n                                                        <Box key={index} id={\"scroll-\" + dporder + index} p={1} borderBottom={1} style={{ borderColor: 'lightgray' }}>\r\n                                                            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"flex-start\" p={1} pt={0}>\r\n                                                                <Box display=\"flex\" >\r\n                                                                    <Typography className={`${typographyClasses.h6} ${typographyClasses.bold}`} color=\"primary\" align=\"left\">{stepJson[dporder]['stepname']}</Typography>\r\n                                                                </Box>\r\n                                                            </Box>\r\n                                                            <Box style={{ width: '60vw' }} minWidth={500} maxWidth={990}>\r\n                                                                <ProcesssTasks step={dporder} dpindex={index} />\r\n                                                                {\r\n                                                                    stepJson[dporder].hasOwnProperty('hint') === true ?\r\n                                                                        <Box display=\"flex\" pl={1} pr={1} style={{ width: '100%' }}>\r\n                                                                            <Box display=\"flex\" p={1} bgcolor=\"#9e9e9e\" style={{ width: '100%' }}>\r\n                                                                                <Typography className={typographyClasses.smallText}><span style={{ fontWeight: 'bold' }}>Note&nbsp;&nbsp;-&nbsp;&nbsp;</span>{stepJson[dporder]['hint']}</Typography>\r\n                                                                            </Box>\r\n                                                                        </Box>\r\n                                                                        :\r\n                                                                        null\r\n                                                                }\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                    )\r\n                                                })\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            </Container>\r\n            <Dialog open={dialog} onClose={() => setDialog(false)} aria-labelledby=\"form-dialog-title\" maxWidth=\"sm\" fullWidth>\r\n                <DialogTitle id=\"form-dialog-title\">{formName}</DialogTitle>\r\n                <DialogContent>\r\n                    <Box>\r\n                        {\r\n                            formName === \"Publish Option\" ?\r\n                                <form style={{}} autoComplete=\"off\">\r\n                                    <Box>\r\n                                        <Box mb={1}>\r\n                                            <FormControl fullWidth>\r\n                                                <label htmlFor=\"Commit\" required>Select Branch to Publish</label>\r\n                                                <PopulateBranches />\r\n                                            </FormControl>\r\n                                        </Box>\r\n                                        <Box mb={1}>\r\n                                            <FormControl fullWidth>\r\n                                                <label htmlFor=\"Commit\" required>Commit Message</label>\r\n                                                <TextField\r\n                                                    id=\"Commit\"\r\n                                                    required\r\n                                                    fullWidth\r\n                                                    placeholder=\"Enter Commit Message\"\r\n                                                    onChange={handleFormDataChage.bind(this, \"commitmessage\")}\r\n                                                    variant=\"outlined\"\r\n                                                    multiline\r\n                                                    rows={2}\r\n                                                >\r\n                                                </TextField>\r\n                                            </FormControl>\r\n                                        </Box>\r\n                                    </Box>\r\n                                    {/* <Box>\r\n                                        <FormControl fullWidth>\r\n                                            <label htmlFor=\"tagname\" required>Tag Name</label>\r\n                                            <TextField\r\n                                                id=\"tagname\"\r\n                                                required\r\n                                                fullWidth\r\n                                                placeholder=\"Enter Tag Name\"\r\n                                                onChange={handleFormDataChage.bind(this, \"tagname\")}\r\n                                                variant=\"outlined\"\r\n                                            >\r\n                                            </TextField>\r\n                                        </FormControl>\r\n                                    </Box> */}\r\n                                </form>\r\n                                :\r\n                                null\r\n                        }\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setDialog(false)} color=\"secondary\" variant=\"outlined\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => FormDialogSubmit()} color=\"primary\" className=\"api-btn\" variant=\"contained\">\r\n                        Publish\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Footer page=\"app\" />\r\n            {\r\n                showForm === true && formName !== \"\" && Object.keys(curFormObj).length > 0 ?\r\n                    <Form UserParameters={curFormObj} clickHandler={FormHandler} formname={formName} />\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeployIndex;","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Custom Components\r\nimport Loader from '../../Components/Loader';\r\nimport TopNav from '../../Components/AppNav';\r\nimport Alert from '../../Components/Alert';\r\nimport Footer from '../../Components/Footer/index';\r\nimport Cognitofunctions from '../Cognito/CognitoFunctions';\r\nimport GitAPIs from './GitAPIs';\r\nimport apidomain from '../../Utils/ApiDomain';\r\nimport apipath from '../../Utils/Apipath';\r\nimport Confirm from '../../Components/Confirm';\r\nimport Datalist from '../../Utils/DataList';\r\n\r\n// Styles\r\nimport ContainerStyles from '../../assets/styles/ContainerStyles'\r\nimport TypographyStyles from '../../assets/styles/TypographySyles'\r\n\r\n// Material UI\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Dialogactions from '@material-ui/core/Dialogactions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n// React Helmet\r\nimport Helmet from \"react-helmet/es/Helmet\";\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Clear from '@material-ui/icons/Clear';\r\n\r\nconst tabStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n        backgroundColor: 'white !important'\r\n    },\r\n    header: {\r\n        boxShadow: 'none',\r\n        background: 'white',\r\n        border: 'none',\r\n    }\r\n}));\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box >\r\n                    {children}\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction TabProps(name, index) {\r\n    return {\r\n        id: `${name}-auto-tab-${index}`,\r\n        'aria-controls': `${name}-auto-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst GitSetup = () => {\r\n    let userData = sessionStorage.getItem('user') ? JSON.parse(window.atob(sessionStorage.getItem('user'))) : ''\r\n\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [loader, setLoader] = useState(true)\r\n    const [confirmation, setConfirmation] = useState('')\r\n    const [confApiData, setConfApiData] = useState({})\r\n    const [severity, setSeverrity] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [loadTimeout, setLoadTimeout] = useState(false)\r\n    const [formData, setFormData] = useState({\r\n        \"gitrepourl\": \"\",\r\n        \"gitusername\": \"\",\r\n        \"gitpassword\": \"\"\r\n    })\r\n    const [gitrepourl, setgitrepourl] = useState('')\r\n    const [gitusername, setgitusername] = useState('')\r\n    const [gitpassword, setgitpassword] = useState('')\r\n    const [shName, setShName] = useState('')\r\n    const [brName, setBrName] = useState('')\r\n    const [dialog, setDialog] = useState(false)\r\n    const [formName, setFormName] = useState('')\r\n    const [step, setStep] = useState('step1')\r\n    const [gitstep, setGitStep] = useState('user')\r\n    const [showCred, setShowCred] = useState(false)\r\n    const [branches, setBranches] = useState({\r\n        \"mybranch\": {},\r\n        \"sharedbranch\": [],\r\n        \"environmentdeploybranch\": []\r\n    })\r\n    const [mybranch, setMybranch] = useState({})\r\n    const [shBrs, setShBrs] = useState([])\r\n    const [envBrs, setEnvBrs] = useState([])\r\n    const [tab, setTab] = useState(0)\r\n    const [templateGit, setTemplateGit] = useState({})\r\n    const [repoBranches, setRepoBranches] = useState([])\r\n    const [branchexists, setBranchExists] = useState(false)\r\n\r\n    const tabClasses = tabStyles();\r\n    const containerClasses = ContainerStyles()\r\n    const typographyClasses = TypographyStyles()\r\n\r\n    useEffect(() => {\r\n        if (sessionStorage.getItem('showCred')) {\r\n            setShowCred(true)\r\n        }\r\n        checkrole()\r\n    }, [])\r\n\r\n    const checkrole = () => {\r\n        Cognitofunctions.CurrentUser(function (success, data) {\r\n            if (success) {\r\n                let apidata = {\r\n                    path: apipath['datastore'] + \"/git\",\r\n                    method: 'GET',\r\n                    body: {},\r\n                    headers: {\r\n                        headers: true,\r\n                        apidomain: apidomain.vmurl\r\n                    },\r\n                    ref: \"GetGitCredentials\"\r\n                }\r\n                manageAPIs(apidata)\r\n            }\r\n            else {\r\n                // window.location.origin = window.location.origin + \"/login\"\r\n                // window.location.origin = window.location.origin\r\n                setMessage('You are not authorized to access this page.')\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n                setLoadTimeout(true)\r\n                setTimeout(function () {\r\n                    window.location.href = window.location.origin + \"/#/app/login\"\r\n                    window.location.reload()\r\n                }, 1000)\r\n            }\r\n        })\r\n    }\r\n\r\n    const manageAPIs = (apidata) => {\r\n        if (apidata.ref === \"GetGitCredentials\") {\r\n            GitAPIs.GetGitDetails(apidata, function (success, response) {\r\n                if (success) {\r\n                    if (Object.keys(response.data).length > 0) {\r\n                        setgitrepourl(response.data.gitrepourl)\r\n                        setgitusername(response.data.gitusername)\r\n                        setgitpassword(response.data.gitpassword)\r\n                        setMybranch(response.data.mybranch)\r\n                        setShBrs(response.data.sharedbranch)\r\n                        setEnvBrs(response.data.environmentdeploybranch)\r\n                        if(sessionStorage.getItem('showCred')){\r\n                            setLoader(false)\r\n                            let apidata1 = {\r\n                                ref: \"GetTemplateGitCredentials\",\r\n                                body: {},\r\n                                path: apipath['templatestore'] + \"/git/templaterepo\",\r\n                                headers: {\r\n                                    headers: true,\r\n                                    apidomain: apidomain.vmurl\r\n                                },\r\n                                method: \"GET\"\r\n                            }\r\n                            manageAPIs(apidata1)\r\n                        }\r\n                        else{\r\n                            let apidata2 = {\r\n                                path: apipath['datastore'] + \"/git/createbranches\",\r\n                                method: 'POST',\r\n                                body: {\r\n                                    branches: {\r\n                                        mybranch: response.data.mybranch,\r\n                                        sharedbranch: response.data.sharedbranch,\r\n                                        environmentdeploybranch: response.data.environmentdeploybranch\r\n                                    }\r\n                                },\r\n                                headers: {\r\n                                    headers: true,\r\n                                    apidomain: apidomain.vmurl\r\n                                },\r\n                                ref: \"CreateOrPullBranches\",\r\n                            }\r\n                            manageAPIs(apidata2)\r\n                        }\r\n                    }\r\n                    else {\r\n                        setLoader(false)\r\n                    }\r\n                }\r\n                else {\r\n                    setLoader(false)\r\n                    setMessage(response.message)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            })\r\n        }\r\n        else if (apidata.ref === \"ValidateCredentials\") {\r\n            GitAPIs.ValidateCredentials(apidata, function (success, response) {\r\n                if (success) {\r\n                    let nextAPIdata = apidata\r\n                    // nextAPIdata['body']['branches'] = ['design', 'publish']\r\n                    nextAPIdata['path'] = apipath['datastore'] + \"/git/credentials\"\r\n                    nextAPIdata['ref'] = \"ConfigureCredentials\"\r\n                    nextAPIdata['showNextStep'] = true\r\n                    manageAPIs(nextAPIdata)\r\n                }\r\n                else {\r\n                    setLoader(false)\r\n                    setMessage(response.message)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            })\r\n        }\r\n        else if (apidata.ref === \"ConfigureCredentials\") {\r\n            GitAPIs.ConfigureGit(apidata, function (success, response) {\r\n                if (success) {\r\n                    setFormData({})\r\n                    if (!apidata.hasOwnProperty('showMessage')) {\r\n                        if (response.hasOwnProperty('message') && response.message !== \"\") {\r\n                            // setLoader(false)\r\n                            setMessage(response.message)\r\n                            setSeverrity('info')\r\n                            setOpenAlert(true)\r\n                        }\r\n                    }\r\n                    if (apidata.hasOwnProperty('showNextStep')) {\r\n                        // let apidata1 = {\r\n                        //     ref: \"GetBranchesByCategory\",\r\n                        //     cat: \"shared\",\r\n                        //     body: {},\r\n                        //     path: apipath['datastore'] + \"/git/getbranch/sharedbranch\",\r\n                        //     headers: {\r\n                        //         headers: true,\r\n                        //         apidomain: apidomain.vmurl\r\n                        //     }\r\n                        // }\r\n                        // manageAPIs(apidata1)\r\n                        // let apidata2 = {\r\n                        //     ref: \"GetBranchesByCategory\",\r\n                        //     cat: \"env\",\r\n                        //     body: {},\r\n                        //     path: apipath['datastore'] + \"/git/getbranch/environmentdeploybranch\",\r\n                        //     headers: {\r\n                        //         headers: true,\r\n                        //         apidomain: apidomain.vmurl\r\n                        //     }\r\n                        // }\r\n                        // manageAPIs(apidata2)\r\n                        // let apidata3 = {\r\n                        //     ref: \"GetBranchesByCategory\",\r\n                        //     cat: \"env\",\r\n                        //     body: {},\r\n                        //     path: apipath['datastore'] + \"/git/getbranch/mybranch\",\r\n                        //     headers: {\r\n                        //         headers: true,\r\n                        //         apidomain: apidomain.vmurl\r\n                        //     }\r\n                        // }\r\n                        // manageAPIs(apidata3)\r\n                        let apidata2 = {\r\n                            path: apipath['datastore'] + \"/git/getbranches\",\r\n                            method: 'GET',\r\n                            body: {},\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                            ref: \"GetBranches\",\r\n                        }\r\n                        manageAPIs(apidata2)\r\n                        setStep('step2')\r\n                    }\r\n                    else {\r\n                        let apidata2 = {\r\n                            path: apipath['datastore'] + \"/git/createbranches\",\r\n                            method: 'POST',\r\n                            body: {\r\n                                branches: {\r\n                                    mybranch: apidata.mybranch,\r\n                                    sharedbranch: apidata.sharedbranch,\r\n                                    environmentdeploybranch: apidata.environmentdeploybranch\r\n                                }\r\n                            },\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                            ref: \"CreateOrPullBranches\",\r\n                        }\r\n                        manageAPIs(apidata2)\r\n                    }\r\n                }\r\n                else {\r\n                    setLoader(false)\r\n                    setMessage(response.message)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            })\r\n        }\r\n        else if (apidata.ref === \"GetBranches\") {\r\n            GitAPIs.GetBranchesByType(apidata, function (success, response) {\r\n                if (success) {\r\n                    setLoader(false)\r\n                    setRepoBranches(response.data)\r\n                    if (response.data.length > 0) {\r\n                        setBranchExists(true)\r\n                    }\r\n                }\r\n                else {\r\n                    setLoader(false)\r\n                    setMessage(response.message)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            })\r\n        }\r\n        else if (apidata.ref === \"CreateOrPullBranches\") {\r\n            GitAPIs.CreateOrPullBranches(apidata, function (success, response) {\r\n                if (success) {\r\n                    // setTimeout(function () {\r\n                    //     window.location.href = window.location.origin + \"/#/app/products\"\r\n                    // }, 1000)\r\n                    let apidata1 = {\r\n                        ref: \"GetTemplateGitCredentials\",\r\n                        body: {},\r\n                        path: apipath['templatestore'] + \"/git/templaterepo\",\r\n                        headers: {\r\n                            headers: true,\r\n                            apidomain: apidomain.vmurl\r\n                        },\r\n                        method: \"GET\"\r\n                    }\r\n                    manageAPIs(apidata1)\r\n                    setGitStep('template')\r\n                    setStep('step2')\r\n                    // let apidata1 = {\r\n                    //     ref: \"GetBranchesByCategory\",\r\n                    //     cat: \"shared\",\r\n                    //     body: {},\r\n                    //     path: apipath['datastore'] + \"/git/getbranch/sharedbranch\",\r\n                    //     headers: {\r\n                    //         headers: true,\r\n                    //         apidomain: apidomain.vmurl\r\n                    //     }\r\n                    // }\r\n                    // manageAPIs(apidata1)\r\n                    // let apidata2 = {\r\n                    //     ref: \"GetBranchesByCategory\",\r\n                    //     cat: \"env\",\r\n                    //     body: {},\r\n                    //     path: apipath['datastore'] + \"/git/getbranch/environmentdeploybranch\",\r\n                    //     headers: {\r\n                    //         headers: true,\r\n                    //         apidomain: apidomain.vmurl\r\n                    //     }\r\n                    // }\r\n                    // manageAPIs(apidata2)\r\n                    // let apidata3 = {\r\n                    //     ref: \"GetBranchesByCategory\",\r\n                    //     cat: \"env\",\r\n                    //     body: {},\r\n                    //     path: apipath['datastore'] + \"/git/getbranch/mybranch\",\r\n                    //     headers: {\r\n                    //         headers: true,\r\n                    //         apidomain: apidomain.vmurl\r\n                    //     }\r\n                    // }\r\n                    // manageAPIs(apidata3)\r\n                }\r\n                else {\r\n                    setLoader(false)\r\n                    setMessage(response.message)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            })\r\n        }\r\n        else if (apidata.ref === \"GetBranchesByCategory\") {\r\n            GitAPIs.GetBranchesByType(apidata, function (success, response) {\r\n                if (success) {\r\n                    setLoader(false)\r\n                    if (apidata['cat'] === \"shared\") {\r\n                        setShBrs(response.data)\r\n                        Datalist['SharedBranches'] = response.data\r\n                    }\r\n                    else if (apidata['cat'] === \"env\") {\r\n                        setEnvBrs(response.data)\r\n                        Datalist['EnvBranches'] = response.data\r\n                    }\r\n                    else if (apidata['cat'] === \"mybr\") {\r\n                        setMybranch(response.data)\r\n                    }\r\n                }\r\n                else {\r\n                    setLoader(false)\r\n                    setMessage(response.message)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            })\r\n        }\r\n        else if (apidata.ref === \"GetTemplateGitCredentials\") {\r\n            GitAPIs.GetTemplateGitDetails(apidata, function (success, response) {\r\n                if (success) {\r\n                    if (Object.keys(response.data).length > 0) {\r\n                        setTemplateGit(response.data)\r\n                        if(sessionStorage.getItem('showCred')){\r\n                            sessionStorage.removeItem('showCred')\r\n                            setShowCred(true)\r\n                            setLoader(false)\r\n                        }\r\n                        else{\r\n                            let nextapidata = {\r\n                                method: \"POST\",\r\n                                path: apipath['templatestore'] + \"/git/templatepull\",\r\n                                headers: {\r\n                                    headers: true,\r\n                                    apidomain: apidomain.vmurl\r\n                                },\r\n                                body: {\r\n                                    templategiturl: response.data.templategiturl,\r\n                                    templategitusername: response.data.templategitusername,\r\n                                    templategitpassword: response.data.templategitpassword,\r\n                                    templategitbranch: response.data.templategitbranch,\r\n                                    connectiontype: \"https\"\r\n                                },\r\n                                showMessage: false,\r\n                                ref: \"ConfigureTemplateCredentials\",\r\n                                gitdata: response.data\r\n                            }\r\n                            manageAPIs(nextapidata)\r\n                        }\r\n                    }\r\n                    else {\r\n                        setgitrepourl('')\r\n                        setgitusername('')\r\n                        setgitpassword('')\r\n                        setLoader(false)\r\n                        setGitStep('template')\r\n                        setStep('step1')\r\n                    }\r\n                }\r\n                else {\r\n                    setLoader(false)\r\n                    setMessage(response.message)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            })\r\n        }\r\n        else if (apidata.ref === \"ConfigureTemplateCredentials\") {\r\n            let finaldata = apidata\r\n            if(finaldata.hasOwnProperty('gitdata')){\r\n                finaldata['body']['templategiturl'] = finaldata['gitdata']['templategiturl']\r\n                finaldata['body']['templategitusername'] = finaldata['gitdata']['templategitusername']\r\n                finaldata['body']['templategitpassword'] = finaldata['gitdata']['templategitpassword']\r\n                finaldata['body']['templategitbranch'] = finaldata['gitdata']['templategitbranch']\r\n            }\r\n            else{\r\n                finaldata['body']['templategiturl'] = gitrepourl\r\n                finaldata['body']['templategitusername'] = gitusername\r\n                finaldata['body']['templategitpassword'] = gitpassword\r\n            }\r\n            GitAPIs.ConfigureGit(finaldata, function (success, response) {\r\n                if (success) {\r\n                    if (response.hasOwnProperty('message') && response.message !== \"\") {\r\n                        setLoader(false)\r\n                        setMessage(response.message)\r\n                        setSeverrity('info')\r\n                        setOpenAlert(true)\r\n                    }\r\n                    setTimeout(function () {\r\n                        window.location.href = window.location.origin + \"/#/app/products\"\r\n                    }, 1000)\r\n                }\r\n                else {\r\n                    setLoader(false)\r\n                    setMessage(response.message)\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleActions = (apidata) => {\r\n        if (apidata.Action === 'redirect') {\r\n            window.open(apidata.url, '_blank')\r\n        }\r\n        else if (apidata.Action === 'refresh') {\r\n\r\n        }\r\n        else if (apidata.Action === \"confirmation\") {\r\n            setConfApiData(apidata['apidata'])\r\n            setConfirmation(apidata.confirmText)\r\n        }\r\n        else {\r\n            // setLoader(true)\r\n            if (apidata.method === \"DELETE\") {\r\n                setLoader(true)\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n    }\r\n\r\n    const handleConfirmation = (key) => {\r\n        setConfirmation('')\r\n        if (key) {\r\n            handleActions(confApiData)\r\n            // console.log(confApiData)\r\n            setConfApiData({})\r\n        }\r\n        else {\r\n            setConfApiData({})\r\n        }\r\n    }\r\n\r\n    const handleFormDataChage = (field, event) => {\r\n        let formFields = formData;\r\n        if (field === \"Branchname\") {\r\n            const re = /^[a-zA-Z][a-zA-Z0-9_.@]*[a-zA-Z0-9]*$/;\r\n            if (re.test(event.target.value)) {\r\n                formFields[field] = event.target.value;\r\n                setBrName(event.target.value)\r\n            }\r\n            else if (event.target.value === \"\") {\r\n                formFields[field] = event.target.value;\r\n                setBrName(event.target.value)\r\n            }\r\n        }\r\n        else if (field === \"nickname\") {\r\n            const re = /^[a-z][a-z0-9_.@]*[a-z0-9]*$/;\r\n            if (re.test(event.target.value)) {\r\n                formFields[field] = event.target.value;\r\n                setShName(event.target.value)\r\n            }\r\n            else if (event.target.value === \"\") {\r\n                formFields[field] = event.target.value;\r\n                setShName(event.target.value)\r\n            }\r\n        }\r\n        else {\r\n            if (field === \"gitrepourl\") {\r\n                setgitrepourl(event.target.value)\r\n            }\r\n            else if (field === \"gitusername\") {\r\n                setgitusername(event.target.value)\r\n            }\r\n            else if (field === \"gitpassword\") {\r\n                setgitpassword(event.target.value)\r\n            }\r\n            formFields[field] = event.target.value;\r\n        }\r\n        setFormData(formFields);\r\n    }\r\n\r\n    const handleAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n\r\n    const FormSubmit = () => {\r\n        setLoader(true)\r\n        let canSubmit = true\r\n        let path = \"\", ref = \"\", method = \"\", requireAttrs = []\r\n        if (gitstep === \"user\") {\r\n            requireAttrs = ['gitrepourl', 'gitusername', 'gitpassword']\r\n            path = apipath['datastore'] + \"/git/validate\"\r\n            ref = \"ValidateCredentials\"\r\n            method = \"POST\"\r\n        }\r\n        else if (gitstep === \"template\") {\r\n            requireAttrs = ['gitrepourl', 'gitusername', 'gitpassword',\"templategitbranch\"]\r\n            path = apipath['templatestore'] + \"/git/templatepull\"\r\n            ref = \"ConfigureTemplateCredentials\"\r\n            method = \"POST\"\r\n        }\r\n        for (let i = 0; i < requireAttrs.length; i++) {\r\n            if (formData[requireAttrs[i]] === undefined || formData[requireAttrs[i]] === \"\" || formData[requireAttrs[i]] === []) {\r\n                canSubmit = false\r\n                setLoader(false)\r\n                setMessage(\"Please fill the required details.\")\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n            }\r\n        }\r\n        formData['connectiontype'] = 'https'\r\n        if (formData['gitrepourl'].substr(0, 5) !== \"https\") {\r\n            canSubmit = false\r\n            setLoader(false)\r\n            setMessage(\"Please enter the valid Repo URL.\")\r\n            setSeverrity('error')\r\n            setOpenAlert(true)\r\n        }\r\n        if (canSubmit) {\r\n            let apidata = {\r\n                method: method,\r\n                path: path,\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                body: formData,\r\n                ref: ref\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n    }\r\n\r\n    const DeleteBranch = (cat, index) => {\r\n        setBranches({})\r\n        let brs = branches\r\n        if (cat === \"sharedbranch\") {\r\n            let catbrs = [...shBrs]\r\n            if (branchexists) {\r\n                let repobrs = [...repoBranches]\r\n                repobrs.push(catbrs[index]['Branchname'])\r\n                setRepoBranches(repobrs)\r\n            }\r\n            catbrs.splice(index, 1)\r\n            brs[cat] = catbrs\r\n            setShBrs(catbrs)\r\n        }\r\n        else if (cat === \"environmentdeploybranch\") {\r\n            let catbrs = [...shBrs]\r\n            if (branchexists) {\r\n                let repobrs = [...repoBranches]\r\n                repobrs.push(catbrs[index]['Branchname'])\r\n                setRepoBranches(repobrs)\r\n            }\r\n            catbrs.splice(index, 1)\r\n            brs[cat] = catbrs\r\n            setEnvBrs(catbrs)\r\n        }\r\n        else if (cat === \"mybranch\") {\r\n            if (branchexists) {\r\n                let repobrs = [...repoBranches]\r\n                repobrs.push(mybranch['Branchname'])\r\n                setRepoBranches(repobrs)\r\n            }\r\n            setMybranch({})\r\n            brs[cat] = {}\r\n        }\r\n        setBranches(brs)\r\n    }\r\n\r\n    const CheckBranch = () => {\r\n        setLoader(true)\r\n        let name = shName, brname = brName\r\n        if (name === brname) {\r\n            setMessage('Brnach Name and Short Name should not be same')\r\n            setSeverrity('error')\r\n            setOpenAlert(true)\r\n            setLoader(false)\r\n        }\r\n        else {\r\n            if (mybranch['Name'] === name || mybranch['Branchname'] === name) {\r\n                setMessage('Short Name already exists in My Branch')\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n                setLoader(false)\r\n            }\r\n            else {\r\n                if (mybranch['Branchname'] === brname || mybranch['Name'] === brname) {\r\n                    setMessage('Branch Name already exists in My Branch')\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                    setLoader(false)\r\n                }\r\n                else {\r\n                    let shbrs = shBrs, flag = 0\r\n                    for (let i = 0; i < shbrs.length; i++) {\r\n                        if (shbrs[i]['Name'] === name || shbrs[i]['Branchame'] === name) {\r\n                            flag = 1\r\n                            setMessage('Short Name already exists in Shared Branch')\r\n                            setSeverrity('error')\r\n                            setOpenAlert(true)\r\n                            setLoader(false)\r\n                            break;\r\n                        }\r\n                        else if (shbrs[i]['Branchname'] === brname || shbrs[i]['Name'] === brname) {\r\n                            flag = 1\r\n                            setMessage('Branch Name already exists in Shared Branch')\r\n                            setSeverrity('error')\r\n                            setOpenAlert(true)\r\n                            setLoader(false)\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (flag === 0) {\r\n                        let envbrs = envBrs\r\n                        for (let i = 0; i < envbrs.length; i++) {\r\n                            if (envbrs[i]['Name'] === name || envbrs[i]['Branchname'] === name) {\r\n                                flag = 1\r\n                                setMessage('Short Name already exists in Environment Deploy Branch')\r\n                                setSeverrity('error')\r\n                                setOpenAlert(true)\r\n                                setLoader(false)\r\n                                break;\r\n                            }\r\n                            else if (envbrs[i]['Branchname'] === brname || envbrs[i]['Name'] === brname) {\r\n                                flag = 1\r\n                                setMessage('Branch Name already exists in Environment Deploy Branch')\r\n                                setSeverrity('error')\r\n                                setOpenAlert(true)\r\n                                setLoader(false)\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (flag === 0) {\r\n                            let brs = branches, shbrs = [...shBrs], envbrs = [...envBrs]\r\n                            if (formName === \"Add Shared Branch\") {\r\n                                brs['sharedbranch'].push({ \"Name\": name, \"Branchname\": brname })\r\n                                shbrs.push({ \"Name\": name, \"Branchname\": brname })\r\n                                setShBrs(shbrs)\r\n                            }\r\n                            else if (formName === \"Add Environment Deploy Branch\") {\r\n                                brs['environmentdeploybranch'].push({ \"Name\": name, \"Branchname\": brname })\r\n                                envbrs.push({ \"Name\": name, \"Branchname\": brname })\r\n                                setEnvBrs(envbrs)\r\n                            }\r\n                            else if (formName === \"Add Developer Branch\") {\r\n                                brs['mybranch'] = { \"Name\": name, \"Branchname\": brname }\r\n                                setMybranch(brs['mybranch'])\r\n                            }\r\n                            setBranches(brs)\r\n                            setLoader(false)\r\n                            setDialog(false)\r\n                            setFormName('')\r\n                            let repobrs = [...repoBranches]\r\n                            let index = repobrs.indexOf(brname)\r\n                            if (index !== -1) {\r\n                                repobrs.splice(index, 1)\r\n                                setRepoBranches(repobrs)\r\n                            }\r\n                            setShName('')\r\n                            setBrName('')\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleActionsTab = (event, newValue) => {\r\n        setTab(newValue)\r\n    }\r\n\r\n    const handleChangeBranch = (cat, event) => {\r\n        if (event.target.value !== \"\") {\r\n            setBrName(event.target.value)\r\n            setFormName(cat)\r\n            setDialog(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Helmet>\r\n                <title>Git Setup</title>\r\n            </Helmet>\r\n            <TopNav />\r\n            <Loader open={loader} type=\"page\" />\r\n            <Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n            <Container className={containerClasses.root} style={{ marginBottom: '30px' }}>\r\n                <Box style={{ width: '100%' }} display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"flex-start\" p={2}>\r\n                    {\r\n                        showCred === false ?\r\n                            <Box style={{ width: '50vw', borderColor: 'lightgray' }} mb={1} border={1}>\r\n                                <Box display=\"flex\" p={2} pt={1} pb={1} borderBottom={1} style={{ borderColor: 'lightgray' }} bgcolor=\"#f1efef\">\r\n                                    {\r\n                                        gitstep === \"user\" ?\r\n                                            <Typography className={`${typographyClasses.h5} ${typographyClasses.bold}`}>Setup Your Git</Typography>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        gitstep === \"template\" ?\r\n                                            <Typography className={`${typographyClasses.h5} ${typographyClasses.bold}`}>Setup Template Data Store</Typography>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                </Box>\r\n                                <Box>\r\n                                    {\r\n                                        step === \"step1\" ?\r\n                                            <Box>\r\n                                                <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"flexStart\" flexDirection=\"column\" p={2} pt={1} pb={1}>\r\n                                                    <form autoComplete=\"off\">\r\n                                                        <Box mb={1.5}>\r\n                                                            <FormControl fullWidth>\r\n                                                                <label htmlFor=\"connectiontype\">Connection Type</label>\r\n                                                                <TextField\r\n                                                                    id=\"connectiontype\"\r\n                                                                    fullWidth\r\n                                                                    value=\"HTTPS\"\r\n                                                                    disabled\r\n                                                                    variant=\"outlined\"\r\n                                                                >\r\n                                                                </TextField>\r\n                                                            </FormControl>\r\n                                                        </Box>\r\n                                                        <Box mb={1.5}>\r\n                                                            <FormControl fullWidth>\r\n                                                                <label htmlFor=\"RepoURL\" required>Git Repo URL</label>\r\n                                                                <TextField\r\n                                                                    id=\"RepoURL\"\r\n                                                                    required\r\n                                                                    fullWidth\r\n                                                                    placeholder=\"Enter Repo URL\"\r\n                                                                    value={gitrepourl}\r\n                                                                    onChange={handleFormDataChage.bind(this, \"gitrepourl\")}\r\n                                                                    variant=\"outlined\"\r\n                                                                >\r\n                                                                </TextField>\r\n                                                            </FormControl>\r\n                                                        </Box>\r\n                                                        <Box mb={1.5}>\r\n                                                            <FormControl fullWidth>\r\n                                                                <label htmlFor=\"Username\" required>Git Username</label>\r\n                                                                <TextField\r\n                                                                    id=\"Username\"\r\n                                                                    required\r\n                                                                    fullWidth\r\n                                                                    placeholder=\"Enter User Name\"\r\n                                                                    value={gitusername}\r\n                                                                    onChange={handleFormDataChage.bind(this, \"gitusername\")}\r\n                                                                    variant=\"outlined\"\r\n                                                                >\r\n                                                                </TextField>\r\n                                                            </FormControl>\r\n                                                        </Box>\r\n                                                        <Box mb={1.5}>\r\n                                                            <FormControl fullWidth>\r\n                                                                <label htmlFor=\"RepoPassword\" required>Git Password</label>\r\n                                                                <TextField\r\n                                                                    id=\"RepoPassword\"\r\n                                                                    required\r\n                                                                    fullWidth\r\n                                                                    placeholder=\"Enter Password\"\r\n                                                                    value={gitpassword}\r\n                                                                    onChange={handleFormDataChage.bind(this, \"gitpassword\")}\r\n                                                                    variant=\"outlined\"\r\n                                                                    type=\"password\"\r\n                                                                >\r\n                                                                </TextField>\r\n                                                            </FormControl>\r\n                                                        </Box>\r\n                                                        {\r\n                                                            gitstep === \"template\" ?\r\n                                                                <Box mb={1.5}>\r\n                                                                    <FormControl fullWidth>\r\n                                                                        <label htmlFor=\"templategitbranch\" required>Branch Name</label>\r\n                                                                        <TextField\r\n                                                                            id=\"templategitbranch\"\r\n                                                                            required\r\n                                                                            fullWidth\r\n                                                                            placeholder=\"Enter Branch Name\"\r\n                                                                            onChange={handleFormDataChage.bind(this, \"templategitbranch\")}\r\n                                                                            variant=\"outlined\"\r\n                                                                        >\r\n                                                                        </TextField>\r\n                                                                    </FormControl>\r\n                                                                </Box>\r\n                                                                :\r\n                                                                null\r\n                                                        }\r\n                                                        {/* <Box>\r\n                                    <FormControl fullWidth>\r\n                                        <label>Branches</label>\r\n                                        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"flex-start\">\r\n                                            <Box mr={1}>\r\n                                                <Chip size=\"medium\" label=\"design\" color=\"primary\" />\r\n                                            </Box>\r\n                                            <Box mr={1}>\r\n                                                <Chip size=\"medium\" label=\"publish\" color=\"primary\" />\r\n                                            </Box>\r\n                                        </Box>\r\n                                    </FormControl>\r\n                                </Box> */}\r\n                                                    </form>\r\n                                                </Box>\r\n                                                <Box display=\"flex\" p={2} pt={1} pb={1} borderTop={1} style={{ borderColor: 'lightgray' }}>\r\n                                                    <Box p={6} pt={1} pb={1} color=\"white\" style={{ cursor: 'pointer', backgroundImage: 'linear-gradient(45deg, #3f51b5, #2196f3)' }} onClick={() => FormSubmit()}>\r\n                                                        <Typography className={`${typographyClasses.text}`}>Configure</Typography>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        step === \"step2\" ?\r\n                                            <Box>\r\n                                                <Box p={2}>\r\n                                                    <Box mb={1} display=\"flex\">\r\n                                                        <Box mb={1}>\r\n                                                            <Typography className={`${typographyClasses.h6} ${typographyClasses.bold}`}>Branches</Typography>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                    <Box mb={1}>\r\n                                                        <Box mb={1} display=\"flex\">\r\n                                                            <Typography color=\"primary\" className={`${typographyClasses.text} ${typographyClasses.bold}`}>My Branch</Typography>\r\n                                                        </Box>\r\n                                                        <Box ml={2}>\r\n                                                            {\r\n                                                                Object.keys(mybranch).length > 0 ?\r\n                                                                    <Box display=\"flex\" flexWrap=\"wrap\" mt={1}>\r\n                                                                        <Box p={1} bgcolor=\"#3f51b5\" color=\"white\" display=\"flex\" alignItems=\"center\">\r\n                                                                            <Box mr={4}>\r\n                                                                                <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%' }}>\r\n                                                                                    <Box display=\"flex\" mr={1}>\r\n                                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>Branchname&nbsp;-&nbsp;</Typography>\r\n                                                                                    </Box>\r\n                                                                                    <Box>\r\n                                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>{mybranch['Branchname']}</Typography>\r\n                                                                                    </Box>\r\n                                                                                </Box>\r\n                                                                                <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%' }}>\r\n                                                                                    <Box display=\"flex\" mr={1}>\r\n                                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>Shortname&nbsp;-&nbsp;</Typography>\r\n                                                                                    </Box>\r\n                                                                                    <Box>\r\n                                                                                        <Typography align=\"left\" className={typographyClasses.smallText}>{mybranch['Name']}</Typography>\r\n                                                                                    </Box>\r\n                                                                                </Box>\r\n                                                                            </Box>\r\n                                                                            <Box display=\"flex\" style={{ cursor: 'pointer' }} onClick={() => {\r\n                                                                                DeleteBranch(\"mybranch\", -1)\r\n                                                                            }}>\r\n                                                                                <Clear className={typographyClasses.smallText} />\r\n                                                                            </Box>\r\n                                                                        </Box>\r\n                                                                    </Box>\r\n                                                                    :\r\n                                                                    <Box>\r\n                                                                        {\r\n                                                                            repoBranches.length > 0 ?\r\n                                                                                <Box>\r\n                                                                                    <Box>\r\n                                                                                        <Typography className={`${typographyClasses.text}`} align=\"left\">Select from existing Branches</Typography>\r\n                                                                                    </Box>\r\n                                                                                    <Box display=\"flex\" alignItems=\"center\">\r\n                                                                                        <Box mr={1}>\r\n                                                                                            <FormControl fullWidth>\r\n                                                                                                <Select\r\n                                                                                                    variant=\"outlined\"\r\n                                                                                                    defaultValue=\"\"\r\n                                                                                                    native\r\n                                                                                                    onChange={handleChangeBranch.bind(this, \"Add Developer Branch\")}\r\n                                                                                                >\r\n                                                                                                    <option value=\"\">Select Branch</option>\r\n                                                                                                    {\r\n                                                                                                        repoBranches.map((br, index) => {\r\n                                                                                                            return (\r\n                                                                                                                <option key={index} value={br}>{br}</option>\r\n                                                                                                            )\r\n                                                                                                        })\r\n                                                                                                    }\r\n                                                                                                </Select>\r\n                                                                                            </FormControl>\r\n                                                                                        </Box>\r\n                                                                                        <Box mr={1}>\r\n                                                                                            <Typography className={typographyClasses.h3} style={{ color: 'gray', lineHeight: '1' }}>/</Typography>\r\n                                                                                        </Box>\r\n                                                                                        <Box>\r\n                                                                                            <Box display=\"flex\" mr={1} border={1} p={1} borderColor=\"#3f51b5\" style={{ cursor: 'pointer' }} title=\"Add Developer Branch\" onClick={() => {\r\n                                                                                                setBrName('')\r\n                                                                                                setShName('')\r\n                                                                                                setFormName('Add Developer Branch')\r\n                                                                                                setDialog(true)\r\n                                                                                            }}\r\n                                                                                            >\r\n                                                                                                <AddIcon className={typographyClasses.text} color\r\n                                                                                                    =\"primary\" />\r\n                                                                                            </Box>\r\n                                                                                        </Box>\r\n                                                                                    </Box>\r\n                                                                                </Box>\r\n                                                                                :\r\n                                                                                <Box display=\"flex\" alignItems=\"center\">\r\n                                                                                    <Box>\r\n                                                                                        <Box display=\"flex\" mr={1} border={1} p={1} borderColor=\"#3f51b5\" style={{ cursor: 'pointer' }} title=\"Add Developer Branch\" onClick={() => {\r\n                                                                                            setBrName('')\r\n                                                                                            setShName('')\r\n                                                                                            setFormName('Add Developer Branch')\r\n                                                                                            setDialog(true)\r\n                                                                                        }}\r\n                                                                                        >\r\n                                                                                            <AddIcon className={typographyClasses.text} color\r\n                                                                                                =\"primary\" />\r\n                                                                                        </Box>\r\n                                                                                    </Box>\r\n                                                                                </Box>\r\n                                                                        }\r\n\r\n                                                                    </Box>\r\n                                                            }\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                    <Box mb={1}>\r\n                                                        <Box mb={1} display=\"flex\">\r\n                                                            <Typography color=\"primary\" className={`${typographyClasses.text} ${typographyClasses.bold}`}>Shared Branch</Typography>\r\n                                                        </Box>\r\n                                                        <Box ml={2}>\r\n                                                            {\r\n                                                                repoBranches.length > 0 ?\r\n                                                                    <Box>\r\n                                                                        <Box>\r\n                                                                            <Typography className={`${typographyClasses.text}`} align=\"left\">Select from existing Branches</Typography>\r\n                                                                        </Box>\r\n                                                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                                                            <Box mr={1}>\r\n                                                                                <FormControl fullWidth>\r\n                                                                                    <Select\r\n                                                                                        variant=\"outlined\"\r\n                                                                                        defaultValue=\"\"\r\n                                                                                        native\r\n                                                                                        onChange={handleChangeBranch.bind(this, \"Add Shared Branch\")}\r\n                                                                                    >\r\n                                                                                        <option value=\"\">Select Branch</option>\r\n                                                                                        {\r\n                                                                                            repoBranches.map((br, index) => {\r\n                                                                                                return (\r\n                                                                                                    <option key={index} value={br}>{br}</option>\r\n                                                                                                )\r\n                                                                                            })\r\n                                                                                        }\r\n                                                                                    </Select>\r\n                                                                                </FormControl>\r\n                                                                            </Box>\r\n                                                                            <Box mr={1}>\r\n                                                                                <Typography className={typographyClasses.h3} style={{ color: 'gray', lineHeight: '1' }}>/</Typography>\r\n                                                                            </Box>\r\n                                                                            <Box>\r\n                                                                                <Box display=\"flex\" mr={1} border={1} p={1} borderColor=\"#3f51b5\" style={{ cursor: 'pointer' }} title=\"Add Shared Branch\" onClick={() => {\r\n                                                                                    setBrName('')\r\n                                                                                    setShName('')\r\n                                                                                    setFormName('Add Shared Branch')\r\n                                                                                    setDialog(true)\r\n                                                                                }}\r\n                                                                                >\r\n                                                                                    <AddIcon className={typographyClasses.text} color\r\n                                                                                        =\"primary\" />\r\n                                                                                </Box>\r\n                                                                            </Box>\r\n                                                                        </Box>\r\n                                                                    </Box>\r\n                                                                    :\r\n                                                                    <Box>\r\n                                                                        <Box display=\"flex\" mr={1} border={1} p={1} borderColor=\"#3f51b5\" style={{ cursor: 'pointer', width: 'fit-content' }} title=\"Add Shared Branch\" onClick={() => {\r\n                                                                            setBrName('')\r\n                                                                            setShName('')\r\n                                                                            setFormName('Add Shared Branch')\r\n                                                                            setDialog(true)\r\n                                                                        }}\r\n                                                                        >\r\n                                                                            <AddIcon className={typographyClasses.text} color\r\n                                                                                =\"primary\" />\r\n                                                                        </Box>\r\n                                                                    </Box>\r\n                                                            }\r\n\r\n                                                            <Box display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\" mt={1}>\r\n                                                                {\r\n                                                                    branches.hasOwnProperty('sharedbranch') === true ?\r\n                                                                        shBrs.map((br, index) => {\r\n                                                                            return (\r\n                                                                                <Box display=\"flex\" key={index}>\r\n                                                                                    <Box p={1} mr={1} bgcolor=\"#3f51b5\" color=\"white\" display=\"flex\" alignItems=\"center\" mb={1}>\r\n                                                                                        <Box bgcolor=\"#3f51b5\" color=\"white\" display=\"flex\" alignItems=\"center\">\r\n                                                                                            <Box mr={4}>\r\n                                                                                                <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%' }}>\r\n                                                                                                    <Box display=\"flex\" mr={1}>\r\n                                                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>Branchname&nbsp;-&nbsp;</Typography>\r\n                                                                                                    </Box>\r\n                                                                                                    <Box>\r\n                                                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>{br['Branchname']}</Typography>\r\n                                                                                                    </Box>\r\n                                                                                                </Box>\r\n                                                                                                <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%' }}>\r\n                                                                                                    <Box display=\"flex\" mr={1}>\r\n                                                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>Shortname&nbsp;-&nbsp;</Typography>\r\n                                                                                                    </Box>\r\n                                                                                                    <Box>\r\n                                                                                                        <Typography align=\"left\" className={typographyClasses.smallText}>{br['Name']}</Typography>\r\n                                                                                                    </Box>\r\n                                                                                                </Box>\r\n                                                                                            </Box>\r\n                                                                                            <Box display=\"flex\" style={{ cursor: 'pointer' }} onClick={() => {\r\n                                                                                                DeleteBranch(\"sharedbranch\", index)\r\n                                                                                            }}>\r\n                                                                                                <Clear className={typographyClasses.smallText} />\r\n                                                                                            </Box>\r\n                                                                                        </Box>\r\n                                                                                    </Box>\r\n                                                                                </Box>\r\n                                                                            )\r\n                                                                        })\r\n                                                                        :\r\n                                                                        null\r\n                                                                }\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                    <Box mb={1}>\r\n                                                        <Box mb={1} display=\"flex\">\r\n                                                            <Typography color=\"primary\" className={`${typographyClasses.text} ${typographyClasses.bold}`}>Environment Deploy Branch</Typography>\r\n                                                        </Box>\r\n                                                        <Box ml={2}>\r\n                                                            {\r\n                                                                repoBranches.length > 0 ?\r\n                                                                    <Box>\r\n                                                                        <Box>\r\n                                                                            <Typography className={`${typographyClasses.text}`} align=\"left\">Select from existing Branches</Typography>\r\n                                                                        </Box>\r\n                                                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                                                            <Box mr={1}>\r\n                                                                                <FormControl fullWidth>\r\n                                                                                    <Select\r\n                                                                                        variant=\"outlined\"\r\n                                                                                        defaultValue=\"\"\r\n                                                                                        native\r\n                                                                                        onChange={handleChangeBranch.bind(this, \"Add Environment Deploy Branch\")}\r\n                                                                                    >\r\n                                                                                        <option value=\"\">Select Branch</option>\r\n                                                                                        {\r\n                                                                                            repoBranches.map((br, index) => {\r\n                                                                                                return (\r\n                                                                                                    <option key={index} value={br}>{br}</option>\r\n                                                                                                )\r\n                                                                                            })\r\n                                                                                        }\r\n                                                                                    </Select>\r\n                                                                                </FormControl>\r\n                                                                            </Box>\r\n                                                                            <Box mr={1}>\r\n                                                                                <Typography className={typographyClasses.h3} style={{ color: 'gray', lineHeight: '1' }}>/</Typography>\r\n                                                                            </Box>\r\n                                                                            <Box style={{ width: 'fit-content' }}>\r\n                                                                                <Box display=\"flex\" mr={1} border={1} p={1} borderColor=\"#3f51b5\" style={{ cursor: 'pointer' }} title=\"Add Environment Deploy Branch\" onClick={() => {\r\n                                                                                    setBrName('')\r\n                                                                                    setShName('')\r\n                                                                                    setFormName('Add Environment Deploy Branch')\r\n                                                                                    setDialog(true)\r\n                                                                                }}\r\n                                                                                >\r\n                                                                                    <AddIcon className={typographyClasses.text} color\r\n                                                                                        =\"primary\" />\r\n                                                                                </Box>\r\n                                                                            </Box>\r\n                                                                        </Box>\r\n                                                                    </Box>\r\n                                                                    :\r\n                                                                    <Box>\r\n                                                                        <Box display=\"flex\" mr={1} border={1} p={1} borderColor=\"#3f51b5\" style={{ cursor: 'pointer', width: 'fit-content' }} title=\"Add Environment Deploy Branch\" onClick={() => {\r\n                                                                            setBrName('')\r\n                                                                            setShName('')\r\n                                                                            setFormName('Add Environment Deploy Branch')\r\n                                                                            setDialog(true)\r\n                                                                        }}\r\n                                                                        >\r\n                                                                            <AddIcon className={typographyClasses.text} color\r\n                                                                                =\"primary\" />\r\n                                                                        </Box>\r\n                                                                    </Box>\r\n                                                            }\r\n                                                            <Box display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\" mt={1}>\r\n                                                                {\r\n                                                                    branches.hasOwnProperty('environmentdeploybranch') === true ?\r\n                                                                        envBrs.map((br, index) => {\r\n                                                                            return (\r\n                                                                                <Box display=\"flex\" key={index}>\r\n                                                                                    <Box p={1} mr={1} bgcolor=\"#3f51b5\" color=\"white\" display=\"flex\" alignItems=\"center\" mb={1}>\r\n                                                                                        <Box bgcolor=\"#3f51b5\" color=\"white\" display=\"flex\" alignItems=\"center\">\r\n                                                                                            <Box mr={4}>\r\n                                                                                                <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%' }}>\r\n                                                                                                    <Box display=\"flex\" mr={1}>\r\n                                                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>Branchname&nbsp;-&nbsp;</Typography>\r\n                                                                                                    </Box>\r\n                                                                                                    <Box>\r\n                                                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>{br['Branchname']}</Typography>\r\n                                                                                                    </Box>\r\n                                                                                                </Box>\r\n                                                                                                <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%' }}>\r\n                                                                                                    <Box display=\"flex\" mr={1}>\r\n                                                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>Shortname&nbsp;-&nbsp;</Typography>\r\n                                                                                                    </Box>\r\n                                                                                                    <Box>\r\n                                                                                                        <Typography align=\"left\" className={typographyClasses.smallText}>{br['Name']}</Typography>\r\n                                                                                                    </Box>\r\n                                                                                                </Box>\r\n                                                                                            </Box>\r\n                                                                                            <Box display=\"flex\" style={{ cursor: 'pointer' }} onClick={() => {\r\n                                                                                                DeleteBranch(\"environmentdeploybranch\", index)\r\n                                                                                            }}>\r\n                                                                                                <Clear className={typographyClasses.smallText} />\r\n                                                                                            </Box>\r\n                                                                                        </Box>\r\n                                                                                    </Box>\r\n                                                                                </Box>\r\n                                                                            )\r\n                                                                        })\r\n                                                                        :\r\n                                                                        null\r\n                                                                }\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                <Box display=\"flex\" p={2} pt={1} pb={1} borderTop={1} style={{ borderColor: 'lightgray' }}>\r\n                                                    <Box p={6} pt={1} pb={1} color=\"white\" style={{ cursor: 'pointer', backgroundImage: 'linear-gradient(45deg, #3f51b5, #2196f3)' }} onClick={() => {\r\n                                                        setLoader(true)\r\n                                                        if (Object.keys(mybranch).length > 0) {\r\n                                                            if (shBrs.length === 0) {\r\n                                                                setMessage('Add atleast one shared branch.')\r\n                                                                setSeverrity('error')\r\n                                                                setOpenAlert(true)\r\n                                                                setLoader(false)\r\n                                                            }\r\n                                                            else {\r\n                                                                if (envBrs.length > 0) {\r\n                                                                    let apidata = {\r\n                                                                        path: apipath['datastore'] + \"/git/createbranches\",\r\n                                                                        method: 'POST',\r\n                                                                        body: {\r\n                                                                            branches: branches\r\n                                                                        },\r\n                                                                        headers: {\r\n                                                                            headers: true,\r\n                                                                            apidomain: apidomain.vmurl\r\n                                                                        },\r\n                                                                        ref: \"CreateOrPullBranches\"\r\n                                                                    }\r\n                                                                    manageAPIs(apidata)\r\n                                                                    // console.log(apidata)\r\n                                                                }\r\n                                                                else {\r\n                                                                    setMessage('Add atleast one environment deploy branch.')\r\n                                                                    setSeverrity('error')\r\n                                                                    setOpenAlert(true)\r\n                                                                    setLoader(false)\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                        else {\r\n                                                            setMessage('Add atleast one my branch.')\r\n                                                            setSeverrity('error')\r\n                                                            setOpenAlert(true)\r\n                                                            setLoader(false)\r\n                                                        }\r\n\r\n                                                    }}>\r\n                                                        <Typography className={`${typographyClasses.text}`}>\r\n                                                            Add\r\n                                                        </Typography>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                </Box>\r\n                            </Box>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        showCred === true ?\r\n                            <Box style={{ width: '100%' }}>\r\n                                <Box style={{ width: '100%' }}>\r\n                                    <div className={tabClasses.root}>\r\n                                        <AppBar position=\"static\" color=\"default\" className={tabClasses.header}>\r\n                                            <Tabs\r\n                                                value={tab}\r\n                                                onChange={handleActionsTab}\r\n                                                variant=\"scrollable\"\r\n                                                scrollButtons=\"auto\"\r\n                                                aria-label=\"Git auto tabs example\"\r\n                                            >\r\n                                                <Tab disableFocusRipple disableRipple disableTouchRipple label={<Typography className={typographyClasses.text}>User Git</Typography>} {...TabProps(\"Git\", 0)} />\r\n                                                <Tab disableFocusRipple disableRipple disableTouchRipple label={<Typography className={typographyClasses.text}>Template Data Store Git</Typography>} {...TabProps(\"Git\", 1)} />\r\n                                            </Tabs>\r\n                                        </AppBar>\r\n                                        <TabPanel value={tab} index={0}>\r\n                                            <Box display=\"flex\" flexDirection=\"column\" p={2}>\r\n                                                <Box mb={2}>\r\n                                                    <Box display=\"flex\" alignItems=\"center\">\r\n                                                        <Box display=\"flex\" alignItems=\"center\" mr={2}>\r\n                                                            <Typography color=\"primary\" className={`${typographyClasses.bold} ${typographyClasses.text}`}>Repo URL</Typography>\r\n                                                        </Box>\r\n                                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                                            <Typography className={`${typographyClasses.text}`}>{gitrepourl}</Typography>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                <Box mb={2}>\r\n                                                    <Box display=\"flex\" alignItems=\"center\">\r\n                                                        <Box display=\"flex\" alignItems=\"center\" mr={2}>\r\n                                                            <Typography color=\"primary\" className={`${typographyClasses.bold} ${typographyClasses.text}`}>Username</Typography>\r\n                                                        </Box>\r\n                                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                                            <Typography className={`${typographyClasses.text}`}>{gitusername}</Typography>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                <Box mb={2}>\r\n                                                    <Box display=\"flex\" alignItems=\"center\">\r\n                                                        <Box display=\"flex\" alignItems=\"center\" mr={2}>\r\n                                                            <Typography color=\"primary\" className={`${typographyClasses.bold} ${typographyClasses.text}`}>Password</Typography>\r\n                                                        </Box>\r\n                                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                                            <Typography className={`${typographyClasses.text}`}>{gitpassword}</Typography>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                <Box>\r\n                                                    <Box mb={1} display=\"flex\">\r\n                                                        <Box mb={1}>\r\n                                                            <Typography color=\"primary\" className={`${typographyClasses.text} ${typographyClasses.bold}`}>Branches</Typography>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                    <Box mb={1} ml={1}>\r\n                                                        <Box mb={1} display=\"flex\">\r\n                                                            <Typography className={`${typographyClasses.text} ${typographyClasses.bold}`}>My Branch</Typography>\r\n                                                        </Box>\r\n                                                        <Box display=\"flex\" flexWrap=\"wrap\">\r\n                                                            <Box p={1} mr={1} bgcolor=\"#3f51b5\" color=\"white\" display=\"flex\" alignItems=\"center\" flexDirection=\"column\">\r\n                                                                <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%' }}>\r\n                                                                    <Box display=\"flex\" mr={1}>\r\n                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>Branchname&nbsp;-&nbsp;</Typography>\r\n                                                                    </Box>\r\n                                                                    <Box>\r\n                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>{mybranch['Branchname']}</Typography>\r\n                                                                    </Box>\r\n                                                                </Box>\r\n                                                                <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%' }}>\r\n                                                                    <Box display=\"flex\" mr={1}>\r\n                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>Shortname&nbsp;-&nbsp;</Typography>\r\n                                                                    </Box>\r\n                                                                    <Box>\r\n                                                                        <Typography align=\"left\" className={typographyClasses.smallText}>{mybranch['Name']}</Typography>\r\n                                                                    </Box>\r\n                                                                </Box>\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                    <Box mb={1} ml={1}>\r\n                                                        <Box mb={1} display=\"flex\">\r\n                                                            <Typography className={`${typographyClasses.text} ${typographyClasses.bold}`}>Shared Branch</Typography>\r\n                                                        </Box>\r\n                                                        <Box display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\">\r\n                                                            {\r\n                                                                shBrs.map((br, index) => {\r\n                                                                    return (\r\n                                                                        <Box display=\"flex\" key={index}>\r\n                                                                            <Box p={1} mr={1} bgcolor=\"#3f51b5\" color=\"white\" display=\"flex\" alignItems=\"center\" mb={1} flexDirection=\"column\">\r\n                                                                                <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%' }}>\r\n                                                                                    <Box display=\"flex\" mr={1}>\r\n                                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>Branchname&nbsp;-&nbsp;</Typography>\r\n                                                                                    </Box>\r\n                                                                                    <Box>\r\n                                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>{br['Branchname']}</Typography>\r\n                                                                                    </Box>\r\n                                                                                </Box>\r\n                                                                                <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%' }}>\r\n                                                                                    <Box display=\"flex\" mr={1}>\r\n                                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>Shortname&nbsp;-&nbsp;</Typography>\r\n                                                                                    </Box>\r\n                                                                                    <Box>\r\n                                                                                        <Typography align=\"left\" className={typographyClasses.smallText}>{br['Name']}</Typography>\r\n                                                                                    </Box>\r\n                                                                                </Box>\r\n                                                                            </Box>\r\n                                                                        </Box>\r\n                                                                    )\r\n                                                                })\r\n                                                            }\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                    <Box mb={1} ml={1}>\r\n                                                        <Box mb={1} display=\"flex\">\r\n                                                            <Typography className={`${typographyClasses.text} ${typographyClasses.bold}`}>Environment Deploy Branch</Typography>\r\n                                                        </Box>\r\n                                                        <Box display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\">\r\n                                                            {\r\n                                                                envBrs.map((br, index) => {\r\n                                                                    return (\r\n                                                                        <Box display=\"flex\" key={index}>\r\n                                                                            <Box p={1} mr={1} bgcolor=\"#3f51b5\" color=\"white\" display=\"flex\" alignItems=\"center\" mb={1} flexDirection=\"column\">\r\n                                                                                <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%' }}>\r\n                                                                                    <Box display=\"flex\" mr={1}>\r\n                                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>Branchname&nbsp;-&nbsp;</Typography>\r\n                                                                                    </Box>\r\n                                                                                    <Box>\r\n                                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>{br['Branchname']}</Typography>\r\n                                                                                    </Box>\r\n                                                                                </Box>\r\n                                                                                <Box display=\"flex\" alignItems=\"center\" style={{ width: '100%' }}>\r\n                                                                                    <Box display=\"flex\" mr={1}>\r\n                                                                                        <Typography align=\"left\" className={`${typographyClasses.smallText}`}>Shortname&nbsp;-&nbsp;</Typography>\r\n                                                                                    </Box>\r\n                                                                                    <Box>\r\n                                                                                        <Typography align=\"left\" className={typographyClasses.smallText}>{br['Name']}</Typography>\r\n                                                                                    </Box>\r\n                                                                                </Box>\r\n                                                                            </Box>\r\n                                                                        </Box>\r\n                                                                    )\r\n                                                                })\r\n                                                            }\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            </Box>\r\n                                        </TabPanel>\r\n                                        <TabPanel value={tab} index={1}>\r\n                                            <Box display=\"flex\" flexDirection=\"column\" p={2}>\r\n                                                <Box mb={2}>\r\n                                                    <Box display=\"flex\" alignItems=\"center\">\r\n                                                        <Box display=\"flex\" alignItems=\"center\" mr={2}>\r\n                                                            <Typography color=\"primary\" className={`${typographyClasses.bold} ${typographyClasses.text}`}>Repo URL</Typography>\r\n                                                        </Box>\r\n                                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                                            <Typography className={`${typographyClasses.text}`}>{templateGit['templategiturl']}</Typography>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                <Box mb={2}>\r\n                                                    <Box display=\"flex\" alignItems=\"center\">\r\n                                                        <Box display=\"flex\" alignItems=\"center\" mr={2}>\r\n                                                            <Typography color=\"primary\" className={`${typographyClasses.bold} ${typographyClasses.text}`}>Username</Typography>\r\n                                                        </Box>\r\n                                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                                            <Typography className={`${typographyClasses.text}`}>{templateGit['templategitusername']}</Typography>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                <Box mb={2}>\r\n                                                    <Box display=\"flex\" alignItems=\"center\">\r\n                                                        <Box display=\"flex\" alignItems=\"center\" mr={2}>\r\n                                                            <Typography color=\"primary\" className={`${typographyClasses.bold} ${typographyClasses.text}`}>Password</Typography>\r\n                                                        </Box>\r\n                                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                                            <Typography className={`${typographyClasses.text}`}>{templateGit['templategitpassword']}</Typography>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                <Box mb={2}>\r\n                                                    <Box display=\"flex\" alignItems=\"center\">\r\n                                                        <Box display=\"flex\" alignItems=\"center\" mr={2}>\r\n                                                            <Typography color=\"primary\" className={`${typographyClasses.bold} ${typographyClasses.text}`}>Branch Name</Typography>\r\n                                                        </Box>\r\n                                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                                            <Typography className={`${typographyClasses.text}`}>{templateGit['templategitbranch']}</Typography>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            </Box>\r\n                                        </TabPanel>\r\n                                    </div>\r\n                                </Box>\r\n                            </Box>\r\n                            :\r\n                            null\r\n                    }\r\n                </Box>\r\n            </Container>\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={() => setDialog(false)}\r\n                aria-labelledby=\"acc-dialog-title\"\r\n                fullWidth={true}\r\n                maxWidth=\"sm\"\r\n            >\r\n                <DialogTitle id=\"acc-dialog-title\" style={{ borderBottom: '1px solid lightgrey' }}>{formName}</DialogTitle>\r\n                <DialogContent>\r\n                    <form autoComplete=\"off\">\r\n                        <Box mb={1}>\r\n                            <FormControl fullWidth>\r\n                                <label htmlFor=\"BranchName\" required>Branch Name</label>\r\n                                <TextField\r\n                                    id=\"BranchName\"\r\n                                    required\r\n                                    fullWidth\r\n                                    value={brName}\r\n                                    placeholder=\"Enter Branch Name\"\r\n                                    onChange={handleFormDataChage.bind(this, \"Branchname\")}\r\n                                    variant=\"outlined\"\r\n                                    helperText=\"Branch Name should be unique\"\r\n                                >\r\n                                </TextField>\r\n                            </FormControl>\r\n                        </Box>\r\n                        <Box mb={1}>\r\n                            <FormControl fullWidth>\r\n                                <label htmlFor=\"nickname\" required>Short Name</label>\r\n                                <TextField\r\n                                    id=\"nickname\"\r\n                                    required\r\n                                    value={shName}\r\n                                    fullWidth\r\n                                    placeholder=\"Enter Short Name\"\r\n                                    onChange={handleFormDataChage.bind(this, \"nickname\")}\r\n                                    variant=\"outlined\"\r\n                                    helperText=\"Short Name should be unique\"\r\n                                >\r\n                                </TextField>\r\n                            </FormControl>\r\n                        </Box>\r\n                    </form>\r\n                </DialogContent>\r\n                <Dialogactions>\r\n                    <Button onClick={() => setDialog(false)} color=\"secondary\" variant=\"contained\">\r\n                        Close\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color='primary'\r\n                        className=\"api-btn\"\r\n                        onClick={() => CheckBranch()}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </Dialogactions>\r\n            </Dialog>\r\n            {\r\n                confirmation !== '' ?\r\n                    <Confirm confirmText={confirmation} clickHandler={handleConfirmation} />\r\n                    :\r\n                    null\r\n            }\r\n            <Footer page=\"app\" />\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default GitSetup;","import React, { Component } from 'react';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { Switch } from 'react-router';\r\nimport '../Utils/AmplifyData';\r\nimport Login from './Cognito/Index';\r\nimport ForgotPassword from './Cognito/ForgotPassword';\r\n// import Signup from './Cognito/SignUp';\r\n// import PrivacyPolicy from './Frontpage/Privacy-Policy';\r\nimport ProductList from './Product/ProductIndex'\r\nimport ServicesList from './Services/ServicesList';\r\nimport ServiceTemplate from './Services/ServiceCatalog';\r\nimport ServiceDetails from './Services/ServiceDetails';\r\n// import Editor from './CodeEditor/NewEditor'\r\nimport DeployementUI from './Deployment/index';\r\nimport GitSetup from './Git/GitSetUp';\r\n// import SampleMethods from './Services/Methods';\r\n\r\n\r\nclass AppRoute extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<HashRouter>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route exact path=\"/\" component={Login} />\r\n\t\t\t\t\t\t<Route exact path=\"/app/login\" component={Login} />\r\n\t\t\t\t\t\t<Route exact path=\"/app/login/forgot-password\" component={ForgotPassword} />\r\n\t\t\t\t\t\t{/* <Route exact path=\"/app/signup\" component={Signup} /> */}\r\n\t\t\t\t\t\t{/* <Route exact path=\"/privacy-policy\" component={PrivacyPolicy} /> */}\r\n\t\t\t\t\t\t<Route exact path=\"/app/products\" component={ProductList} />\r\n\t\t\t\t\t\t<Route exact path=\"/app/products/:productid/service_templates\" component={ServiceTemplate} />\r\n\t\t\t\t\t\t<Route exact path=\"/app/products/:productid/services/:serviceid\" component={ServiceDetails} />\r\n\t\t\t\t\t\t<Route exact path=\"/app/products/:productid/services\" component={ServicesList} />\r\n\t\t\t\t\t\t{/* <Route exact path=\"/editor\" component={Editor} /> */}\r\n\t\t\t\t\t\t<Route exact path=\"/app/gitsetup\" component={GitSetup} />\r\n\t\t\t\t\t\t{/* <Route exact path=\"/methods\" component={SampleMethods} /> */}\r\n\t\t\t\t\t\t<Route exact path=\"/app/products/:productid/services/:serviceid/deploy\" component={DeployementUI} />\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</HashRouter>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default AppRoute;","import React from 'react';\nimport './App.css';\nimport Home from './Pages/Home'\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Home />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n","const path = {\r\n    designapi:\"/design/v1\",\r\n    apipath:\"/design/v1\",\r\n    liveapi:\"/live/v1\",\r\n    datastore:\"/datastore/v1\",\r\n    publish:\"/publish/v1\",\r\n    templatestore:\"/templatestore/v1\"\r\n}\r\n\r\nexport default path;","module.exports = __webpack_public_path__ + \"static/media/ap-logo.938aa470.png\";","import React from 'react';\r\n\r\n//Material UI\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tbackdrop: {\r\n\t\tzIndex: theme.zIndex.snackbar + 1,\r\n\t\tcolor: '#fff',\r\n\t},\r\n}));\r\n\r\nfunction BackdropLoader({ type, open }) {\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\ttype === \"block\" ?\r\n\t\t\t\t\t<CircularProgress />\r\n\t\t\t\t\t:\r\n\t\t\t\t\tnull\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\ttype === \"page\" ?\r\n\t\t\t\t\t<Backdrop className={classes.backdrop} open={open}>\r\n\t\t\t\t\t\t<CircularProgress color=\"inherit\" />\r\n\t\t\t\t\t</Backdrop>\r\n\t\t\t\t\t:\r\n\t\t\t\t\tnull\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n// BackdropLoader.propTypes = {\r\n//   open: Proptypes.bool.isRequired\r\n// }\r\n\r\nexport default BackdropLoader;","import makeStyles from '@material-ui/core/styles/makeStyles';\r\n\r\nconst StatusStyles = makeStyles({\r\n    \"failed\":{\r\n        backgroundColor:\"#f01a1a\"\r\n    },\r\n    \"running\":{\r\n        backgroundColor:\"green\"\r\n    },\r\n    \"Running\":{\r\n        backgroundColor:\"green\"\r\n    },\r\n    \"Degraded\":{\r\n        backgroundColor:\"red\"\r\n    },\r\n    \"Error\":{\r\n        backgroundColor:\"#f01a1a\"\r\n    },\r\n    \"deploying\":{\r\n        backgroundColor:\"#ff9800\"\r\n    },\r\n    \"design\":{\r\n        backgroundColor:\"#3f51b5\"\r\n    },\r\n    \"Initiated\":{\r\n        backgroundColor:\"#3f51b5\"\r\n    },\r\n    \"published\":{\r\n        backgroundColor:\"#3f51b5\"\r\n    }\r\n});\r\n\r\nexport default StatusStyles;","import React from 'react';\r\n\r\n//Material UI\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\n\r\nfunction Alert(props) {\r\n\treturn <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\twidth: '100%',\r\n\t\t'& > * + *': {\r\n\t\t\tmarginTop: theme.spacing(2),\r\n\t\t},\r\n\t},\r\n}));\r\n\r\nexport default function Info({ openAlert, severity, message, handler }) {\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Snackbar open={openAlert} autoHideDuration={10000} onClose={handler}\r\n\t\t\t\tanchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n\t\t\t>\r\n\t\t\t\t<Alert onClose={handler} severity={severity}>\r\n\t\t\t\t\t{message}\r\n\t\t\t\t</Alert>\r\n\t\t\t</Snackbar>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import Apidomain from './ApiDomain';\r\nimport Cognitofucntions from '../Pages/Cognito/CognitoFunctions';\r\nimport CognitoDetails from '../Pages/Cognito/CognitoDetails';\r\n\r\nconst HandleApi = {\r\n    handleAPI: (api, method, body, headers) => {\r\n        let token = CognitoDetails.accessToken\r\n        let userData = sessionStorage.getItem('user') ? JSON.parse(window.atob(sessionStorage.getItem('user'))) : ''\r\n        let heads = headers, apidomain = {\r\n            url: Apidomain.url\r\n        }\r\n        if (typeof (heads) === \"object\") {\r\n            apidomain.url = heads.apidomain\r\n            heads = heads.headers\r\n        }\r\n        if (token === '') {\r\n            Cognitofucntions.Signout()\r\n        }\r\n        else {\r\n            let additionalHeaders = new Headers()\r\n            additionalHeaders.append('auth', token)\r\n            if (headers) {\r\n                additionalHeaders.append('userid', userData.EmailId)\r\n                // additionalHeaders.append('tenantid', userData.TenantId)\r\n            }\r\n            if (method === \"POST\" || method === \"DELETE\" || method === \"PATCH\") {\r\n                additionalHeaders.set('Content-Type', 'application/json')\r\n            }\r\n            if (sessionStorage.getItem('googlesignin')) {\r\n                if (!localStorage.getItem('aws-amplify-federatedInfo')) {\r\n                    Cognitofucntions.Signout()\r\n                }\r\n                else {\r\n                    return fetch(apidomain.url + api, { method: method, body: body, headers: additionalHeaders })\r\n                        // return fetch(apidomain.url + api, { method: method, body: body })\r\n                        .then(result => result.json())\r\n                        .then(result => {\r\n                            return result\r\n                        })\r\n                        .catch(err => {\r\n                            return err\r\n                        })\r\n                }\r\n            }\r\n            else {\r\n                if (body !== undefined && Object.keys(JSON.parse(body)).length > 0) {\r\n                    return fetch(apidomain.url + api, { method: method, body: body, headers: additionalHeaders })\r\n                        .then(result => result.json())\r\n                        .then(result => {\r\n                            return result\r\n                        })\r\n                        .catch(err => {\r\n                            return err\r\n                        })\r\n                }\r\n                else {\r\n                    return fetch(apidomain.url + api, { method: method, headers: additionalHeaders })\r\n                        .then(result => result.json())\r\n                        .then(result => {\r\n                            return result\r\n                        })\r\n                        .catch(err => {\r\n                            return err\r\n                        })\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default HandleApi","import makeStyles from '@material-ui/core/styles/makeStyles';\r\n\r\nconst TypographyStyles = makeStyles((theme) => ({\r\n    root: {\r\n        color: 'white'\r\n    },\r\n    text: {\r\n        fontSize: '1rem',\r\n    },\r\n    h1: {\r\n        fontSize: theme.typography.h1.fontSize,\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: theme.typography.h2.fontSize\r\n        },\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            fontSize: theme.typography.h3.fontSize\r\n        }\r\n    },\r\n    h2: {\r\n        fontSize: theme.typography.h2.fontSize,\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: theme.typography.h3.fontSize\r\n        },\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            fontSize: theme.typography.h4.fontSize\r\n        }\r\n    },\r\n    h3: {\r\n        fontSize: theme.typography.h3.fontSize,\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: theme.typography.h4.fontSize\r\n        },\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            fontSize: theme.typography.h5.fontSize\r\n        }\r\n    },\r\n    h4: {\r\n        fontSize: theme.typography.h4.fontSize,\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: theme.typography.h5.fontSize\r\n        },\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            fontSize: theme.typography.h6.fontSize\r\n        }\r\n    },\r\n    h5: {\r\n        fontSize: theme.typography.h5.fontSize,\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: theme.typography.h6.fontSize\r\n        },\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            fontSize: '0.9rem'\r\n        }\r\n    },\r\n    h6: {\r\n        fontSize: theme.typography.h6.fontSize,\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: '1rem'\r\n        }\r\n    },\r\n    bold: {\r\n        fontWeight: 'bold'\r\n    },\r\n    smallText: {\r\n        fontSize: '0.8rem'\r\n    }\r\n}));\r\n\r\nexport default TypographyStyles;","const GoogleSigninDetails = {\r\n    \"GoogleCred\":{}\r\n}\r\n\r\nexport default GoogleSigninDetails;","function CheckGoogleAPI(key) {\r\n    const ga = window.gapi;\r\n    if (ga) {\r\n        initGapi(ga, key)\r\n    }\r\n    else {\r\n        createScript(key)\r\n    }\r\n}\r\n\r\nfunction initGapi(g, key) {\r\n    g.load('auth2', function () {\r\n        g.auth2.init({\r\n            client_id: '38263492319-j1p2qgsvt2cr412jjfb6hstdjkslg81e.apps.googleusercontent.com',\r\n            // authorized scopes\r\n            scope: 'profile email openid'\r\n        });\r\n        if (key === \"signout\") {\r\n            window.gapi.auth2.getAuthInstance().signOut()\r\n        }\r\n    });\r\n}\r\n\r\nfunction createScript(key) {\r\n    // load the Google SDK\r\n    const script = document.createElement('script');\r\n    script.src = 'https://apis.google.com/js/platform.js';\r\n    script.async = true;\r\n    script.onload = getGapi();\r\n    document.body.appendChild(script);\r\n}\r\n\r\nfunction getGapi(key) {\r\n    // init the Google SDK client\r\n    let ginterval = setInterval(function () {\r\n        const g = window.gapi\r\n        if (g !== undefined) {\r\n            initGapi(g, key)\r\n            clearInterval(ginterval)\r\n        }\r\n    }, 1000)\r\n}\r\n\r\nexport default { CheckGoogleAPI }","import '../../Utils/AmplifyData';\r\nimport Auth from '@aws-amplify/auth';\r\nimport CognitoDetails from './CognitoDetails';\r\nimport GoogleCred from './GoogleSigninDetails';\r\nimport GoogleAPIScript from './LoadGoogleAPIScript';\r\n\r\nlet refreshSession = ''\r\n\r\nfunction Signin(apidata, asyncfuntion) {\r\n    Auth.signIn({\r\n        username: apidata.email,\r\n        password: apidata.password\r\n    }).then(user => {\r\n        asyncfuntion(true, user)\r\n    }).catch(err => {\r\n        asyncfuntion(false, err)\r\n    })\r\n}\r\n\r\nfunction Signup(apidata, asyncfuntion) {\r\n    Auth.signUp({\r\n        username: apidata.email,\r\n        password: apidata.password,\r\n        attributes: {\r\n            email: apidata.email,\r\n            // name: apidata.name\r\n        },\r\n    })\r\n        .then((data) => {\r\n            asyncfuntion(true, data)\r\n        })\r\n        .catch((err) => {\r\n            asyncfuntion(false, err)\r\n        });\r\n}\r\n\r\nfunction Confirmsignup(apidata, asyncfuntion) {\r\n    Auth.confirmSignUp(apidata.email, apidata.code)\r\n        .then(result => {\r\n            asyncfuntion(true, result)\r\n        })\r\n        .catch(err => {\r\n            asyncfuntion(false, err)\r\n        })\r\n}\r\n\r\nfunction Resendcode(apidata, asyncfuntion) {\r\n    Auth.resendSignUp(apidata.email)\r\n        .then(result => {\r\n            asyncfuntion(true, result)\r\n        })\r\n        .catch(err => {\r\n            asyncfuntion(false, err)\r\n        })\r\n}\r\n\r\nfunction CurrentUser(asyncfuntion) {\r\n    Auth.currentAuthenticatedUser({\r\n    }).then(user => {\r\n        // sessionStorage.setItem('cognito-user', user.attributes.email);\r\n        // sessionStorage.setItem('cognito-access', user.signInUserSession.accessToken.jwtToken)\r\n        CognitoDetails.email = user.attributes.email\r\n        CognitoDetails.accessToken = user.signInUserSession.idToken.jwtToken\r\n        RetrieveSession()\r\n        asyncfuntion(true, user)\r\n    }).catch(err => {\r\n        asyncfuntion(false, err)\r\n    })\r\n}\r\n\r\nfunction RetrieveSession() {\r\n    Auth.currentSession()\r\n        .then(data => {\r\n            // sessionStorage.setItem('cognito-access', data.accessToken.jwtToken);\r\n            // sessionStorage.setItem('cognito-id', data.idToken.jwtToken);\r\n            CognitoDetails.accessToken = data.idToken.jwtToken\r\n            clearInterval(refreshSession);\r\n            refreshSession = setInterval(function () {\r\n                console.log('Session refreshed')\r\n                RetrieveSession()\r\n            }, (data.accessToken.payload.exp - Math.round(new Date().getTime() / 1000)) * 1000);\r\n        })\r\n        .catch(err => {\r\n            // console.log(err)\r\n        });\r\n}\r\n\r\nfunction ForgotPasswordTrigger(apidata, asyncfuntion) {\r\n    Auth.forgotPassword(apidata.email)\r\n        .then(response => {\r\n            asyncfuntion(true, response)\r\n        })\r\n        .catch(err => {\r\n            asyncfuntion(false, err)\r\n        })\r\n}\r\n\r\nfunction ForgotPasswordConfirm(apidata, asyncfuntion) {\r\n    Auth.forgotPasswordSubmit(apidata.email, apidata.code, apidata.password)\r\n        .then(response => {\r\n            asyncfuntion(true, response)\r\n        })\r\n        .catch(err => {\r\n            asyncfuntion(false, err)\r\n        })\r\n}\r\n\r\nfunction Completenewpassword(apidata, asyncfuntion) {\r\n    Auth.completeNewPassword(apidata.currentuser, apidata.password)\r\n        .then(result => {\r\n            asyncfuntion(true, result)\r\n        })\r\n        .catch(err => {\r\n            asyncfuntion(false, err)\r\n        })\r\n}\r\n\r\nfunction Signout(key) {\r\n    for (let i = 0; i < sessionStorage.length;) {\r\n        if (sessionStorage.key(i) === \"cognitoauth\" || sessionStorage.key(i) === \"apidomain\" || sessionStorage.key(i) === \"cookie-accepted\" || sessionStorage.key(i) === \"user_attrs\") {\r\n            i = i + 1;\r\n            continue;\r\n        }\r\n        else {\r\n            sessionStorage.removeItem(sessionStorage.key(i))\r\n        }\r\n    }\r\n    Auth.signOut()\r\n        .then(result => {\r\n\r\n        })\r\n        .catch(err => {\r\n\r\n        })\r\n\r\n    GoogleCred['GoogleCred'] = {}\r\n    if(window.gapi && window.gapi.auth2){\r\n        window.gapi.auth2.getAuthInstance().signOut()\r\n    }\r\n    else{\r\n        GoogleAPIScript.CheckGoogleAPI('signout')\r\n    }\r\n\r\n    setTimeout(function () {\r\n        // window.location.href = window.location.origin\r\n        window.location.href = window.location.origin\r\n    }, 1000)\r\n}\r\n\r\nfunction GetGoogleCredentials(asyncfuntion) {\r\n    let federatedInfo = localStorage.getItem('aws-amplify-federatedInfo');\r\n    if (federatedInfo) {\r\n        CognitoDetails.accessToken = JSON.parse(federatedInfo)['token']\r\n        CognitoDetails.email = JSON.parse(federatedInfo)['user']['email']\r\n        asyncfuntion(true)\r\n    }\r\n    else {\r\n        asyncfuntion(false)\r\n    }\r\n}\r\n\r\nexport default { Signin, CurrentUser, RetrieveSession, Signup, ForgotPasswordTrigger, ForgotPasswordConfirm, Confirmsignup, Completenewpassword, Resendcode, Signout, GetGoogleCredentials };","import Amplify from 'aws-amplify'\r\nimport $ from 'jquery';\r\nimport apidomain from './ApiDomain'\r\n\r\n\r\n// let dataJSON = {\r\n//     \"domain\": \"https://archeplaylabs.auth.us-east-1.amazoncognito.com\",\r\n//     \"redirect_uri\": \"https://devlocal.archeplay.com/enterpriselabs/index.html\",\r\n//     \"aws_user_pools_id\": \"us-east-1_xPsHImn8D\",\r\n//     \"aws_user_pools_web_client_id\": \"47g94ojpsp2msn0lkcq1k63t5v\",\r\n//     \"apidomain\": \"https://api.devlocal.archeplay.com\",\r\n//     \"region\":\"us-east-1\"\r\n// }\r\n\r\n//Devlocal Config Data\r\nlet dataJSON = {\r\n    apidomain: \"https://api.devlocal.archeplay.com\",\r\n    identityPoolId: 'us-east-1:98f6a427-f808-4b68-8ed2-5744c07b744b', //REQUIRED - Amazon Cognito Identity Pool ID\r\n    region: 'us-east-1', // REQUIRED - Amazon Cognito Region\r\n    userPoolId: 'us-east-1_kMH6aoDCq', //OPTIONAL - Amazon Cognito User Pool ID\r\n    userPoolWebClientId: '4ocs19eg5o32mf3oo6b7i7t9kt', //OPTIONAL - Amazon Cognito Web Client ID\r\n    vmdomain: window.location.origin\r\n    // vmdomain: \"http://ec2-3-239-59-56.compute-1.amazonaws.com\"\r\n}\r\n\r\n// let dataJSON = {\r\n//     apidomain: \"https://api.devlocal.archeplay.com\",\r\n//     // identityPoolId: 'us-east-1:98f6a427-f808-4b68-8ed2-5744c07b744b', //REQUIRED - Amazon Cognito Identity Pool ID\r\n//     region: 'us-east-1', // REQUIRED - Amazon Cognito Region\r\n//     userPoolId: 'us-east-1_YFqyf0yyn', //OPTIONAL - Amazon Cognito User Pool ID\r\n//     userPoolWebClientId: 'bkfpi3t7kpick5d9nh1diq0s5', //OPTIONAL - Amazon Cognito Web Client ID\r\n// }\r\n\r\n\r\n// // Old Prod Config Data\r\n// let dataJSON = {\r\n//     apidomain: \"https://api.archeplay.com\",\r\n//     userPoolId: \"us-east-1_83kURAb8i\",\r\n//     region: 'us-east-1', // REQUIRED - Amazon Cognito Region\r\n//     userPoolWebClientId: \"3goui8ec57gcou6bl2c2ln1fnn\",\r\n//     // identityPoolId:\"us-east-1:4e4197a6-30c4-4650-a769-6dad72271d1f\"\r\n// }\r\n\r\n//Prod Config Data\r\n// let dataJSON = {\r\n//     apidomain: \"https://api.archeplay.com\",\r\n//     userPoolId: \"us-east-1_M0O8FmGHe\",\r\n//     region: 'us-east-1', // REQUIRED - Amazon Cognito Region\r\n//     userPoolWebClientId: \"5ga1kkiuvl9gi77eenoqj1dg6d\",\r\n// identityPoolId:\"us-east-1:31d96aee-2c03-405e-95ad-c2e84ed280c6\",\r\n// vmdomain: window.location.origin\r\n// }\r\n\r\n// GetAmplifyData();\r\n\r\n\r\nfunction GetAmplifyData() {\r\n    $.ajax({\r\n        url: window.location.origin + \"/app/data.json\",\r\n        crossDomain: true,\r\n        success: function (result) {\r\n            let data = {\r\n                \"identityPoolId\": result.identityPoolId,\r\n                region: result.region,\r\n                \"userPoolId\": result.userPoolId,\r\n                \"userPoolWebClientId\": result.userPoolWebClientId,\r\n                \"apidomain\": result.apidomain,\r\n            }\r\n            apidomain.url = data.apidomain\r\n            sessionStorage.setItem('cognitoauth', window.btoa(JSON.stringify(data)));\r\n            sessionStorage.setItem('apidomain', data.apidomain);\r\n            Amplify.configure({ Auth: data });\r\n        },\r\n        error: function (err) {\r\n\r\n        }\r\n    })\r\n}\r\napidomain.url = dataJSON.apidomain\r\napidomain.vmurl = dataJSON.vmdomain\r\nsessionStorage.setItem('cognitoauth', window.btoa(JSON.stringify(dataJSON)));\r\nsessionStorage.setItem('apidomain', dataJSON.apidomain);\r\nsessionStorage.setItem('vmurl', dataJSON.vmdomain);\r\nAmplify.configure({\r\n    Auth: dataJSON\r\n});\r\n\r\nexport default GetAmplifyData;","import React, { useState, useEffect, forwardRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Custom Components\r\nimport HandleApi from '../../Utils/HandleApi';\r\nimport Loader from '../../Components/Loader';\r\nimport Alert from '../../Components/Alert';\r\nimport Confirm from '../../Components/Confirm';\r\nimport SchemaForm from './Form';\r\nimport apipath from '../../Utils/Apipath';\r\nimport apidomain from '../../Utils/ApiDomain';\r\n\r\n// Material UI\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\n// import Link from '@material-ui/core/Link';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport MuiAccordion from '@material-ui/core/Accordion';\r\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport MuiAccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n// Material Icons\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport LibraryAdd from '@material-ui/icons/LibraryAdd';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\n\r\n// Material Table\r\nimport MaterialTable from \"material-table\";\r\n\r\nimport { JSONToHTMLTable } from '@kevincobain2000/json-to-html-table'\r\n\r\n// Custom Styles\r\nimport TypographyStyles from '../../assets/styles/TypographySyles';\r\nimport StatusStyles from '../../assets/styles/StatusStyles';\r\n\r\nconst tabStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n        backgroundColor: 'white !important'\r\n    },\r\n    header: {\r\n        boxShadow: 'none',\r\n        background: 'white',\r\n        border: 'none'\r\n    }\r\n}));\r\n\r\nconst Accordion = withStyles({\r\n    root: {\r\n        // border: '1px solid rgba(0, 0, 0, .125)',\r\n        boxShadow: 'none',\r\n        '&:not(:last-child)': {\r\n            borderBottom: 0,\r\n        },\r\n        '&:before': {\r\n            display: 'none',\r\n        },\r\n        '&$expanded': {\r\n            margin: 'auto',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordion);\r\n\r\nconst AccordionSummary = withStyles({\r\n    root: {\r\n        backgroundColor: 'white',\r\n        borderBottom: '1px solid rgba(0, 0, 0, .125)',\r\n        marginBottom: 0,\r\n        minHeight: 56,\r\n        '&$expanded': {\r\n            minHeight: 56,\r\n            // border:'1px solid rgba(0, 0, 0, .125)'\r\n        },\r\n    },\r\n    // expandIcon: {\r\n    //     '&$expanded': {\r\n    //         transform: 'rotate(90deg)'\r\n    //     }\r\n    // },\r\n    content: {\r\n        margin: 0,\r\n        '&$expanded': {\r\n            margin: '0',\r\n        },\r\n    },\r\n    expanded: {},\r\n})(MuiAccordionSummary);\r\n\r\nconst AccordionDetails = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiAccordionDetails);\r\n\r\nfunction expansionProps(name, index) {\r\n    return {\r\n        id: `${name}${index}-header`,\r\n        'aria-controls': `${name}${index}-content`,\r\n    };\r\n}\r\n\r\nconst tableColumns = [\r\n    {\r\n        title: 'Attribute Name',\r\n        field: 'attributename',\r\n    },\r\n    {\r\n        title: 'Attribute Type',\r\n        field: 'attributetype'\r\n    },\r\n    {\r\n        title: 'Description',\r\n        field: 'description'\r\n    },\r\n    {\r\n        title: 'Constraints',\r\n        field: 'constraints'\r\n    }\r\n]\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n    LibraryAdd: forwardRef((props, ref) => <LibraryAdd {...props} ref={ref} />)\r\n};\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={1}>\r\n                    {children}\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction TabProps(name, index) {\r\n    return {\r\n        id: `${name}-auto-tab-${index}`,\r\n        'aria-controls': `${name}-auto-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst TableDetails = ({ btnAction, trigger, dbjson, callapi, ...props }) => {\r\n    const [loader, setLoader] = useState(false)\r\n    const [openAlert, setOpenAlert] = useState(false)\r\n    const [severity, setSeverrity] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [confirmation, setConfirmation] = useState('')\r\n    const [confApiData, setConfApiData] = useState({})\r\n    const [db, setDB] = useState({})\r\n    const [tableList, setTableList] = useState([])\r\n    const [tableExpObj, setTableExpObj] = useState({})\r\n    const [tableTab, setTableTab] = useState(0)\r\n    const [loadTimeout, setLoadTimeout] = useState(false)\r\n    const [formDialog, setFormDialog] = useState(false)\r\n    const [formName, setFormName] = useState('')\r\n    const [formData, setFormData] = useState({})\r\n    const [attrIpList, setAttrIpList] = useState([{ \"attributename\": \"\", \"attributetype\": \"S\", \"description\": \"\", \"constraints\": \"\" }]);\r\n    const [curTable, setCurTable] = useState({})\r\n    const [delAttrs, setDelAttrs] = useState([])\r\n    const [indexes, setIndexes] = useState({})\r\n    const [tabname, settabname] = useState('')\r\n    const [schemas, setSchemas] = useState({\r\n        \"attributeschema\": {\r\n            \"schema\": {\r\n                \"attributename\": {\r\n                    \"type\": \"string\",\r\n                    \"mandatory\": true,\r\n                    \"title\": \"Attribute Name\",\r\n                    \"condition\": {\r\n                        \"onchange\": \"!==/#schema.attributename\"\r\n                    }\r\n                },\r\n                \"attributetype\": {\r\n                    \"type\": \"string\",\r\n                    \"mandatory\": true,\r\n                    \"title\": \"Attribute Type\",\r\n                    \"allowedvalues\": [\r\n                        \"S\",\r\n                        \"B\",\r\n                        \"N\"\r\n                    ]\r\n                },\r\n                \"description\": {\r\n                    \"type\": \"string\",\r\n                    \"mandatory\": false,\r\n                    \"title\": \"Description\"\r\n                },\r\n                \"constraints\": {\r\n                    \"type\": \"string\",\r\n                    \"mandatory\": false,\r\n                    \"title\": \"Constraints\"\r\n                }\r\n            },\r\n            \"order\": [\r\n                \"attributename\",\r\n                \"attributetype\",\r\n                \"description\",\r\n                \"constraints\"\r\n            ]\r\n        },\r\n        \"primaryschema\": {\r\n            \"schema\": {\r\n                \"key\": {\r\n                    \"type\": \"string\",\r\n                    \"mandatory\": true,\r\n                    \"title\": \"Key\",\r\n                    \"allowedvalues\": []\r\n                },\r\n                \"sortkey\": {\r\n                    \"type\": \"string\",\r\n                    \"mandatory\": false,\r\n                    \"condition\": {\r\n                        \"onchange\": \"!==/key\"\r\n                    },\r\n                    \"title\": \"Sort Key\",\r\n                    \"allowedvalues\": []\r\n                },\r\n                \"infra\": {\r\n                    \"type\": \"object\",\r\n                    \"title\": \"Infra\",\r\n                    \"fields\": {\r\n                        \"ondemand\": {\r\n                            \"type\": \"boolean\",\r\n                            \"mandatory\": true,\r\n                            \"title\": \"On Demand\",\r\n                            \"default\": true\r\n                        },\r\n                        \"iops\": {\r\n                            \"type\": \"object\",\r\n                            \"title\": \"IOPS\",\r\n                            \"dependson\": \"ondemand/false\",\r\n                            \"fields\": {\r\n                                \"read\": {\r\n                                    \"type\": \"number\",\r\n                                    \"title\": \"Read\",\r\n                                    \"mandatory\": true,\r\n                                    \"minvalue\": 1,\r\n                                    \"maxvalue\": 10\r\n                                },\r\n                                \"write\": {\r\n                                    \"type\": \"number\",\r\n                                    \"title\": \"Write\",\r\n                                    \"mandatory\": true,\r\n                                    \"minvalue\": 1,\r\n                                    \"maxvalue\": 10\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"order\": [\r\n                \"key\",\r\n                \"sortkey\",\r\n                \"infra\"\r\n            ]\r\n        },\r\n        \"secondaryschema\": {\r\n            \"schema\": {\r\n                \"indexname\": {\r\n                    \"type\": \"string\",\r\n                    \"title\": \"Index Name\",\r\n                    \"readonly\": true,\r\n                    \"autopopulate\": true,\r\n                    \"populatevalues\": ['key', 'sortkey'],\r\n                    \"suffix\": \"index\",\r\n                    \"join\": \"-\"\r\n                },\r\n                \"key\": {\r\n                    \"type\": \"string\",\r\n                    \"mandatory\": true,\r\n                    \"title\": \"Key\",\r\n                    \"condition\": {\r\n                        \"allowedvalues\": [\r\n                            \"!==/#indexes.primary.key\",\r\n                            \"!==/#indexes.primary.sortkey\",\r\n                            \"!==/#indexes.secondary.key\",\r\n                            \"!==/#indexes.secondary.sortkey\"\r\n                        ]\r\n                    },\r\n                    \"allowedvalues\": []\r\n                },\r\n                \"sortkey\": {\r\n                    \"type\": \"string\",\r\n                    \"mandatory\": false,\r\n                    \"title\": \"Sort Key\",\r\n                    \"condition\": {\r\n                        \"onchange\": \"!==/key\",\r\n                        \"allowedvalues\": [\r\n                            \"!==/#indexes.primary.key\",\r\n                            \"!==/#indexes.primary.sortkey\",\r\n                            \"!==/#indexes.secondary.key\",\r\n                            \"!==/#indexes.secondary.sortkey\"\r\n                        ]\r\n                    },\r\n                    \"allowedvalues\": []\r\n                },\r\n                \"infra\": {\r\n                    \"type\": \"object\",\r\n                    \"title\": \"Infra\",\r\n                    \"fields\": {\r\n                        \"ondemand\": {\r\n                            \"type\": \"boolean\",\r\n                            \"title\": \"On Demand\",\r\n                            \"default\": \"/#indexes.primary.ondemand\",\r\n                            \"readonly\": true\r\n                        },\r\n                        \"iops\": {\r\n                            \"type\": \"object\",\r\n                            \"title\": \"IOPS\",\r\n                            \"dependson\": \"ondemand/false\",\r\n                            \"fields\": {\r\n                                \"read\": {\r\n                                    \"type\": \"number\",\r\n                                    \"title\": \"Read\",\r\n                                    \"mandatory\": true,\r\n                                    \"default\": \"/#indexes.primary.infra.iops.read\",\r\n                                    \"minvalue\": 1,\r\n                                    \"maxvalue\": 10\r\n                                },\r\n                                \"write\": {\r\n                                    \"type\": \"number\",\r\n                                    \"title\": \"Write\",\r\n                                    \"default\": \"/#indexes.primary.infra.iops.write\",\r\n                                    \"mandatory\": true,\r\n                                    \"minvalue\": 1,\r\n                                    \"maxvalue\": 10\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"order\": [\r\n                \"key\",\r\n                \"sortkey\",\r\n                \"indexname\",\r\n                \"infra\"\r\n            ]\r\n        },\r\n    })\r\n    const [curSchema, setCurSchema] = useState({})\r\n    const [curAttr, setcurAttr] = useState({})\r\n    const [delCheck, setDelCheck] = useState([])\r\n    const dbmap = {\r\n        \"dynamodb\": \"DynamoDB\"\r\n    }\r\n    const [jsontohtml, setJsontoHtml] = useState({})\r\n    const [curState, setCurstate] = useState(\"\")\r\n    const [liveInterval, setLiveInterval] = useState(false)\r\n    const [tablejson, setTableJson] = useState({})\r\n    const [delInterval, setDelInterval] = useState(false)\r\n    const [tablestatus, setTableStatus] = useState('')\r\n    const [dbstatus, setDbStatus] = useState('')\r\n\r\n    // const attrtypemap = {\r\n    //     \"S\": \"String\",\r\n    //     \"N\": \"Number\",\r\n    //     \"B\": \"Boolean\"\r\n    // }\r\n\r\n    const { versionid, serviceid, resourceid } = props\r\n\r\n    const typographyClasses = TypographyStyles()\r\n    const tabClasses = tabStyles();\r\n    const statusClasses = StatusStyles()\r\n\r\n    let liveflag = false, liveinterval = \"\"\r\n\r\n    useEffect(() => {\r\n        if (callapi) {\r\n            let apidata1 = {\r\n                method: \"GET\",\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                path: apipath['designapi'] + \"/data/\" + serviceid + \"/\" + versionid + \"/\" + resourceid + \"/database\",\r\n                ref: \"GetDB\",\r\n                body: {},\r\n                callOP: true\r\n            }\r\n            manageAPIs(apidata1)\r\n        }\r\n        else {\r\n            let dbb = {\r\n                \"type\": dbjson[0]['db'][0]['dbtype']\r\n            }\r\n            if (dbjson[0]['db'][0].hasOwnProperty('output')) {\r\n                dbb['output'] = dbjson[0]['db'][0]['output']\r\n            }\r\n            if (dbjson[0]['db'][0].hasOwnProperty('logpath')) {\r\n                dbb['logpath'] = dbjson[0]['db'][0]['logpath']\r\n            }\r\n            if (dbjson[0]['db'][0].hasOwnProperty('state') && dbjson[0]['db'][0]['state'].hasOwnProperty('status') && dbjson[0]['db'][0]['state'].hasOwnProperty(dbjson[0]['db'][0]['state']['status'])) {\r\n                dbb['state'] = dbjson[0]['db'][0]['state'][dbjson[0]['db'][0]['state']['status']]\r\n                dbb['status'] = dbjson[0]['db'][0]['state']['status']\r\n            }\r\n            if (dbjson[0]['db'][0].hasOwnProperty('tables')) {\r\n                setTableList(dbjson[0]['db'][0]['tables'])\r\n            }\r\n            setDB(dbb)\r\n        }\r\n    }, [])\r\n\r\n    const manageAPIs = (apidata) => {\r\n        HandleApi.handleAPI(apidata.path, apidata.method, JSON.stringify(apidata.body), apidata.headers)\r\n            .then(result => {\r\n                if (result.hasOwnProperty('message') && result.message !== \"\") {\r\n                    setMessage(result.message)\r\n                    setSeverrity('info')\r\n                    setOpenAlert(true)\r\n                }\r\n                if ((result.hasOwnProperty('statusCode') && result.statusCode === 200) || (result.hasOwnProperty('status') && (result.status === 200 || result.status === \"200\"))) {\r\n                    if (apidata.ref === \"GetAllTables\") {\r\n                        if (result.body.length === 0) {\r\n                            setLoadTimeout(true)\r\n                            if (!btnAction) {\r\n                                setFormName('Add Table')\r\n                                setFormDialog(true)\r\n                            }\r\n                            setTableList(result.body)\r\n                        }\r\n                        else if (result.body.length === 1) {\r\n                            setCurTable(result.body[0])\r\n                            setIndexes(result.body[0].indexes)\r\n                            if (result.body[0].schema.length === 0 && !btnAction) {\r\n                                setFormName('Add Attribute')\r\n                                setFormDialog(true)\r\n                            }\r\n                            else if (Object.keys(result.body[0].indexes).length === 0 && !btnAction) {\r\n                                setTableTab(1)\r\n                                setFormName('Add Primary Index')\r\n                                if (!schemas.hasOwnProperty('primaryschema')) {\r\n\r\n                                }\r\n                                else {\r\n                                    PopulateAllowedValues('primaryschema', result.body[0])\r\n                                }\r\n                            }\r\n                            setTableList(result.body)\r\n                        }\r\n                        if (result.body.length > 0) {\r\n                            let dbid = \"\"\r\n                            if (Object.keys(db).length > 0) {\r\n                                dbid = db.dbid\r\n                            }\r\n                            else {\r\n                                dbid = apidata.dbJson.dbid\r\n                            }\r\n                            let tableJSON = tablejson\r\n                            for (let i = 0; i < result.body.length; i++) {\r\n                                tableJSON[result.body[i].tableid] = result.body[i]\r\n                                // if(apidata.callOP){\r\n                                let nextAPIdata = {\r\n                                    method: \"GET\",\r\n                                    headers: {\r\n                                        headers: true,\r\n                                        apidomain: apidomain.vmurl\r\n                                    },\r\n                                    path: apipath['liveapi'] + \"/\" + serviceid + \"/\" + dbid + \"/table/\" + result.body[i].tableid + \"/output\",\r\n                                    ref: \"GetLiveTableOP\",\r\n                                    body: {},\r\n                                    show: false,\r\n                                    tableJson: result.body[i],\r\n                                    key: \"Table\",\r\n                                    tablelist: result.body,\r\n                                    dbid: dbid\r\n                                }\r\n                                manageAPIs(nextAPIdata)\r\n                                // }\r\n                            }\r\n                            setTableJson(tableJSON)\r\n                            setLoader(false)\r\n                            setTableList(result.body)\r\n                        }\r\n                        setLoader(false)\r\n                    }\r\n                    else if (apidata.ref === \"NewTable\") {\r\n                        setCurTable(result.body)\r\n                        let tbjson = tablejson\r\n                        tbjson[result.body.tableid] = result.body\r\n                        setTableJson(tbjson)\r\n                        setFormDialog(false)\r\n                        setTableList([])\r\n                        setLoadTimeout(false)\r\n                        setLoader(false)\r\n                        setFormData({})\r\n                        settabname('')\r\n                        let nextAPidata = {\r\n                            method: \"GET\",\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                            path: apipath['designapi'] + \"/table/\" + serviceid + \"/\" + db.dbid,\r\n                            ref: \"GetAllTables\",\r\n                            body: {},\r\n                            callOP: false\r\n                        }\r\n                        manageAPIs(nextAPidata)\r\n                        setFormName('Add Attribute')\r\n                        setFormDialog(true)\r\n                    }\r\n                    else if (apidata.ref === \"GetSpecificTable\") {\r\n                        let table = result.body\r\n                        setCurTable(table)\r\n                        setIndexes(table.indexes)\r\n                        let tableJson = tablejson\r\n                        tableJson[result.body.tableid] = result.body\r\n                        setTableJson(tableJson)\r\n                        setLoader(false)\r\n                        if (result.body.schema.length === 0 && !btnAction) {\r\n                            setFormName('Add Attribute')\r\n                            setFormDialog(true)\r\n                        }\r\n                        else if (Object.keys(result.body.indexes).length === 0 && !btnAction) {\r\n                            setTableTab(1)\r\n                            setFormName('Add Primary Index')\r\n                            if (!schemas.hasOwnProperty('primaryschema')) {\r\n\r\n                            }\r\n                            else {\r\n                                PopulateAllowedValues('primaryschema', result.body)\r\n                            }\r\n                        }\r\n                        let nextAPIdata = {\r\n                            method: \"GET\",\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                            path: apipath['liveapi'] + \"/\" + serviceid + \"/\" + db.dbid + \"/table/\" + result.body.tableid + \"/output\",\r\n                            ref: \"GetLiveTableOP\",\r\n                            body: {},\r\n                            show: false,\r\n                            tableJson: result.body,\r\n                            key: \"Table\",\r\n                            showMessage: false,\r\n                            tablelist: tableList,\r\n                            dbid: db.dbid\r\n                        }\r\n                        manageAPIs(nextAPIdata)\r\n                    }\r\n                    else if (apidata.ref === \"UpdateTable\") {\r\n                        let curtable = curTable\r\n                        curtable['schema'] = result.body.schema\r\n                        curtable['indexes'] = result.body.indexes\r\n                        setCurTable(curtable)\r\n                        let res = tablejson\r\n                        res[result.body.tableid] = result.body\r\n                        setTableJson(res)\r\n                        if (Object.keys(result.body.indexes).length === 0 && !btnAction) {\r\n                            setLoader(false)\r\n                            setTableTab(1)\r\n                            setFormName('Add Primary Index')\r\n                            if (!schemas.hasOwnProperty('primaryschema')) {\r\n\r\n                            }\r\n                            else {\r\n                                PopulateAllowedValues('primaryschema', result.body)\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (apidata.body.hasOwnProperty('addschema')) {\r\n                                setAttrIpList([{ \"attributename\": \"\", \"attributetype\": \"S\", \"description\": \"\", \"constraints\": \"\" }])\r\n                            }\r\n                            if (apidata.body.hasOwnProperty('deleteschema')) {\r\n                                setDelCheck([])\r\n                                setDelAttrs([])\r\n                            }\r\n                            if (formName === \"Add Primary Index\" || formName === \"Add Secondary Index\") {\r\n                                let apidata = result.body\r\n                                apidata['dbid'] = db.dbid\r\n                                trigger(apidata)\r\n                            }\r\n                            setFormName('')\r\n                            setCurSchema({})\r\n                            setFormDialog(false)\r\n                        }\r\n\r\n                        let tablist = [...tableList]\r\n                        setTableList([])\r\n                        setTableList(tablist)\r\n                        setLoader(false)\r\n                    }\r\n                    else if (apidata.ref === \"DeleteTable\") {\r\n                        setDelInterval(false)\r\n                        clearInterval(liveinterval)\r\n                        setTableStatus('')\r\n                        liveflag = false\r\n                        let nextAPidata = {\r\n                            method: \"GET\",\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                            path: apipath['designapi'] + \"/table/\" + serviceid + \"/\" + db.dbid,\r\n                            ref: \"GetAllTables\",\r\n                            body: {},\r\n                            callOP: false\r\n                        }\r\n                        manageAPIs(nextAPidata)\r\n                    }\r\n                    else if (apidata.ref === \"GetDB\") {\r\n                        if (result.hasOwnProperty('body')) {\r\n                            if (result.body.length > 0) {\r\n                                setDB(result.body[0])\r\n                                // if (apidata.callOP) {\r\n                                let nextAPIdata = {\r\n                                    method: \"GET\",\r\n                                    headers: {\r\n                                        headers: true,\r\n                                        apidomain: apidomain.vmurl\r\n                                    },\r\n                                    path: apipath['liveapi'] + \"/\" + serviceid + \"/db/\" + result.body[0].dbid + \"/output\",\r\n                                    ref: \"GetLiveDBOP\",\r\n                                    body: {},\r\n                                    show: false,\r\n                                    dbJson: result.body[0],\r\n                                    key: \"DB\"\r\n                                }\r\n                                manageAPIs(nextAPIdata)\r\n                                // }\r\n                                let apidata2 = {\r\n                                    method: \"GET\",\r\n                                    headers: {\r\n                                        headers: true,\r\n                                        apidomain: apidomain.vmurl\r\n                                    },\r\n                                    path: apipath['designapi'] + \"/table/\" + serviceid + \"/\" + result.body[0].dbid,\r\n                                    ref: \"GetAllTables\",\r\n                                    body: {},\r\n                                    dbJson: result.body[0],\r\n                                    callOP: true\r\n                                }\r\n                                manageAPIs(apidata2)\r\n                            }\r\n                            else {\r\n                                let apidata2 = {\r\n                                    method: \"POST\",\r\n                                    headers: {\r\n                                        headers: true,\r\n                                        apidomain: apidomain.vmurl\r\n                                    },\r\n                                    path: apipath['designapi'] + \"/data/\" + serviceid + \"/\" + versionid + \"/\" + resourceid,\r\n                                    ref: \"CreateDB\",\r\n                                    body: {\r\n                                        serviceid: serviceid\r\n                                    }\r\n                                }\r\n                                manageAPIs(apidata2)\r\n                            }\r\n                        }\r\n                        else {\r\n                            setLoadTimeout(true)\r\n                        }\r\n\r\n                    }\r\n                    else if (apidata.ref === \"DeleteDB\") {\r\n\r\n                    }\r\n                    else if (apidata.ref === \"GetSchemas\") {\r\n\r\n                    }\r\n                    else if (apidata.ref === \"GetLogs\") {\r\n                        setFormName(apidata.logname)\r\n                        setJsontoHtml(result.body)\r\n                        setFormDialog(true)\r\n                        setLoader(false)\r\n                    }\r\n                    else if (apidata.ref === \"CreateDB\") {\r\n                        let apidata1 = {\r\n                            method: \"GET\",\r\n                            headers: {\r\n                                headers: true,\r\n                                apidomain: apidomain.vmurl\r\n                            },\r\n                            path: apipath['designapi'] + \"/data/\" + serviceid + \"/\" + versionid + \"/\" + resourceid + \"/database\",\r\n                            ref: \"GetDB\",\r\n                            body: {},\r\n                            callOP: false\r\n                        }\r\n                        manageAPIs(apidata1)\r\n                    }\r\n                    else if (apidata.ref === \"CreateLiveDB\") {\r\n                        if (apidata.ref === \"CreateLiveDB\") {\r\n                            if (result.hasOwnProperty('containerstatus') && result.containerstatus === \"success\") {\r\n                                setMessage(\"DB Deployment Started\")\r\n                                setSeverrity(\"info\")\r\n                                setOpenAlert(true)\r\n                            }\r\n                        }\r\n                        setLoader(false)\r\n                        setLiveInterval(true)\r\n                        liveflag = true\r\n                        liveinterval = window.setInterval(function () {\r\n                            let nextAPIdata = {\r\n                                method: \"GET\",\r\n                                headers: {\r\n                                    headers: true,\r\n                                    apidomain: apidomain.vmurl\r\n                                },\r\n                                path: apipath['liveapi'] + \"/\" + serviceid + \"/db/\" + db.dbid + \"/output\",\r\n                                ref: \"GetLiveDBOP\",\r\n                                body: {},\r\n                                show: false,\r\n                                dbJson: db,\r\n                                key: \"DB\",\r\n                                showMessage: true\r\n                            }\r\n                            manageAPIs(nextAPIdata)\r\n                        }, 5000)\r\n                    }\r\n                    else if (apidata.ref === \"DeleteLiveDB\") {\r\n                        setDelInterval(true)\r\n                        setDbStatus('Stopping')\r\n                        setLoader(false)\r\n                        window.setTimeout(function () {\r\n                            setMessage(\"DB Deployment deleted\")\r\n                            setSeverrity(\"info\")\r\n                            setOpenAlert(true)\r\n                            setDelInterval(false)\r\n                            setDbStatus('')\r\n                            let apidata2 = {\r\n                                method: \"GET\",\r\n                                headers: {\r\n                                    headers: true,\r\n                                    apidomain: apidomain.vmurl\r\n                                },\r\n                                path: apipath['designapi'] + \"/data/\" + serviceid + \"/\" + versionid + \"/\" + resourceid + \"/database\",\r\n                                ref: \"GetDB\",\r\n                                body: {},\r\n                                callOP: true\r\n                            }\r\n                            manageAPIs(apidata2)\r\n                        }, 60000)\r\n\r\n                    }\r\n                    else if (apidata.ref === \"GetLiveDBOP\" || apidata.ref === \"GetLiveDBLogs\") {\r\n                        setDB({})\r\n                        let res = apidata.dbJson\r\n                        if (result.hasOwnProperty('db_output')) {\r\n                            if (apidata.show) {\r\n                                setJsontoHtml(result.db_output)\r\n                                setFormName(apidata.formname)\r\n                                setLoader(false)\r\n                                setFormDialog(true)\r\n                            }\r\n                            else {\r\n                                res['status'] = result.db_output.status\r\n                                if (apidata.key === \"DB\" && (apidata.hasOwnProperty('showMessage') && apidata.showMessage)) {\r\n                                    setLiveInterval(false)\r\n                                    liveflag = false\r\n                                    clearInterval(liveinterval)\r\n                                }\r\n                            }\r\n                            if (result.db_output.status === \"Running\") {\r\n                                sessionStorage.setItem('isDBLive', \"yes\")\r\n                                clearInterval(liveinterval)\r\n                                setLiveInterval(false)\r\n                                liveflag = false\r\n                            }\r\n                            else {\r\n                                sessionStorage.removeItem('isDBLive')\r\n                                if (result.db_output.status === \"Initiated\") {\r\n                                    if (apidata.key === \"CRLive\") {\r\n                                        setLoader(false)\r\n                                        setMessage('You cannot update in Initiated, Please wait for some time to update')\r\n                                        setSeverrity('info')\r\n                                        setOpenAlert(true)\r\n                                    }\r\n                                    else {\r\n                                        setLiveInterval(true)\r\n                                        if (liveflag === false) {\r\n                                            liveflag = true\r\n                                            liveinterval = window.setInterval(function () {\r\n                                                let nextAPIdata = {\r\n                                                    method: \"GET\",\r\n                                                    headers: {\r\n                                                        headers: true,\r\n                                                        apidomain: apidomain.vmurl\r\n                                                    },\r\n                                                    path: apipath['liveapi'] + \"/\" + serviceid + \"/db/\" + apidata.dbJson.dbid + \"/output\",\r\n                                                    ref: \"GetLiveDBOP\",\r\n                                                    body: {},\r\n                                                    show: false,\r\n                                                    dbJson: apidata.dbJson,\r\n                                                    key: \"DB\",\r\n                                                    showMessage: true\r\n                                                }\r\n                                                manageAPIs(nextAPIdata)\r\n                                            }, 5000)\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if (result.db_output.status === \"Error\" || result.db_output.status === \"Degraded\") {\r\n                                    setLiveInterval(false)\r\n                                    liveflag = false\r\n                                    clearInterval(liveinterval)\r\n                                    if (apidata.key === \"CRLive\") {\r\n                                        let nextAPIdata = {\r\n                                            ref: \"CreateLiveDB\",\r\n                                            method: \"POST\",\r\n                                            headers: {\r\n                                                headers: true,\r\n                                                apidomain: apidomain.vmurl\r\n                                            },\r\n                                            body: {\r\n                                                dbtype: \"DYNAMODB\",\r\n                                                serviceid: serviceid,\r\n                                                dbid: res.dbid\r\n                                            },\r\n                                            path: apipath['liveapi'] + \"/db\"\r\n                                        }\r\n                                        manageAPIs(nextAPIdata)\r\n                                    }\r\n                                }\r\n                            }\r\n                            setDB(res)\r\n                        }\r\n                        else if (result.hasOwnProperty('job_status')) {\r\n                            sessionStorage.removeItem('isDBLive')\r\n                            setDB(res)\r\n                            if (result.job_status === \"Initiated\") {\r\n                                if (apidata.key === \"CRLive\") {\r\n                                    setLoader(false)\r\n                                    setMessage('You cannot update in Initiated, Please wait for some time to update')\r\n                                    setSeverrity('info')\r\n                                    setOpenAlert(true)\r\n                                }\r\n                                else {\r\n                                    setLiveInterval(true)\r\n                                    if (liveflag === false) {\r\n                                        liveflag = true\r\n                                        liveinterval = window.setInterval(function () {\r\n                                            let nextAPIdata = {\r\n                                                method: \"GET\",\r\n                                                headers: {\r\n                                                    headers: true,\r\n                                                    apidomain: apidomain.vmurl\r\n                                                },\r\n                                                path: apipath['liveapi'] + \"/\" + serviceid + \"/db/\" + apidata.dbJson.dbid + \"/output\",\r\n                                                ref: \"GetLiveDBOP\",\r\n                                                body: {},\r\n                                                show: false,\r\n                                                dbJson: apidata.dbJson,\r\n                                                key: \"DB\",\r\n                                                showMessage: true\r\n                                            }\r\n                                            manageAPIs(nextAPIdata)\r\n                                        }, 5000)\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (result.job_status === \"Not Deployed\") {\r\n                                if (apidata.key === \"CRLive\") {\r\n                                    let nextAPIdata = {\r\n                                        ref: \"CreateLiveDB\",\r\n                                        method: \"POST\",\r\n                                        headers: {\r\n                                            headers: true,\r\n                                            apidomain: apidomain.vmurl\r\n                                        },\r\n                                        body: {\r\n                                            dbtype: \"DYNAMODB\",\r\n                                            serviceid: serviceid,\r\n                                            dbid: res.dbid\r\n                                        },\r\n                                        path: apipath['liveapi'] + \"/db\"\r\n                                    }\r\n                                    manageAPIs(nextAPIdata)\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            sessionStorage.removeItem('isDBLive')\r\n                            if (apidata.show) {\r\n                                setMessage('Some internal error, Please try after sometime')\r\n                                setSeverrity('error')\r\n                                setOpenAlert(true)\r\n                            }\r\n                            setLoader(false)\r\n                        }\r\n                    }\r\n                    else if (apidata.ref === \"CreateLiveTable\") {\r\n                        if (apidata.ref === \"CreateLiveTable\") {\r\n                            if (result.hasOwnProperty('containerstatus') && result.containerstatus === \"success\") {\r\n                                let tbjson = tablejson\r\n                                tbjson[apidata.body.tableid]['status'] = \"Deploying\"\r\n                                setTableJson(tbjson)\r\n                                let tbs = [...tableList]\r\n                                setTableList([])\r\n                                setTableList(tbs)\r\n                                setMessage(\"Table Deployment Started\")\r\n                                setSeverrity(\"info\")\r\n                                setOpenAlert(true)\r\n                            }\r\n                        }\r\n                        setLoader(false)\r\n                        setLiveInterval(true)\r\n                        liveflag = true\r\n                        liveinterval = window.setInterval(function () {\r\n                            let nextAPIdata = {\r\n                                method: \"GET\",\r\n                                headers: {\r\n                                    headers: true,\r\n                                    apidomain: apidomain.vmurl\r\n                                },\r\n                                path: apipath['liveapi'] + \"/\" + serviceid + \"/\" + db.dbid + \"/table/\" + apidata.body.tableid + \"/output\",\r\n                                ref: \"GetLiveTableOP\",\r\n                                body: {},\r\n                                show: false,\r\n                                tableJson: apidata.tableJson,\r\n                                key: \"Table\",\r\n                                showMessage: true,\r\n                                tablelist: tableList,\r\n                                db: db.id\r\n                            }\r\n                            manageAPIs(nextAPIdata)\r\n                        }, 5000)\r\n                    }\r\n                    else if (apidata.ref === \"GetLiveTableOP\" || apidata.ref === \"GetLiveTableLogs\") {\r\n                        let res = tablejson\r\n                        if (result.hasOwnProperty('db_output')) {\r\n                            if (apidata.show) {\r\n                                setJsontoHtml(result.db_output)\r\n                                setFormName(apidata.formname)\r\n                                setLoader(false)\r\n                                setFormDialog(true)\r\n                            }\r\n                            else {\r\n                                if (!res.hasOwnProperty(apidata.tableJson.tableid)) {\r\n                                    res[apidata.tableJson.tableid] = apidata.tableJson\r\n                                }\r\n                                res[apidata.tableJson.tableid]['status'] = result.db_output.status\r\n                                if (apidata.key === \"Table\" && (apidata.hasOwnProperty('showMessage') && apidata.showMessage)) {\r\n                                    setLiveInterval(false)\r\n                                    liveflag = false\r\n                                    clearInterval(liveinterval)\r\n                                }\r\n                            }\r\n                            if (apidata.ref === \"GetLiveTableOP\") {\r\n                                if (result.db_output.status === \"Running\") {\r\n                                    setLiveInterval(false)\r\n                                    liveflag = false\r\n                                    clearInterval(liveinterval)\r\n                                    sessionStorage.setItem('isTableLive', \"yes\")\r\n                                    // if (apidata.key === \"CRLive\") {\r\n                                    //     let nextAPIdata = {\r\n                                    //         ref: \"CreateLiveTable\",\r\n                                    //         method: \"POST\",\r\n                                    //         headers: {\r\n                                    //             headers: true,\r\n                                    //             apidomain: apidomain.vmurl\r\n                                    //         },\r\n                                    //         body: {\r\n                                    //             dbtype: \"DYNAMODB\",\r\n                                    //             serviceid: serviceid,\r\n                                    //             dbid: db.dbid,\r\n                                    //             tableid: apidata.tableJson.tableid\r\n                                    //         },\r\n                                    //         path: apipath['liveapi'] + \"/table/update\",\r\n                                    //         tableJson: apidata.tableJson\r\n                                    //     }\r\n                                    //     manageAPIs(nextAPIdata)\r\n                                    // }\r\n                                }\r\n                                else {\r\n                                    sessionStorage.removeItem('isTableLive')\r\n                                    if (result.db_output.status === \"Initiated\") {\r\n                                        if (apidata.key === \"CRLive\") {\r\n                                            setLoader(false)\r\n                                            setMessage('You cannot update in Initiated, Please wait for some time to update')\r\n                                            setSeverrity('info')\r\n                                            setOpenAlert(true)\r\n                                        }\r\n                                        else {\r\n                                            setLiveInterval(true)\r\n                                            if (liveflag === false) {\r\n                                                liveflag = true\r\n                                                liveinterval = window.setInterval(function () {\r\n                                                    let nextAPIdata = {\r\n                                                        method: \"GET\",\r\n                                                        headers: {\r\n                                                            headers: true,\r\n                                                            apidomain: apidomain.vmurl\r\n                                                        },\r\n                                                        path: apipath['liveapi'] + \"/\" + serviceid + \"/\" + apidata.dbid + \"/table/\" + apidata.tableJson.tableid + \"/output\",\r\n                                                        ref: \"GetLiveTableOP\",\r\n                                                        body: {},\r\n                                                        show: false,\r\n                                                        tableJson: res,\r\n                                                        key: \"Table\",\r\n                                                        showMessage: true,\r\n                                                        tablelist: tableList,\r\n                                                        dbid: apidata.dbid\r\n                                                    }\r\n                                                    manageAPIs(nextAPIdata)\r\n                                                }, 5000)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    else if (result.db_output.status === \"Error\" || result.db_output.status === \"Degraded\") {\r\n                                        setLiveInterval(false)\r\n                                        liveflag = false\r\n                                        clearInterval(liveinterval)\r\n                                        if (apidata.key === \"CRLive\") {\r\n                                            let nextAPIdata = {\r\n                                                ref: \"CreateLiveTable\",\r\n                                                method: \"POST\",\r\n                                                headers: {\r\n                                                    headers: true,\r\n                                                    apidomain: apidomain.vmurl\r\n                                                },\r\n                                                body: {\r\n                                                    dbtype: \"DYNAMODB\",\r\n                                                    serviceid: serviceid,\r\n                                                    dbid: db.dbid,\r\n                                                    tableid: apidata.tableJson.tableid\r\n                                                },\r\n                                                path: apipath['liveapi'] + \"/table/update\",\r\n                                                tableJson: apidata.tableJson\r\n                                            }\r\n                                            manageAPIs(nextAPIdata)\r\n                                        }\r\n                                    }\r\n                                }\r\n                                setTableJson(res)\r\n                                let tablist = apidata.tablelist\r\n                                setTableList([])\r\n                                setTableList(tablist)\r\n                            }\r\n                        }\r\n                        else if (result.hasOwnProperty('job_status')) {\r\n                            sessionStorage.removeItem('isTableLive')\r\n                            if (apidata.tableJson.hasOwnProperty('status')) {\r\n                                delete apidata.tableJson['status']\r\n                            }\r\n                            if (!res.hasOwnProperty(apidata.tableJson.tableid)) {\r\n                                res[apidata.tableJson.tableid] = apidata.tableJson\r\n                            }\r\n                            setTableJson(res)\r\n                            let tablist = apidata.tablelist\r\n                            setTableList([])\r\n                            setTableList(tablist)\r\n                            if (result.job_status === \"Initiated\") {\r\n                                if (apidata.key === \"CRLive\") {\r\n                                    setLoader(false)\r\n                                    setMessage('You cannot update in Initiated, Please wait for some time to update')\r\n                                    setSeverrity('info')\r\n                                    setOpenAlert(true)\r\n                                }\r\n                                else {\r\n                                    setLiveInterval(true)\r\n                                    if (liveflag === false) {\r\n                                        liveflag = true\r\n                                        liveinterval = window.setInterval(function () {\r\n                                            let nextAPIdata = {\r\n                                                method: \"GET\",\r\n                                                headers: {\r\n                                                    headers: true,\r\n                                                    apidomain: apidomain.vmurl\r\n                                                },\r\n                                                path: apipath['liveapi'] + \"/\" + serviceid + \"/\" + apidata.dbid + \"/table/\" + res.tableid + \"/output\",\r\n                                                ref: \"GetLiveTableOP\",\r\n                                                body: {},\r\n                                                show: false,\r\n                                                tableJson: res,\r\n                                                key: \"Table\",\r\n                                                showMessage: true,\r\n                                                tablelist: tableList,\r\n                                                dbid: apidata.dbid\r\n                                            }\r\n                                            manageAPIs(nextAPIdata)\r\n                                        }, 5000)\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (result.job_status === \"Not Deployed\") {\r\n                                if (apidata.key === \"CRLive\") {\r\n                                    let nextAPIdata = {\r\n                                        ref: \"CreateLiveTable\",\r\n                                        method: \"POST\",\r\n                                        headers: {\r\n                                            headers: true,\r\n                                            apidomain: apidomain.vmurl\r\n                                        },\r\n                                        body: {\r\n                                            dbtype: \"DYNAMODB\",\r\n                                            serviceid: serviceid,\r\n                                            dbid: db.dbid,\r\n                                            tableid: apidata.tableJson.tableid\r\n                                        },\r\n                                        path: apipath['liveapi'] + \"/table\",\r\n                                        tableJson: apidata.tableJson\r\n                                    }\r\n                                    manageAPIs(nextAPIdata)\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            sessionStorage.removeItem('isTableLive')\r\n                            if (apidata.tableJson.hasOwnProperty('status')) {\r\n                                delete apidata.tableJson['status']\r\n                            }\r\n                            if (!res.hasOwnProperty(apidata.tableJson.tableid)) {\r\n                                res[apidata.tableJson.tableid] = apidata.tableJson\r\n                            }\r\n                            setTableJson(res)\r\n                            let tablist = apidata.tablelist\r\n                            setTableList([])\r\n                            setTableList(tablist)\r\n                            if (apidata.show) {\r\n                                setMessage('Some internal error, Please try after sometime')\r\n                                setSeverrity('error')\r\n                                setOpenAlert(true)\r\n                            }\r\n                            setLoader(false)\r\n                        }\r\n                    }\r\n                    else if (apidata.ref === \"UpdateLiveTable\") {\r\n\r\n                    }\r\n                    else if (apidata.ref === \"DeleteLiveTable\") {\r\n                        let tbjson = tablejson\r\n                        tbjson[apidata.tableid]['status'] = \"Stopping\"\r\n                        setTableJson(tbjson)\r\n                        let tbs = [...tableList]\r\n                        setTableList([])\r\n                        setTableList(tbs)\r\n                        setLoader(false)\r\n                        setDelInterval(true)\r\n                        setTableStatus('Stopping')\r\n                        sessionStorage.setItem('isTableLive', 'Stopping')\r\n                        window.setTimeout(function () {\r\n                            setMessage(\"Table Deployment deleted\")\r\n                            setSeverrity(\"info\")\r\n                            setOpenAlert(true)\r\n                            setDelInterval(false)\r\n                            setTableStatus('')\r\n                            let apidata2 = {\r\n                                path: apipath['designapi'] + \"/table/\" + serviceid + \"/\" + db.dbid + \"/\" + apidata['tableid'],\r\n                                ref: \"GetSpecificTable\",\r\n                                headers: {\r\n                                    headers: true,\r\n                                    apidomain: apidomain.vmurl\r\n                                },\r\n                                body: {},\r\n                                method: \"GET\",\r\n                                callOP: false\r\n                            }\r\n                            manageAPIs(apidata2)\r\n                        }, 60000)\r\n                    }\r\n                }\r\n                else {\r\n                    if (result.hasOwnProperty('error_message')) {\r\n                        setMessage(result.error_message)\r\n                    }\r\n                    else if (result.hasOwnProperty('errorMessage')) {\r\n                        setMessage(result.errorMessage)\r\n                    }\r\n                    else {\r\n                        setMessage('Some internal error, Please try after sometime')\r\n                    }\r\n                    if (apidata.ref === \"GetLiveDBOP\" || apidata.ref === \"GetLiveDBLogs\" || apidata.ref === \"GetLiveTableOP\" || apidata.ref === \"GetLiveTableLogs\") {\r\n                        if (apidata.hasOwnProperty('show')) {\r\n                            if (apidata.show) {\r\n                                setSeverrity('error')\r\n                                setOpenAlert(true)\r\n                            }\r\n                            setLoader(false)\r\n                        }\r\n                    }\r\n                    else {\r\n                        setSeverrity('error')\r\n                        setOpenAlert(true)\r\n                        setLoader(false)\r\n                    }\r\n                }\r\n            })\r\n            .catch(err => {\r\n                setMessage(err)\r\n                setSeverrity('error')\r\n                setOpenAlert(true)\r\n                setLoader(false)\r\n            })\r\n\r\n    }\r\n\r\n    const handleActions = (apidata) => {\r\n        if (apidata.Action === 'redirect') {\r\n            window.open(apidata.url, '_blank')\r\n        }\r\n        else if (apidata.Action === 'refresh') {\r\n            setTableList([])\r\n            setTableJson({})\r\n            setTableExpObj({})\r\n            let apidata1 = {\r\n                method: \"GET\",\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                path: apipath['designapi'] + \"/data/\" + serviceid + \"/\" + versionid + \"/\" + resourceid + \"/database\",\r\n                ref: \"GetDB\",\r\n                body: {},\r\n                callOP: true\r\n            }\r\n            manageAPIs(apidata1)\r\n        }\r\n        else if (apidata.Action === \"confirmation\") {\r\n            setConfApiData(apidata['apidata'])\r\n            setConfirmation(apidata.confirmText)\r\n        }\r\n        else {\r\n            // setLoader(true)\r\n            if (apidata.method === \"DELETE\") {\r\n                setLoader(true)\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n    }\r\n\r\n    const handleAlert = () => {\r\n        setOpenAlert(false)\r\n    }\r\n\r\n    const handleConfirmation = (key) => {\r\n        setConfirmation('')\r\n        if (key) {\r\n            handleActions(confApiData)\r\n            // console.log(confApiData)\r\n            setConfApiData({})\r\n        }\r\n        else {\r\n            setConfApiData({})\r\n        }\r\n    }\r\n\r\n    const handleTableTab = (event, newValue) => {\r\n        setTableTab(newValue);\r\n    };\r\n\r\n    const handleSelectAttrs = (item) => {\r\n        setDelAttrs(item)\r\n    }\r\n\r\n    const TableTabs = ({ Table }) => {\r\n        return (\r\n            <div className={tabClasses.root}>\r\n                <AppBar position=\"static\" color=\"default\" className={tabClasses.header}>\r\n                    <Tabs\r\n                        value={tableTab}\r\n                        onChange={handleTableTab}\r\n                        variant=\"scrollable\"\r\n                        scrollButtons=\"auto\"\r\n                        aria-label=\"Main auto tabs example\"\r\n                    >\r\n                        <Tab label={<Typography className={typographyClasses.smallText}>Schema</Typography>} {...TabProps(\"Main\", 0)} />\r\n                        <Tab label={<Typography className={typographyClasses.smallText}>Index</Typography>} {...TabProps(\"Main\", 1)} />\r\n                    </Tabs>\r\n                </AppBar>\r\n\r\n                <TabPanel value={tableTab} index={0}>\r\n                    <Box style={{ width: '100%' }}>\r\n                        {\r\n                            delAttrs.length > 0 ?\r\n                                <Box display=\"flex\" justifyContent=\"space-between\">\r\n                                    <Typography className={`${typographyClasses.smallText}`}>Delete Attributes</Typography>\r\n                                    <Box display=\"flex\">\r\n                                        <Button\r\n                                            color=\"secondary\"\r\n                                            variant=\"outlined\"\r\n                                            onClick={() => {\r\n                                                setDelAttrs([])\r\n                                                setDelCheck([])\r\n                                            }}\r\n                                        >\r\n                                            Cancel\r\n                                        </Button>\r\n                                    </Box>\r\n                                </Box>\r\n                                :\r\n                                null\r\n                        }\r\n                        {\r\n                            delAttrs.length > 0 ?\r\n                                <Box display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\" padding={0} mb={1}>\r\n                                    {\r\n                                        delAttrs.map((item, index) => {\r\n                                            return (\r\n                                                <Chip\r\n                                                    key={index}\r\n                                                    color=\"primary\"\r\n                                                    size=\"small\"\r\n                                                    label={item.attributename}\r\n                                                    style={{ margin: 2, padding: 5 }}\r\n                                                />\r\n                                            );\r\n                                        })\r\n                                    }\r\n                                </Box>\r\n                                :\r\n                                null\r\n                        }\r\n                        <Box style={{ width: '100%' }} className=\"table-parent\">\r\n                            {\r\n                                Object.keys(Table).length > 0 && tablejson.hasOwnProperty(Table.tableid) ?\r\n                                    <MaterialTable\r\n                                        style={{ width: '100%', height: '100%' }}\r\n                                        title={Table.tablename}\r\n                                        columns={tableColumns}\r\n                                        data={tablejson[Table.tableid].schema}\r\n                                        icons={tableIcons}\r\n                                        options={{\r\n                                            search: false,\r\n                                            pageSize: 5,\r\n                                            pageSizeOptions: [5],\r\n                                            // selection: btnAction === false ? true : false,\r\n                                            actionsColumnIndex: -1\r\n                                        }}\r\n                                        onSelectionChange={(rows) => handleSelectAttrs(rows)}\r\n                                        actions={btnAction === false ? [\r\n                                            {\r\n                                                icon: 'add',\r\n                                                tooltip: 'Add Attribute',\r\n                                                isFreeAction: true,\r\n                                                onClick: (event, rowData) => {\r\n                                                    setAttrIpList([{ \"attributename\": \"\", \"attributetype\": \"S\", \"description\": \"\", \"constraints\": \"\" }])\r\n                                                    setCurTable(Table)\r\n                                                    setFormName('Add Attribute')\r\n                                                    setFormDialog(true)\r\n                                                }\r\n                                            },\r\n                                            {\r\n                                                icon: 'edit',\r\n                                                isFreeAction: false,\r\n                                                tooltip: 'Edit Attribute',\r\n                                                onClick: (event, rowData) => {\r\n                                                    setCurTable(curTable)\r\n                                                    setFormData({\r\n                                                        \"attributename\": rowData.attributename,\r\n                                                        \"attributetype\": rowData.attributetype,\r\n                                                    })\r\n                                                    setcurAttr(rowData)\r\n                                                    setFormName('Edit Attribute')\r\n                                                    setFormDialog(true)\r\n                                                }\r\n                                            },\r\n                                            {\r\n                                                icon: 'check',\r\n                                                tooltip: 'Delete Attribute',\r\n                                                isFreeAction: false,\r\n                                                onClick: (event, rowData) => {\r\n                                                    let delattrs = [...delAttrs], index = -1, delcheck = [...delCheck]\r\n                                                    for (let i = 0; i < delattrs.length; i++) {\r\n                                                        if (delattrs[i].attributename === rowData.attributename) {\r\n                                                            index = i\r\n                                                            break;\r\n                                                        }\r\n                                                    }\r\n                                                    if (index !== -1) {\r\n                                                        delattrs.splice(index, 1)\r\n                                                        delcheck.splice(index, 1)\r\n                                                    }\r\n                                                    else {\r\n                                                        delete rowData['tableData']\r\n                                                        delattrs.push(rowData)\r\n                                                        delcheck.push(rowData.attributename)\r\n                                                    }\r\n                                                    setDelAttrs(delattrs)\r\n                                                    setDelCheck(delcheck)\r\n                                                }\r\n                                            },\r\n                                            {\r\n                                                tooltip: 'Delete Selected attributes',\r\n                                                icon: 'delete',\r\n                                                isFreeAction: true,\r\n                                                onClick: (evt, data) => handleActions({\r\n                                                    Action: \"confirmation\",\r\n                                                    confirmText: \"Are you sure you want to delete the selected attributes?\",\r\n                                                    apidata: {\r\n                                                        method: 'PATCH',\r\n                                                        ref: 'UpdateTable',\r\n                                                        headers: {\r\n                                                            headers: true,\r\n                                                            apidomain: apidomain.vmurl\r\n                                                        },\r\n                                                        path: apipath['designapi'] + \"/table/\" + serviceid + \"/\" + db.dbid + \"/\" + Table.tableid,\r\n                                                        body: {\r\n                                                            deleteschema: delAttrs\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                        ] : []}\r\n                                        components={{\r\n                                            Action: props => {\r\n                                                if (props.action.icon === \"add\" && delAttrs.length === 0) {\r\n                                                    return (\r\n                                                        <Button\r\n                                                            onClick={(event) => props.action.onClick(event, props.data)}\r\n                                                            className={typographyClasses.root}\r\n                                                            variant=\"text\"\r\n                                                        >\r\n                                                            <AddIcon className={typographyClasses.smallText} />&nbsp;&nbsp;Attributes\r\n                                                        </Button>\r\n                                                    )\r\n                                                }\r\n                                                else if (props.action.icon === \"delete\" && delAttrs.length > 0) {\r\n                                                    return (\r\n                                                        <Button\r\n                                                            onClick={(event) => props.action.onClick(event, props.data)}\r\n                                                            variant=\"outlined\"\r\n                                                            color=\"secondary\"\r\n                                                            style={{ background: 'white' }}\r\n                                                        >\r\n                                                            <DeleteIcon className={typographyClasses.smallText} />&nbsp;&nbsp;Attributes\r\n                                                        </Button>\r\n                                                    )\r\n                                                }\r\n                                                if (props.action.icon === \"edit\") {\r\n                                                    return (\r\n                                                        <Button\r\n                                                            onClick={(event) => props.action.onClick(event, props.data)}\r\n                                                            // className={typographyClasses.root}\r\n                                                            variant=\"text\"\r\n                                                        >\r\n                                                            <Edit className={typographyClasses.text} />\r\n                                                        </Button>\r\n                                                    )\r\n                                                }\r\n                                                if (props.action.icon === \"check\") {\r\n                                                    return (\r\n                                                        <Button\r\n                                                            onClick={(event) => props.action.onClick(event, props.data)}\r\n                                                            color=\"secondary\"\r\n                                                        >\r\n                                                            {\r\n\r\n                                                                delCheck.indexOf(props.data.attributename) === -1 ?\r\n                                                                    <CheckBoxOutlineBlankIcon className={typographyClasses.text} />\r\n                                                                    :\r\n                                                                    <CheckBoxIcon className={typographyClasses.text} />\r\n                                                            }\r\n                                                        </Button>\r\n                                                    )\r\n                                                }\r\n                                                else {\r\n                                                    return null\r\n                                                }\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </Box>\r\n                    </Box>\r\n                </TabPanel>\r\n                <TabPanel value={tableTab} index={1}>\r\n                    <Box style={{ width: '100%' }} display=\"flex\">\r\n                        {\r\n                            Object.keys(Table).length > 0 && Object.keys(curTable).length > 0 && tablejson.hasOwnProperty(Table.tableid) ?\r\n                                <TableIndex table={tablejson[Table.tableid]} />\r\n                                :\r\n                                null\r\n                        }\r\n                    </Box>\r\n                </TabPanel>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const TableIndex = ({ table }) => {\r\n        let IndexInfo = table.indexes\r\n        return (\r\n            <Box style={{ width: '100%' }}>\r\n                <Box p={1} borderBottom={1} style={{ borderColor: 'lightgray' }}>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems='center' mb={1}>\r\n                        <Box display=\"flex\">\r\n                            <Typography className={`${typographyClasses.bold} ${typographyClasses.text}`} color=\"primary\">Primary</Typography>\r\n                        </Box>\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                            {\r\n                                IndexInfo.hasOwnProperty('primary') === false ?\r\n                                    <Box display=\"flex\">\r\n                                        <Button\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                            className=\"trigger-btn\"\r\n                                            disabled={btnAction === false ? (table.schema.length > 0 ? false : true) : true}\r\n                                            onClick={() => {\r\n                                                setCurTable(table)\r\n                                                setIndexes(table['indexes'])\r\n                                                if (!schemas.hasOwnProperty('primaryschema')) {\r\n\r\n                                                }\r\n                                                else {\r\n                                                    setFormName('Add Primary Index')\r\n                                                    // setFormDialog(true)\r\n                                                    PopulateAllowedValues('primaryschema')\r\n                                                }\r\n                                                // setFormData({\r\n                                                //     key: \"\",\r\n                                                //     sortkey: \"\",\r\n                                                //     infra: {\r\n                                                //         ondemand: ondemand,\r\n                                                //         iops: {\r\n                                                //             read: 0,\r\n                                                //             write: 0\r\n                                                //         }\r\n                                                //     }\r\n                                                // })\r\n                                            }}\r\n                                        >\r\n                                            <AddIcon className={typographyClasses.text} />&nbsp;&nbsp;Primary Index\r\n                                    </Button>\r\n                                    </Box>\r\n                                    :\r\n                                    // <Box ml={1}>\r\n                                    //     <Button\r\n                                    //         variant=\"outlined\"\r\n                                    //         color=\"primary\"\r\n                                    //         disabled={btnAction}\r\n                                    //     >\r\n                                    //         <Edit className={typographyClasses.text} />\r\n                                    //     </Button>\r\n                                    // </Box>\r\n                                    null\r\n                            }\r\n                        </Box>\r\n                    </Box>\r\n                    <Box>\r\n                        {\r\n                            IndexInfo.hasOwnProperty('primary') === true ?\r\n                                <Box display=\"flex\" justifyContent=\"space-between\">\r\n                                    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n                                        <Box mb={0.5}>\r\n                                            <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>Key</Typography>\r\n                                        </Box>\r\n                                        <Box>\r\n                                            <Typography className={`${typographyClasses.smallText}`}>{IndexInfo.primary.key}</Typography>\r\n                                        </Box>\r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n                                        <Box mb={0.5}>\r\n                                            <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>Sort Key</Typography>\r\n                                        </Box>\r\n                                        <Box>\r\n                                            <Typography className={`${typographyClasses.smallText}`}>{IndexInfo.primary.hasOwnProperty('sortkey') === true ? IndexInfo.primary.sortkey : '-'}</Typography>\r\n                                        </Box>\r\n                                    </Box>\r\n                                    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n                                        <Box mb={0.5}>\r\n                                            <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>On Demand</Typography>\r\n                                        </Box>\r\n                                        <Box>\r\n                                            <Typography className={`${typographyClasses.smallText}`}>{IndexInfo.primary.infra.ondemand.toString()}</Typography>\r\n                                        </Box>\r\n                                    </Box>\r\n                                    {\r\n                                        IndexInfo.primary.infra.ondemand === false ?\r\n                                            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n                                                <Box mb={0.5}>\r\n                                                    <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>IOPS</Typography>\r\n                                                </Box>\r\n                                                <Box display=\"flex\" alignItems=\"center\">\r\n                                                    <Box display=\"flex\" mr={2}>\r\n                                                        <Typography className={`${typographyClasses.smallText}`}>Read&nbsp;-&nbsp;{IndexInfo.primary.infra.iops.read}</Typography>\r\n                                                    </Box>\r\n                                                    <Box display=\"flex\" mr={2}>\r\n                                                        <Typography className={`${typographyClasses.smallText}`}>Write&nbsp;-&nbsp;{IndexInfo.primary.infra.iops.write}</Typography>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            </Box>\r\n                                            :\r\n                                            null\r\n\r\n                                    }\r\n                                </Box>\r\n                                :\r\n                                null\r\n                        }\r\n                        {\r\n                            table.schema.length === 0 ?\r\n                                <Box display=\"flex\" p={1} pl={0}>\r\n                                    <Typography className={typographyClasses.smallText}>Please add atleast one attribute in schema to add Primary Index</Typography>\r\n                                </Box>\r\n                                :\r\n                                IndexInfo.hasOwnProperty('primary') === false ?\r\n                                    <Box display=\"flex\" p={1} pl={0}>\r\n                                        <Typography className={typographyClasses.smallText}>No Primary Index</Typography>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                        }\r\n                    </Box>\r\n                </Box>\r\n                <Box p={1}>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems='center' mb={1}>\r\n                        <Box display=\"flex\">\r\n                            <Typography className={`${typographyClasses.bold} ${typographyClasses.text}`} color=\"primary\">Secondary</Typography>\r\n                        </Box>\r\n                        {\r\n                            table['indexes'].hasOwnProperty('primary') === true ?\r\n                                <Box display=\"flex\">\r\n                                    <Button\r\n                                        color=\"primary\"\r\n                                        variant=\"contained\"\r\n                                        className=\"trigger-btn\"\r\n                                        disabled={btnAction === false ? (table.schema.length > 0 ? false : true) : true}\r\n                                        onClick={() => {\r\n                                            setCurTable(table)\r\n                                            setIndexes(table['indexes'])\r\n                                            if (!schemas.hasOwnProperty('secondaryschema')) {\r\n\r\n                                            }\r\n                                            else {\r\n                                                setFormName('Add Secondary Index')\r\n                                                // setFormDialog(true)\r\n                                                PopulateAllowedValues('secondaryschema')\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        <AddIcon className={typographyClasses.text} />&nbsp;&nbsp;Secondary Index\r\n                            </Button>\r\n                                </Box>\r\n                                :\r\n                                null\r\n                        }\r\n                    </Box>\r\n                    <Box>\r\n                        {\r\n                            IndexInfo.hasOwnProperty('secondary') === true ?\r\n                                <Box>\r\n                                    <Box mb={1}>\r\n                                        <Grid container>\r\n                                            <Grid xs={2} item>\r\n                                                <Box display=\"flex\">\r\n                                                    <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>Index Name</Typography>\r\n                                                </Box>\r\n                                            </Grid>\r\n                                            <Grid xs={2} item>\r\n                                                <Box display=\"flex\">\r\n                                                    <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>Key</Typography>\r\n                                                </Box>\r\n                                            </Grid>\r\n                                            <Grid xs={2} item>\r\n                                                <Box display=\"flex\">\r\n                                                    <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>Sort Key</Typography>\r\n                                                </Box>\r\n                                            </Grid>\r\n                                            <Grid xs={2} item>\r\n                                                <Box display=\"flex\">\r\n                                                    <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>On Demand</Typography>\r\n                                                </Box>\r\n                                            </Grid>\r\n                                            <Grid xs={2} item>\r\n                                                <Box display=\"flex\">\r\n                                                    <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>IOPS</Typography>\r\n                                                </Box>\r\n                                            </Grid>\r\n                                            {/* <Grid xs={2} item>\r\n                                                <Box display=\"flex\">\r\n                                                    <Typography className={`${typographyClasses.smallText} ${typographyClasses.bold}`}>Actions</Typography>\r\n                                                </Box>\r\n                                            </Grid> */}\r\n                                        </Grid>\r\n                                    </Box>\r\n                                    <Box>\r\n                                        {\r\n                                            IndexInfo.secondary.map((item, index) => {\r\n                                                return (\r\n                                                    <Box mb={1} key={index}>\r\n                                                        <Grid container>\r\n                                                            <Grid xs={2} item>\r\n                                                                <Box display=\"flex\">\r\n                                                                    <Typography className={`${typographyClasses.smallText}`}>{item.hasOwnProperty('indexname') === true ? item.indexname : '-'}</Typography>\r\n                                                                </Box>\r\n                                                            </Grid>\r\n                                                            <Grid xs={2} item>\r\n                                                                <Box display=\"flex\">\r\n                                                                    <Typography className={`${typographyClasses.smallText}`}>{item.hasOwnProperty('key') === true ? item.key : '-'}</Typography>\r\n                                                                </Box>\r\n                                                            </Grid>\r\n                                                            <Grid xs={2} item>\r\n                                                                <Box display=\"flex\">\r\n                                                                    <Typography className={`${typographyClasses.smallText}`}>{item.hasOwnProperty('sortkey') === true ? item.sortkey : '-'}</Typography>\r\n                                                                </Box>\r\n                                                            </Grid>\r\n                                                            <Grid xs={2} item>\r\n                                                                <Box display=\"flex\">\r\n                                                                    <Typography className={`${typographyClasses.smallText}`}>{item.infra.hasOwnProperty('ondemand') === true ? item.infra.ondemand.toString() : '-'}</Typography>\r\n                                                                </Box>\r\n                                                            </Grid>\r\n                                                            <Grid xs={2} item>\r\n                                                                <Box display=\"flex\">\r\n                                                                    {\r\n                                                                        item.infra.ondemand === false ?\r\n                                                                            <Typography className={`${typographyClasses.smallText}`}>Read&nbsp;-&nbsp;{item.infra.iops.read}&nbsp;&nbsp;&nbsp;&nbsp;Write&nbsp;-&nbsp;{item.infra.iops.write}</Typography>\r\n                                                                            :\r\n                                                                            <Typography className={`${typographyClasses.smallText}`}>-</Typography>\r\n                                                                    }\r\n                                                                </Box>\r\n                                                            </Grid>\r\n                                                            {/* {\r\n                                                                btnAction === false ?\r\n                                                                    <Grid xs={2} item>\r\n                                                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                                                            <Box display=\"flex\" mr={1} style={{ cursor: 'pointer' }}>\r\n                                                                                <Edit className={typographyClasses.smallText} color=\"primary\" />\r\n                                                                            </Box>\r\n                                                                            <Box display=\"flex\" mr={1} style={{ cursor: 'pointer' }}>\r\n                                                                                <DeleteIcon className={typographyClasses.smallText} color=\"secondary\" />\r\n                                                                            </Box>\r\n                                                                        </Box>\r\n                                                                    </Grid>\r\n                                                                    :\r\n                                                                    null\r\n                                                            } */}\r\n                                                        </Grid>\r\n                                                    </Box>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Box>\r\n                                </Box>\r\n                                :\r\n                                null\r\n                        }\r\n                        {\r\n                            table.schema.length === 0 ?\r\n                                <Box display=\"flex\" p={1} pl={0}>\r\n                                    <Typography className={typographyClasses.smallText}>Please add atleast one attribute in schema to add Secondary Index</Typography>\r\n                                </Box>\r\n                                :\r\n                                IndexInfo.hasOwnProperty('secondary') === false ?\r\n                                    <Box display=\"flex\" p={1} pl={0}>\r\n                                        <Typography className={typographyClasses.smallText}>No Secondary Index</Typography>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                        }\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    const handleFormDataChage = (field, event) => {\r\n        let formFields = formData;\r\n        if (field === \"read\" || field === \"write\") {\r\n            formFields['infra']['iops'][field] = parseInt(event.target.value)\r\n        }\r\n        else {\r\n            if (field === \"tablename\") {\r\n                const re = /^[a-z][a-z0-9_]*[a-z0-9]*$/;\r\n                if (re.test(event.target.value)) {\r\n                    formFields[field] = event.target.value.toLowerCase();\r\n                    settabname(event.target.value.toLowerCase())\r\n                }\r\n                else if (event.target.value === \"\") {\r\n                    formFields[field] = event.target.value;\r\n                    settabname(event.target.value)\r\n                }\r\n            }\r\n            else {\r\n                formFields[field] = event.target.value;\r\n            }\r\n        }\r\n        setFormData(formFields);\r\n        if (formName === \"Edit Attribute\") {\r\n            curAttr[field] = event.target.value\r\n        }\r\n    }\r\n\r\n    const FormDialogSubmit = () => {\r\n        setLoader(true)\r\n        let canSubmit = true, requireAttrs = [], path = '', ref = '', method = \"\", formFields = {}\r\n        if (formName === \"Add Table\") {\r\n            requireAttrs.push('tablename')\r\n            path = \"/table/\" + serviceid + \"/\" + db.dbid\r\n            ref = \"NewTable\"\r\n            method = \"POST\"\r\n            formFields = formData\r\n            for (let i = 0; i < requireAttrs.length; i++) {\r\n                if (formData[requireAttrs[i]] === undefined || formData[requireAttrs[i]] === \"\" || formData[requireAttrs[i]] === []) {\r\n                    canSubmit = false\r\n                    setLoader(false)\r\n                    setMessage(\"Please fill the required details.\")\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            }\r\n        }\r\n        else if (formName === \"Add Attribute\") {\r\n            requireAttrs.push('versionname')\r\n            path = \"/table/\" + serviceid + \"/\" + db.dbid + \"/\" + curTable.tableid\r\n            ref = \"UpdateTable\"\r\n            method = \"PATCH\"\r\n            formFields = { \"addschema\": attrIpList }\r\n            let finalList = []\r\n            for (let i = 0; i < attrIpList.length; i++) {\r\n                if (attrIpList[i].attributename === \"\") {\r\n                    canSubmit = false\r\n                    setLoader(false)\r\n                    setMessage(\"Please fill the required details.\")\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                    break;\r\n                }\r\n                let json = { dummy: \"\" }\r\n                for (let key in attrIpList[i]) {\r\n                    if (attrIpList[i][key] !== \"\") {\r\n                        json[key] = attrIpList[i][key]\r\n                    }\r\n                }\r\n                delete json['dummy']\r\n                finalList.push(json)\r\n            }\r\n            formFields = { \"addschema\": finalList }\r\n        }\r\n        else if (formName === \"Edit Attribute\") {\r\n            // requireAttrs.push('attribute')\r\n            path = \"/table/\" + serviceid + \"/\" + db.dbid + \"/\" + curTable.tableid\r\n            ref = \"UpdateTable\"\r\n            method = \"PATCH\"\r\n            delete curAttr['tableData']\r\n            formFields = { \"editschema\": [curAttr] }\r\n            for (let i = 0; i < requireAttrs.length; i++) {\r\n                if (formData[requireAttrs[i]] === undefined || formData[requireAttrs[i]] === \"\" || formData[requireAttrs[i]] === []) {\r\n                    canSubmit = false\r\n                    setLoader(false)\r\n                    setMessage(\"Please fill the required details.\")\r\n                    setSeverrity('error')\r\n                    setOpenAlert(true)\r\n                }\r\n            }\r\n        }\r\n        if (canSubmit) {\r\n            let apidata = {\r\n                method: method,\r\n                path: apipath['designapi'] + path,\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                body: formFields,\r\n                ref: ref\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n    }\r\n\r\n    const handleAddAttr = () => {\r\n        setAttrIpList([...attrIpList, { \"attributename\": \"\", \"attributetype\": \"S\", \"description\": \"\", \"constraints\": \"\" }]);\r\n    };\r\n\r\n    const handleRemAttr = index => {\r\n        let list = [...attrIpList];\r\n        list.splice(index, 1);\r\n        setAttrIpList(list);\r\n    };\r\n\r\n    const handleAttrInputChange = (e, index) => {\r\n        const { name, value } = e.target;\r\n        let list = [...attrIpList];\r\n        if (name === \"attributename\") {\r\n            const re = /[A-Za-z]\\w*$/;\r\n            if (re.test(value)) {\r\n                list[index][name] = value;\r\n            }\r\n            else if (value === \"\") {\r\n                list[index][name] = value;\r\n            }\r\n        }\r\n        else {\r\n            list[index][name] = value;\r\n        }\r\n        setAttrIpList(list);\r\n    };\r\n\r\n    const handlePanelChange = (table) => {\r\n        let tabexp = tableExpObj\r\n        tabexp[table['tableid']]['expanded'] = !tabexp[table['tableid']]['expanded']\r\n        setTableExpObj(tabexp)\r\n        let tables = [...tableList]\r\n        setTableList([])\r\n        setTableList(tables)\r\n        if (tabexp[table['tableid']]['expanded']) {\r\n            setCurTable(table)\r\n            // let apidata = {\r\n            //     path: apipath['designapi'] + \"/table/\" + serviceid + \"/\" + db.dbid + \"/\" + table['tableid'],\r\n            //     ref: \"GetSpecificTable\",\r\n            //     headers: {\r\n            //         headers: true,\r\n            //         apidomain: apidomain.vmurl\r\n            //     },\r\n            //     body: {},\r\n            //     method: \"GET\",\r\n            //     callOP: true\r\n            // }\r\n            // manageAPIs(apidata)\r\n        }\r\n    };\r\n\r\n    const PopulateAllowedValues = (schema, table) => {\r\n        let alval = [], acttable = table\r\n        let sch = {\r\n            \"fields\": schemas[schema]['schema'],\r\n            \"type\": \"object\",\r\n            \"title\": formName,\r\n            \"order\": schemas[schema]['order']\r\n        }\r\n        if (!acttable) {\r\n            acttable = curTable\r\n        }\r\n        if (schema === \"primaryschema\") {\r\n            for (let i = 0; i < acttable.schema.length; i++) {\r\n                alval.push(acttable.schema[i].attributename)\r\n            }\r\n            sch['fields']['key']['allowedvalues'] = alval\r\n            sch['fields']['sortkey']['allowedvalues'] = alval\r\n            setCurSchema(sch)\r\n            setFormDialog(true)\r\n        }\r\n        else if (schema === \"secondaryschema\") {\r\n            sch['fields']['infra']['fields']['ondemand']['default'] = acttable['indexes']['primary']['infra']['ondemand']\r\n            if (!acttable['indexes']['primary']['infra']['ondemand']) {\r\n                sch['fields']['infra']['fields']['iops']['fields']['read']['default'] = acttable['indexes']['primary']['infra']['iops']['read']\r\n                sch['fields']['infra']['fields']['iops']['fields']['write']['default'] = acttable['indexes']['primary']['infra']['iops']['write']\r\n            }\r\n            if (sch['fields']['key'].hasOwnProperty('condition') && sch['fields']['key']['condition'].hasOwnProperty('allowedvalues')) {\r\n                let cons = sch.fields.key.condition.allowedvalues\r\n                for (let i = 0; i < acttable.schema.length; i++) {\r\n                    let attr = acttable['schema'][i].attributename, flag = 1\r\n                    for (let j = 0; j < cons.length; j++) {\r\n                        let con = \"acttable.\" + cons[j].split('/')[1].replace('#', '')\r\n                        let key = cons[j].split('/')[1].replace('#', '')\r\n                        if (key.split('.')[1] === 'primary') {\r\n                            if (attr === eval(con)) {\r\n                                flag = 0\r\n                                break;\r\n                            }\r\n                        }\r\n                        else if (key.split('.')[1] === 'secondary' && flag === 1) {\r\n                            if (indexes.hasOwnProperty('secondary') && indexes.secondary.length > 0) {\r\n                                let secindex = indexes.secondary\r\n                                for (let k = 0; k < secindex.length; k++) {\r\n                                    con = con.split('indexes.secondary').join('indexes.secondary[' + k + ']')\r\n                                    if (attr === eval(con)) {\r\n                                        flag = 0\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                flag = 1\r\n                            }\r\n                        }\r\n                    }\r\n                    if (flag === 1) {\r\n                        alval.push(attr)\r\n                    }\r\n                }\r\n                sch['fields']['key']['allowedvalues'] = alval\r\n                sch['fields']['sortkey']['allowedvalues'] = alval\r\n                setCurSchema(sch)\r\n                if (alval.length > 0) {\r\n                    setFormDialog(true)\r\n                }\r\n                else {\r\n                    setTableTab(0)\r\n                    setMessage(\"Add more attributes to add a secondary index.\")\r\n                    setSeverrity('info')\r\n                    setOpenAlert(true)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSchemaActions = (key, ipparams) => {\r\n        if (key) {\r\n            setLoader(true)\r\n            let apidata = {\r\n                path: apipath['designapi'] + \"/table/\" + serviceid + \"/\" + db.dbid + \"/\" + curTable.tableid,\r\n                ref: \"UpdateTable\",\r\n                method: \"PATCH\",\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                body: {\r\n                    tableid: curTable.tableid,\r\n                    resourceid: resourceid,\r\n                    updatevalue: JSON.stringify(ipparams),\r\n                    updatepath: ''\r\n                }\r\n            }\r\n            if (formName === \"Add Primary Index\") {\r\n                let table = curTable\r\n                table['indexes']['primary'] = ipparams\r\n                setCurTable(table)\r\n                apidata.body.updatepath = \"indexes/primary\"\r\n\r\n            }\r\n            else if (formName === \"Add Secondary Index\") {\r\n                let table = curTable\r\n                if (table['indexes'].hasOwnProperty('secondary') && table['indexes']['secondary'].length > 0) {\r\n                    table['indexes']['secondary'].push(ipparams)\r\n                    apidata.body.updatepath = \"indexes/secondary[\" + (table['indexes']['secondary'].length - 1) + \"]\"\r\n                }\r\n                else {\r\n                    table['indexes']['secondary'] = [ipparams]\r\n                    apidata.body.updatepath = \"indexes/secondary[0]\"\r\n                }\r\n                setCurTable(table)\r\n            }\r\n            else {\r\n\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n        else {\r\n            setFormDialog(false)\r\n            setFormName('')\r\n            setCurSchema({})\r\n        }\r\n    }\r\n\r\n    const CheckDeleteLiveDB = () => {\r\n        setLoader(false)\r\n        let tablelist = tableList, flag = 0\r\n        if (tablelist.length > 0) {\r\n            for (let i = 0; i < tablelist.length; i++) {\r\n                if (tablejson[tablelist[i].tableid].hasOwnProperty('status') && tablejson[tablelist[i].tableid]['status'] === \"Running\") {\r\n                    flag = 1\r\n                    break;\r\n                }\r\n            }\r\n            if (flag === 0) {\r\n                if (sessionStorage.getItem('isResourceLive') && (sessionStorage.getItem('isTableLive') === \"yes\" || sessionStorage.getItem('isTableLive') !== \"Stopping\")) {\r\n                    flag = 2\r\n                }\r\n            }\r\n        }\r\n        if (flag === 0) {\r\n            handleActions({\r\n                Action: \"confirmation\",\r\n                confirmText: \"Are you sure you want to stop this process?\",\r\n                apidata: {\r\n                    method: \"DELETE\",\r\n                    path: apipath['liveapi'] + \"/\" + serviceid + \"/db/\" + db.dbid,\r\n                    headers: {\r\n                        headers: true,\r\n                        apidomain: apidomain.vmurl\r\n                    },\r\n                    body: {},\r\n                    ref: \"DeleteLiveDB\"\r\n                }\r\n            })\r\n        }\r\n        else if (flag === 1) {\r\n            setMessage('One or more tables are in running state, stop the table(s) to stop the DB.')\r\n            setSeverrity('info')\r\n            setLoader(false)\r\n            setOpenAlert(true)\r\n        }\r\n        else if (flag === 2) {\r\n            setMessage('Resource is in running state, stop the resource to stop the DB.')\r\n            setSeverrity('info')\r\n            setLoader(false)\r\n            setOpenAlert(true)\r\n        }\r\n    }\r\n\r\n    function CheckDeleteLiveTable(tableid) {\r\n        setLoader(true)\r\n        let flag = 0\r\n        if (sessionStorage.getItem('isResourceLive') && sessionStorage.getItem('isResourceLive') === \"yes\") {\r\n            flag = 1\r\n            setMessage('Resource is in running state, stop resource to stop the table.')\r\n            setSeverrity('info')\r\n            setLoader(false)\r\n            setOpenAlert(true)\r\n        }\r\n        if (flag === 0) {\r\n            setLoader(false)\r\n            handleActions({\r\n                Action: \"confirmation\",\r\n                confirmText: \"Are you sure you want to stop this process?\",\r\n                apidata: {\r\n                    path: apipath['liveapi'] + \"/\" + serviceid + \"/\" + db.dbid + \"/table/\" + tableid,\r\n                    headers: {\r\n                        headers: true,\r\n                        apidomain: apidomain.vmurl\r\n                    },\r\n                    method: \"DELETE\",\r\n                    body: {},\r\n                    ref: \"DeleteLiveTable\",\r\n                    tableid: tableid\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    function CheckLiveTable(table) {\r\n        if (Object.keys(tablejson[table.tableid].indexes).length > 0 && tablejson[table.tableid].schema.length > 0) {\r\n            let apidata = {\r\n                path: apipath['liveapi'] + \"/\" + serviceid + \"/\" + db.dbid + \"/table/\" + table.tableid + \"/output\",\r\n                headers: {\r\n                    headers: true,\r\n                    apidomain: apidomain.vmurl\r\n                },\r\n                method: \"GET\",\r\n                body: {},\r\n                ref: \"GetLiveTableOP\",\r\n                show: false,\r\n                key: \"CRLive\",\r\n                tableJson: table,\r\n                tablelist: tableList,\r\n                dbid: db.dbid\r\n            }\r\n            manageAPIs(apidata)\r\n        }\r\n        else {\r\n            setLoader(false)\r\n            setMessage('No Attributes or indexes in the table, please add it and try again.')\r\n            setSeverrity('error')\r\n            setOpenAlert(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{ width: '100%', height: '100%' }}>\r\n            {\r\n                loader === true ?\r\n                    <Loader type=\"page\" open={true} />\r\n                    :\r\n                    null\r\n            }\r\n            <Alert openAlert={openAlert} severity={severity} message={message} handler={handleAlert} />\r\n            <Box style={{ width: '100%', height: '100%' }}>\r\n                <Box mb={1}>\r\n                    {\r\n                        Object.keys(db).length > 0 ?\r\n                            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\r\n                                <Box display=\"flex\" alignItems=\"center\">\r\n                                    <Box display=\"flex\" alignItems=\"center\" mr={2}>\r\n                                        <Box mr={1}>\r\n                                            <Typography className={`${typographyClasses.text} ${typographyClasses.bold}`}>{dbmap[db.type]}</Typography>\r\n                                        </Box>\r\n                                        <Box>\r\n                                            <Button\r\n                                                color=\"primary\"\r\n                                                onClick={() => {\r\n                                                    setFormName('Database Details')\r\n                                                    setFormDialog(true)\r\n                                                }}\r\n                                            >\r\n                                                <SettingsIcon className={typographyClasses.text} />\r\n                                            </Button>\r\n                                        </Box>\r\n                                    </Box>\r\n                                    <Box display=\"flex\" alignItems=\"center\">\r\n                                        {\r\n                                            db.hasOwnProperty('status') === true && dbstatus !== \"Stopping\" ?\r\n                                                <Box mr={1} display=\"flex\" alignItems=\"center\">\r\n                                                    <Box mr={1} style={{ cursor: 'pointer' }} borderRadius={16} height={28} p={0.5} pl={2} pr={2} className={statusClasses[db.status]}>\r\n                                                        <Typography className={`${typographyClasses.root} ${typographyClasses.smallText}`}>DB Status - {db.status}</Typography>\r\n                                                    </Box>\r\n                                                    <Box style={{ cursor: 'pointer', borderColor: 'gray' }} border={1} mr={1} height={28} p={0.5} pl={2} pr={2} onClick={(e) => {\r\n                                                        e.stopPropagation()\r\n                                                        setLoader(true)\r\n                                                        let apidata = {\r\n                                                            path: apipath['liveapi'] + \"/\" + serviceid + \"/db/\" + db.dbid + \"/output\",\r\n                                                            headers: {\r\n                                                                headers: true,\r\n                                                                apidomain: apidomain.vmurl\r\n                                                            },\r\n                                                            method: \"GET\",\r\n                                                            body: {},\r\n                                                            ref: \"GetLiveDBOP\",\r\n                                                            formname: \"DB Outputs\",\r\n                                                            show: true,\r\n                                                            key: \"DB\",\r\n                                                            dbJson: db\r\n                                                        }\r\n                                                        manageAPIs(apidata)\r\n                                                    }}>\r\n                                                        <Typography className={typographyClasses.smallText}>Output</Typography>\r\n                                                    </Box>\r\n                                                    <Box style={{ cursor: 'pointer', borderColor: 'gray' }} border={1} mr={1} height={28} p={0.5} pl={2} pr={2} onClick={(e) => {\r\n                                                        e.stopPropagation()\r\n                                                        setLoader(true)\r\n                                                        setLoader(true)\r\n                                                        let apidata = {\r\n                                                            path: apipath['liveapi'] + \"/\" + serviceid + \"/db/\" + db.dbid + \"/logs\",\r\n                                                            headers: {\r\n                                                                headers: true,\r\n                                                                apidomain: apidomain.vmurl\r\n                                                            },\r\n                                                            method: \"GET\",\r\n                                                            body: {},\r\n                                                            ref: \"GetLiveDBLogs\",\r\n                                                            formname: \"DB Logs\",\r\n                                                            show: true,\r\n                                                            key: \"DB\",\r\n                                                            dbJson: db\r\n                                                        }\r\n                                                        manageAPIs(apidata)\r\n                                                    }}>\r\n                                                        <Typography className={typographyClasses.smallText}>Logs</Typography>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </Box>\r\n                                </Box>\r\n                                <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                                    <Box display=\"flex\" alignItems=\"center\">\r\n                                        <Box mr={1}>\r\n                                            <Button\r\n                                                variant=\"text\"\r\n                                                color=\"primary\"\r\n                                                onClick={handleActions.bind(this, { \"Action\": \"refresh\" })}\r\n                                            >\r\n                                                <RefreshIcon className={typographyClasses.text} />\r\n                                            </Button>\r\n                                        </Box>\r\n                                        {\r\n                                            db.hasOwnProperty('status') === false && liveInterval === false && dbstatus === \"\" ?\r\n                                                <Box mr={1} p={1} height={28} color=\"white\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" style={{ backgroundImage: 'linear-gradient(45deg, #05877b, #4caf50)', cursor: 'pointer' }} pr={2} pl={2} onClick={() => {\r\n                                                    setLoader(true)\r\n                                                    let apidata = {\r\n                                                        path: apipath['liveapi'] + \"/\" + serviceid + \"/db/\" + db.dbid + \"/output\",\r\n                                                        headers: {\r\n                                                            headers: true,\r\n                                                            apidomain: apidomain.vmurl\r\n                                                        },\r\n                                                        method: \"GET\",\r\n                                                        body: {},\r\n                                                        ref: \"GetLiveDBOP\",\r\n                                                        formname: \"DB Outputs\",\r\n                                                        show: false,\r\n                                                        key: \"CRLive\",\r\n                                                        dbJson: db\r\n                                                    }\r\n                                                    manageAPIs(apidata)\r\n                                                }}>\r\n                                                    <Box mr={0.5} display=\"flex\">\r\n                                                        <PlayArrowIcon className={typographyClasses.text} />\r\n                                                    </Box>\r\n                                                    <Box display=\"flex\">\r\n                                                        <Typography className={typographyClasses.smallText}>Live DB</Typography>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                        {\r\n                                            liveInterval === true && (db.hasOwnProperty('status') === false || db.status === \"Initiated\") ?\r\n                                                <Box p={0.5} pl={2} pr={2} height={28} mr={1} className={statusClasses[\"deploying\"]} borderRadius={16} display=\"flex\" alignItems=\"center\">\r\n                                                    <Box display=\"flex\" mr={0.5}>\r\n                                                        <Typography className={`${typographyClasses.root} ${typographyClasses.smallText}`}>Deploying</Typography>\r\n                                                    </Box>\r\n                                                    <Box display=\"flex\">\r\n                                                        <CircularProgress size={12} />\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                        {\r\n                                            delInterval === true && dbstatus === \"Stopping\" ?\r\n                                                <Box p={0.5} pl={2} pr={2} height={28} mr={1} className={statusClasses['failed']} borderRadius={16} display=\"flex\" alignItems=\"center\">\r\n                                                    <Box display=\"flex\" mr={0.5}>\r\n                                                        <Typography className={`${typographyClasses.root} ${typographyClasses.smallText}`}>Stopping</Typography>\r\n                                                    </Box>\r\n                                                    <Box display=\"flex\">\r\n                                                        <CircularProgress size={12} />\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                        {\r\n                                            db.hasOwnProperty('status') === true && dbstatus === \"\" && db.status !== \"Initiated\" ?\r\n                                                <Box mr={1} p={1} height={28} color=\"white\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" style={{ backgroundImage: 'linear-gradient(45deg, #f44336, #d10147)', cursor: 'pointer' }} pr={2} pl={2} onClick={CheckDeleteLiveDB}>\r\n                                                    <Box mr={0.5} display=\"flex\">\r\n                                                        <StopIcon className={typographyClasses.text} />\r\n                                                    </Box>\r\n                                                    <Box display=\"flex\">\r\n                                                        <Typography className={typographyClasses.smallText}>Stop DB</Typography>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                        <Box>\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className=\"trigger-btn\"\r\n                                                onClick={() => {\r\n                                                    setFormName('Add Table')\r\n                                                    setFormDialog(true)\r\n                                                }}\r\n                                                disabled={btnAction}\r\n                                            >\r\n                                                <AddIcon className={typographyClasses.smallText} />&nbsp;&nbsp;Table\r\n                                            </Button>\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Box>\r\n                            </Box>\r\n                            :\r\n                            <Box p={1}>\r\n                                {\r\n                                    loadTimeout === false ?\r\n                                        <Loader type=\"block\" />\r\n                                        :\r\n                                        <Typography className={typographyClasses.smallText}>No Tables</Typography>\r\n                                }\r\n                            </Box>\r\n                    }\r\n                </Box>\r\n                {\r\n                    Object.keys(db).length > 0 ?\r\n                        <Box>\r\n                            {\r\n                                tableList.length > 0 ?\r\n                                    tableList.map((table, index) => {\r\n                                        if (!tableExpObj.hasOwnProperty(table.tableid)) {\r\n                                            tableExpObj[table.tableid] = {\r\n                                                expanded: index === 0 ? true : false,\r\n                                            }\r\n                                        }\r\n                                        if (!tablejson.hasOwnProperty(table.tableid)) {\r\n                                            tablejson[table.tableid] = table\r\n                                        }\r\n                                        return (\r\n                                            <Accordion square TransitionProps={{ unmountOnExit: true }} defaultExpanded expanded={tableExpObj[table.tableid]['expanded']} onChange={() => handlePanelChange(table)} style={{ marginBottom: '8px' }} key={index}>\r\n                                                <AccordionSummary {...expansionProps(\"table\", index)} expandIcon={<ExpandMoreIcon fontSize=\"small\" />} style={{ minHeight: 35, height: 40, margin: '0 !important', padding: 5, border: '1px solid lightgray', backgroundColor: '#f2f2f2' }} >\r\n                                                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" style={{ width: '100%' }}>\r\n                                                        <Box display=\"flex\" alignItems=\"center\" p={1} pt={0.5} pb={0.5} minWidth={75}>\r\n                                                            <Box mr={3} display=\"flex\">\r\n                                                                <Typography color=\"primary\" className={`${typographyClasses.text} ${typographyClasses.bold}`}>{table.tablename}</Typography>\r\n                                                            </Box>\r\n                                                            {\r\n                                                                tablejson[table.tableid].hasOwnProperty('status') === true && tablejson[table.tableid].status !== \"Stopping\" && tablejson[table.tableid].status !== \"Deploying\" ?\r\n                                                                    <Box mr={1} display=\"flex\" alignItems=\"center\">\r\n                                                                        <Box mr={1} borderRadius={16} height={28} p={0.5} pl={2} pr={2} className={statusClasses[tablejson[table.tableid].status]}>\r\n                                                                            <Typography className={`${typographyClasses.root} ${typographyClasses.smallText}`}>Table Status - {tablejson[table.tableid].status}</Typography>\r\n                                                                        </Box>\r\n                                                                        <Box style={{ cursor: 'pointer', borderColor: 'gray' }} border={1} mr={1} height={28} p={0.5} pl={2} pr={2} onClick={(e) => {\r\n                                                                            e.stopPropagation()\r\n                                                                            setLoader(true)\r\n                                                                            let apidata = {\r\n                                                                                path: apipath['liveapi'] + \"/\" + serviceid + \"/\" + db.dbid + \"/table/\" + table.tableid + \"/output\",\r\n                                                                                headers: {\r\n                                                                                    headers: true,\r\n                                                                                    apidomain: apidomain.vmurl\r\n                                                                                },\r\n                                                                                method: \"GET\",\r\n                                                                                body: {},\r\n                                                                                ref: \"GetLiveTableOP\",\r\n                                                                                formname: \"Table Outputs\",\r\n                                                                                show: true,\r\n                                                                                key: \"Table\",\r\n                                                                                tableJson: tablejson[table.tableid],\r\n                                                                                tablelist: tableList,\r\n                                                                                dbid: db.dbid\r\n                                                                            }\r\n                                                                            manageAPIs(apidata)\r\n                                                                        }}>\r\n                                                                            <Typography className={typographyClasses.smallText}>Output</Typography>\r\n                                                                        </Box>\r\n                                                                        <Box style={{ cursor: 'pointer', borderColor: 'gray' }} border={1} mr={1} height={28} p={0.5} pl={2} pr={2} onClick={(e) => {\r\n                                                                            e.stopPropagation()\r\n                                                                            setLoader(true)\r\n                                                                            setLoader(true)\r\n                                                                            let apidata = {\r\n                                                                                path: apipath['liveapi'] + \"/\" + serviceid + \"/\" + db.dbid + \"/table/\" + table.tableid + \"/logs\",\r\n                                                                                headers: {\r\n                                                                                    headers: true,\r\n                                                                                    apidomain: apidomain.vmurl\r\n                                                                                },\r\n                                                                                method: \"GET\",\r\n                                                                                body: {},\r\n                                                                                ref: \"GetLiveTableLogs\",\r\n                                                                                formname: \"Table Logs\",\r\n                                                                                show: true,\r\n                                                                                key: \"Table\",\r\n                                                                                tableJson: tablejson[table.tableid],\r\n                                                                                tablelist: tableList\r\n                                                                            }\r\n                                                                            manageAPIs(apidata)\r\n                                                                        }}>\r\n                                                                            <Typography className={typographyClasses.smallText}>Logs</Typography>\r\n                                                                        </Box>\r\n                                                                    </Box>\r\n                                                                    :\r\n                                                                    null\r\n                                                            }\r\n                                                        </Box>\r\n                                                        <Box display=\"flex\" alignItems=\"center\">\r\n                                                            {\r\n                                                                btnAction === false ?\r\n                                                                    <Box mr={1}>\r\n                                                                        <Button\r\n                                                                            variant=\"text\"\r\n                                                                            color=\"secondary\"\r\n                                                                            onClick={(event) => {\r\n                                                                                event.stopPropagation()\r\n                                                                                handleActions({\r\n                                                                                    Action: \"confirmation\",\r\n                                                                                    confirmText: \"Are you sure you want to delete this table(\" + table.tablename + \")?\",\r\n                                                                                    apidata: {\r\n                                                                                        method: \"DELETE\",\r\n                                                                                        path: apipath['designapi'] + \"/table/\" + serviceid + \"/\" + db.dbid + \"/\" + table.tableid,\r\n                                                                                        headers: {\r\n                                                                                            headers: true,\r\n                                                                                            apidomain: apidomain.vmurl\r\n                                                                                        },\r\n                                                                                        body: {},\r\n                                                                                        ref: \"DeleteTable\"\r\n                                                                                    }\r\n                                                                                })\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <DeleteIcon className={typographyClasses.text} />\r\n                                                                        </Button>\r\n                                                                    </Box>\r\n                                                                    :\r\n                                                                    null\r\n                                                            }\r\n                                                            {\r\n                                                                tablejson.hasOwnProperty(table.tableid) === true && dbstatus === \"\" ?\r\n                                                                    tablejson[table.tableid].hasOwnProperty('status') === false && (db.hasOwnProperty('status') === true && db.status === \"Running\") && liveInterval === false && tablestatus === \"\" ?\r\n                                                                        <Box mr={1} p={1} height={28} color=\"white\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" style={{ backgroundImage: 'linear-gradient(45deg, #05877b, #4caf50)', cursor: 'pointer' }} pr={2} pl={2} onClick={(event) => {\r\n                                                                            if (tableExpObj[table.tableid]['expanded'] === true) {\r\n                                                                                event.stopPropagation()\r\n                                                                            }\r\n                                                                            setLoader(true)\r\n                                                                            CheckLiveTable(table)\r\n                                                                        }}>\r\n                                                                            <Box mr={0.5} display=\"flex\">\r\n                                                                                <PlayArrowIcon className={typographyClasses.text} />\r\n                                                                            </Box>\r\n                                                                            <Box display=\"flex\">\r\n                                                                                <Typography className={typographyClasses.smallText}>Live Table</Typography>\r\n                                                                            </Box>\r\n                                                                        </Box>\r\n                                                                        :\r\n                                                                        null\r\n                                                                    :\r\n                                                                    null\r\n                                                            }\r\n                                                            {\r\n                                                                tablejson.hasOwnProperty(table.tableid) === true ?\r\n                                                                    tablejson[table.tableid].hasOwnProperty('status') === true && tablejson[table.tableid].status !== \"Initiated\" && tablejson[table.tableid].status !== \"Stopping\" && tablejson[table.tableid].status !== \"Deploying\" && (db.hasOwnProperty('status') === true && db.status === \"Running\") ?\r\n                                                                        <Box mr={1} p={1} height={28} color=\"white\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" style={{ backgroundImage: 'linear-gradient(45deg, #f44336, #d10147)', cursor: 'pointer' }} pr={2} pl={2} onClick={(event) => {\r\n                                                                            event.stopPropagation()\r\n                                                                            CheckDeleteLiveTable(table.tableid)\r\n                                                                        }}>\r\n                                                                            <Box mr={0.5} display=\"flex\">\r\n                                                                                <StopIcon className={typographyClasses.text} />\r\n                                                                            </Box>\r\n                                                                            <Box display=\"flex\">\r\n                                                                                <Typography className={typographyClasses.smallText}>Stop Table</Typography>\r\n                                                                            </Box>\r\n                                                                        </Box>\r\n                                                                        :\r\n                                                                        null\r\n                                                                    :\r\n                                                                    null\r\n                                                            }\r\n                                                            {\r\n                                                                tablejson[table.tableid].hasOwnProperty('status') === true && (tablejson[table.tableid].status === \"Initiated\" || tablejson[table.tableid].status === \"Deploying\") && (db.hasOwnProperty('status') && db.status === \"Running\") ?\r\n                                                                    <Box p={0.5} pl={2} pr={2} height={28} mr={1} className={statusClasses[\"deploying\"]} borderRadius={16} display=\"flex\" alignItems=\"center\">\r\n                                                                        <Box display=\"flex\" mr={0.5}>\r\n                                                                            <Typography className={`${typographyClasses.root} ${typographyClasses.smallText}`}>Deploying</Typography>\r\n                                                                        </Box>\r\n                                                                        <Box display=\"flex\">\r\n                                                                            <CircularProgress size={12} />\r\n                                                                        </Box>\r\n                                                                    </Box>\r\n                                                                    :\r\n                                                                    null\r\n                                                            }\r\n                                                            {\r\n                                                                tablejson[table.tableid].status === \"Stopping\" ?\r\n                                                                    <Box p={0.5} pl={2} pr={2} height={28} mr={1} className={statusClasses['failed']} borderRadius={16} display=\"flex\" alignItems=\"center\">\r\n                                                                        <Box display=\"flex\" mr={0.5}>\r\n                                                                            <Typography className={`${typographyClasses.root} ${typographyClasses.smallText}`}>Stopping</Typography>\r\n                                                                        </Box>\r\n                                                                        <Box display=\"flex\">\r\n                                                                            <CircularProgress size={12} />\r\n                                                                        </Box>\r\n                                                                    </Box>\r\n                                                                    :\r\n                                                                    null\r\n                                                            }\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                </AccordionSummary>\r\n                                                <AccordionDetails style={{ padding: 0 }}>\r\n                                                    <Box style={{ width: '100%', borderColor: 'lightgray' }} border={1} borderTop={0}>\r\n                                                        <TableTabs Table={table} />\r\n                                                    </Box>\r\n                                                </AccordionDetails>\r\n                                            </Accordion>\r\n                                        )\r\n                                    })\r\n                                    :\r\n                                    <Box p={1}>\r\n                                        {\r\n                                            loadTimeout === false ?\r\n                                                <Loader type=\"block\" />\r\n                                                :\r\n                                                <Typography className={typographyClasses.smallText}>No Tables</Typography>\r\n                                        }\r\n                                    </Box>\r\n                            }\r\n                        </Box>\r\n                        :\r\n                        <Box p={1}>\r\n                            {\r\n                                loadTimeout === false ?\r\n                                    <Loader type=\"block\" />\r\n                                    :\r\n                                    <Typography className={typographyClasses.smallText}>No Database</Typography>\r\n                            }\r\n                        </Box>\r\n                }\r\n            </Box>\r\n            <Dialog\r\n                open={formDialog}\r\n                onClose={() => setFormDialog(false)}\r\n                aria-labelledby=\"acc-dialog-title\"\r\n                fullWidth={true}\r\n                maxWidth={formName === \"Add Attribute\" || formName.indexOf('Outputs') !== -1 || formName === \"Status\" || formName.indexOf('Logs') !== -1 ? \"lg\" : \"sm\"}\r\n            >\r\n                <DialogTitle id=\"acc-dialog-title\" style={{ borderBottom: '1px solid lightgrey' }}>{formName === \"Status\" ? \"Status - \" + curState : formName}</DialogTitle>\r\n                <DialogContent>\r\n                    <Box style={{ width: '100%' }}>\r\n                        {\r\n                            formName === \"Database Details\" || formName.indexOf('Outputs') !== -1 || formName === \"Status\" || formName.indexOf('Logs') !== -1 ?\r\n                                <Box>\r\n                                    {\r\n                                        formName.indexOf('Logs') !== -1 ?\r\n                                            Object.keys(jsontohtml).length > 0 ?\r\n                                                <Box className=\"json-to-html\">\r\n                                                    <JSONToHTMLTable data={jsontohtml} tableClassName=\"table table-sm\" />\r\n                                                </Box>\r\n                                                :\r\n                                                <Box>\r\n                                                    <Typography>No Logs</Typography>\r\n                                                </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        formName === \"Database Details\" ?\r\n                                            <Box>\r\n                                                <Grid container>\r\n                                                    <Grid xs={12} md={4} item>\r\n                                                        <Box display=\"flex\">\r\n                                                            <Typography className={typographyClasses.smallText} color=\"primary\">Type</Typography>\r\n                                                        </Box>\r\n                                                    </Grid>\r\n                                                    <Grid xs={12} md={8} item>\r\n                                                        <Box display=\"flex\">\r\n                                                            <Typography className={typographyClasses.smallText}>{dbmap[db.type]}</Typography>\r\n                                                        </Box>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        formName.indexOf('Outputs') !== -1 ?\r\n                                            Object.keys(jsontohtml).length > 0 ?\r\n                                                <Box className=\"json-to-html\">\r\n                                                    <JSONToHTMLTable data={jsontohtml} tableClassName=\"table table-sm\" />\r\n                                                </Box>\r\n                                                :\r\n                                                <Box>\r\n                                                    <Typography>No Outputs</Typography>\r\n                                                </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        formName === \"Status\" ?\r\n                                            Object.keys(jsontohtml).length > 0 ?\r\n                                                <Box className=\"json-to-html\">\r\n                                                    <JSONToHTMLTable data={jsontohtml} tableClassName=\"table table-sm\" />\r\n                                                </Box>\r\n                                                :\r\n                                                <Box>\r\n                                                    <Typography>No Status</Typography>\r\n                                                </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                </Box>\r\n                                :\r\n                                <form style={{}} autoComplete=\"off\">\r\n                                    {\r\n                                        formName === \"Add Table\" ?\r\n                                            <Box>\r\n                                                <Box mb={1}>\r\n                                                    <FormControl fullWidth>\r\n                                                        <label htmlFor=\"TableName\" required>Table Name</label>\r\n                                                        <TextField\r\n                                                            id=\"TableName\"\r\n                                                            required\r\n                                                            value={tabname}\r\n                                                            fullWidth\r\n                                                            placeholder=\"Enter Table Name\"\r\n                                                            onChange={handleFormDataChage.bind(this, \"tablename\")}\r\n                                                            variant=\"outlined\"\r\n                                                            helperText=\"No capital letters,special characters except underscore is allowed.\"\r\n                                                        >\r\n                                                        </TextField>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                                <Box>\r\n                                                    <FormControl fullWidth>\r\n                                                        <label htmlFor=\"Description\">Description</label>\r\n                                                        <TextField\r\n                                                            id=\"Description\"\r\n                                                            required\r\n                                                            fullWidth\r\n                                                            placeholder=\"Enter Description\"\r\n                                                            onChange={handleFormDataChage.bind(this, \"description\")}\r\n                                                            variant=\"outlined\"\r\n                                                            multiline\r\n                                                            rows={3}\r\n                                                        >\r\n                                                        </TextField>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                            </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        formName === \"Add Attribute\" ?\r\n                                            <Box>\r\n                                                <Box>\r\n                                                    <Grid container>\r\n                                                        <Grid item xs={3}>\r\n                                                            <label required>Attribute Name</label>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={2}>\r\n                                                            <label required>Attribute Type</label>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={3}>\r\n                                                            <label>Description</label>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={3}>\r\n                                                            <label>Constraints</label>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={1}>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Box>\r\n                                                <Box>\r\n                                                    {\r\n                                                        attrIpList.map((item, index) => {\r\n                                                            return (\r\n                                                                <Box key={index} display=\"flex\" alignItems=\"center\" p={1} pl={0} justifyContent=\"space-between\" borderBottom={index - 1 === attrIpList.length ? 0 : 1} style={{ borderColor: 'lightgray', width: '100%' }}>\r\n                                                                    <Grid container alignItems=\"center\">\r\n                                                                        <Grid item xs={3} style={{ padding: '2px 2px 0 0' }}>\r\n                                                                            <FormControl fullWidth>\r\n                                                                                <TextField\r\n                                                                                    name=\"attributename\"\r\n                                                                                    required\r\n                                                                                    fullWidth\r\n                                                                                    placeholder=\"Enter Attribute Name\"\r\n                                                                                    value={item.attributename}\r\n                                                                                    onChange={e => handleAttrInputChange(e, index)}\r\n                                                                                    variant=\"outlined\"\r\n                                                                                >\r\n                                                                                </TextField>\r\n                                                                            </FormControl>\r\n                                                                        </Grid>\r\n                                                                        <Grid item xs={2} style={{ padding: '2px 2px 0 0' }}>\r\n                                                                            <FormControl fullWidth>\r\n                                                                                <Select\r\n                                                                                    name=\"attributetype\"\r\n                                                                                    native\r\n                                                                                    variant=\"outlined\"\r\n                                                                                    value={item.attributetype}\r\n                                                                                    fullWidth\r\n                                                                                    onChange={e => handleAttrInputChange(e, index)}\r\n                                                                                >\r\n                                                                                    <option value=\"S\">String</option>\r\n                                                                                    <option value=\"N\">Number</option>\r\n                                                                                    <option value=\"B\">Boolean</option>\r\n                                                                                </Select>\r\n                                                                            </FormControl>\r\n                                                                        </Grid>\r\n                                                                        <Grid item xs={3} style={{ padding: '2px 2px 0 0' }}>\r\n                                                                            <FormControl fullWidth >\r\n                                                                                <TextField\r\n                                                                                    name=\"description\"\r\n                                                                                    required\r\n                                                                                    fullWidth\r\n                                                                                    placeholder=\"Enter Description\"\r\n                                                                                    value={item.description}\r\n                                                                                    onChange={e => handleAttrInputChange(e, index)}\r\n                                                                                    variant=\"outlined\"\r\n                                                                                // multiline\r\n                                                                                // rows={1}\r\n                                                                                >\r\n                                                                                </TextField>\r\n                                                                            </FormControl>\r\n                                                                        </Grid>\r\n                                                                        <Grid item xs={3} style={{ padding: '2px 2px 0 0' }}>\r\n                                                                            <FormControl fullWidth>\r\n                                                                                <TextField\r\n                                                                                    name=\"constraints\"\r\n                                                                                    required\r\n                                                                                    fullWidth\r\n                                                                                    placeholder=\"Enter Constraints\"\r\n                                                                                    value={item.constraints}\r\n                                                                                    onChange={e => handleAttrInputChange(e, index)}\r\n                                                                                    variant=\"outlined\"\r\n                                                                                // multiline\r\n                                                                                // rows={1}\r\n                                                                                >\r\n                                                                                </TextField>\r\n                                                                            </FormControl>\r\n                                                                        </Grid>\r\n                                                                        <Grid item xs={1} style={{ padding: '2px 2px 0 0' }}>\r\n                                                                            <Box display=\"flex\">\r\n                                                                                {\r\n                                                                                    attrIpList.length !== 1 ?\r\n                                                                                        <Button\r\n                                                                                            color=\"secondary\"\r\n                                                                                            style={{ margin: '0px 10px 0 0' }}\r\n                                                                                            onClick={() => handleRemAttr(index)}\r\n                                                                                        >\r\n                                                                                            <Clear className={typographyClasses.text} />\r\n                                                                                        </Button>\r\n                                                                                        :\r\n                                                                                        <Button\r\n                                                                                            color=\"secondary\"\r\n                                                                                            disabled={true}\r\n                                                                                            style={{ margin: '0px 10px 0 0' }}\r\n                                                                                        >\r\n                                                                                            <Clear className={typographyClasses.text} />\r\n                                                                                        </Button>\r\n                                                                                }\r\n                                                                                {\r\n                                                                                    attrIpList.length - 1 === index ?\r\n                                                                                        <Button\r\n                                                                                            color=\"primary\"\r\n                                                                                            onClick={handleAddAttr}\r\n                                                                                            style={{ margin: '0px 10px 0 0' }}\r\n                                                                                        >\r\n                                                                                            <AddIcon className={typographyClasses.text} />\r\n                                                                                        </Button>\r\n                                                                                        :\r\n                                                                                        null\r\n                                                                                }\r\n                                                                            </Box>\r\n                                                                        </Grid>\r\n                                                                    </Grid>\r\n                                                                </Box>\r\n                                                            );\r\n                                                        })\r\n                                                    }\r\n                                                </Box>\r\n                                            </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        formName === \"Edit Attribute\" ?\r\n                                            <Box>\r\n                                                <Box mb={1}>\r\n                                                    <FormControl fullWidth>\r\n                                                        <label>Attribute Name</label>\r\n                                                        <TextField\r\n                                                            name=\"attributename\"\r\n                                                            required\r\n                                                            fullWidth\r\n                                                            placeholder=\"Enter Attribute Name\"\r\n                                                            value={curAttr.attributename}\r\n                                                            // onChange={e => handleFormDataChage(, index)}\r\n                                                            variant=\"outlined\"\r\n                                                            disabled\r\n                                                        >\r\n                                                        </TextField>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                                <Box mb={1}>\r\n                                                    <FormControl fullWidth>\r\n                                                        <label>Attribute Type</label>\r\n                                                        <Select\r\n                                                            name=\"attributetype\"\r\n                                                            native\r\n                                                            variant=\"outlined\"\r\n                                                            defaultValue={curAttr.attributetype}\r\n                                                            fullWidth\r\n                                                            onChange={handleFormDataChage.bind(this, \"attributetype\")}\r\n                                                        >\r\n                                                            <option value=\"string\">String</option>\r\n                                                            <option value=\"number\">Number</option>\r\n                                                            <option value=\"boolean\">Boolean</option>\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                                <Box mb={1}>\r\n                                                    <FormControl fullWidth>\r\n                                                        <label>Description</label>\r\n                                                        <TextField\r\n                                                            name=\"attributename\"\r\n                                                            required\r\n                                                            fullWidth\r\n                                                            placeholder=\"Enter Description\"\r\n                                                            defaultValue={curAttr.hasOwnProperty('description') === true ? curAttr.description : \"\"}\r\n                                                            onChange={handleFormDataChage.bind(this, \"description\")}\r\n                                                            variant=\"outlined\"\r\n                                                        >\r\n                                                        </TextField>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                                <Box mb={1}>\r\n                                                    <FormControl fullWidth>\r\n                                                        <label>Constraints</label>\r\n                                                        <TextField\r\n                                                            name=\"attributename\"\r\n                                                            required\r\n                                                            fullWidth\r\n                                                            placeholder=\"Enter Constraints\"\r\n                                                            defaultValue={curAttr.hasOwnProperty('constraints') === true ? curAttr.description : \"\"}\r\n                                                            onChange={handleFormDataChage.bind(this, \"constraints\",)}\r\n                                                            variant=\"outlined\"\r\n                                                        >\r\n                                                        </TextField>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n                                            </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        formName === \"Add Primary Index\" || formName === \"Add Secondary Index\" ?\r\n                                            Object.keys(curSchema).length > 0 ?\r\n                                                <SchemaForm schema={curSchema} clickHandler={handleSchemaActions} formname={formName} />\r\n                                                :\r\n                                                null\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                </form>\r\n                        }\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => {\r\n                        setFormDialog(false)\r\n                        setCurstate(\"\")\r\n                        setJsontoHtml({})\r\n                    }} color=\"secondary\" variant=\"contained\">\r\n                        {formName === \"Database Details\" || formName.indexOf('Outputs') !== -1 || formName !== \"Status\" || formName.indexOf('Logs') !== -1 ? \"Close\" : \"Cancel\"}\r\n                    </Button>\r\n                    {\r\n                        formName !== \"Database Details\" && formName.indexOf('Outputs') === -1 && formName !== \"Status\" && formName.indexOf('Logs') === -1 ?\r\n                            <Button onClick={FormDialogSubmit} color=\"primary\" variant=\"contained\" className=\"api-btn\">\r\n                                {formName === \"Edit Attribute\" ? \"Update\" : \"Add\"}\r\n                            </Button>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogActions>\r\n            </Dialog>\r\n            {\r\n                confirmation !== '' ?\r\n                    <Confirm confirmText={confirmation} clickHandler={handleConfirmation} />\r\n                    :\r\n                    null\r\n            }\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default TableDetails;\r\n\r\n","import React, { useState } from 'react'\r\n\r\n// Material UI\r\nimport Box from '@material-ui/core/Box';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\n//Material Icons\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\n// Custom Components\r\nimport MinMax from '../../Components/MinMax';\r\n\r\n\r\nconst TemplateIp = ({ clickHandler, schema,formname }) => {\r\n\r\n    const [abc, setAbc] = useState(schema)\r\n    const [curFormObj, setCurFormObj] = useState({})\r\n    const [curPath, setCurPath] = useState(\"\")\r\n    const [formDialog, setFormDialog] = useState(false)\r\n    const [order, setOrder] = useState(abc['order'])\r\n    const [formValues, setFormValues] = useState({ \"dummy\": \"dummmy\" })\r\n\r\n    const handleDelete = () => {\r\n\r\n    }\r\n\r\n    const Processobject = ({ Obj, parent, path }) => {\r\n        return (\r\n            <Box>\r\n                <Grid container>\r\n                    {\r\n                        Object.keys(Obj['fields']).map((objkey, objindex) => {\r\n                            if (eval(path)[objkey].type === \"string\" || eval(path)[objkey].type === \"number\") {\r\n                                if (eval(path)[objkey].hasOwnProperty('value')) {\r\n                                    eval(path)[objkey]['value'] = eval(path)[objkey].value\r\n                                }\r\n                                else if (eval(path)[objkey].hasOwnProperty('default')) {\r\n                                    eval(path)[objkey]['value'] = eval(path)[objkey]['default']\r\n                                }\r\n                                else if (eval(path)[objkey].hasOwnProperty('allowedvalues') && eval(path)[objkey].allowedvalues.length > 0) {\r\n                                    if (eval(path)[objkey].hasOwnProperty('mandatory') && eval(path)[objkey].mandatory) {\r\n                                        eval(path)[objkey]['value'] = eval(path)[objkey].allowedvalues[0]\r\n                                    }\r\n                                    else {\r\n                                        eval(path)[objkey]['value'] = ''\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (eval(path)[objkey].type === \"number\") {\r\n                                        if (eval(path)[objkey].hasOwnProperty('minvalue')) {\r\n                                            eval(path)[objkey]['value'] = eval(path)[objkey].minvalue\r\n                                        }\r\n                                        else if (abc['fields'][objkey].hasOwnProperty('maxvalue')) {\r\n                                            eval(path)[objkey]['value'] = eval(path)[objkey].maxvalue\r\n                                        }\r\n                                        else {\r\n                                            eval(path)[objkey]['value'] = 0\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        eval(path)[objkey]['value'] = ''\r\n                                    }\r\n                                }\r\n                                if(eval(path)[objkey].hasOwnProperty('autopopulate') && eval(path)[objkey].autopopulate){\r\n                                    let val = ''\r\n                                    for(let i = 0;i<eval(path)[objkey]['populatevalues'].length;i++){\r\n                                        if(abc['fields'][eval(path)[objkey]['populatevalues'][i]].hasOwnProperty('value') && abc['fields'][eval(path)[objkey]['populatevalues'][i]]['value'] !==\"\"){\r\n                                            val = val+abc['fields'][eval(path)[objkey]['populatevalues'][i]]['value']+'-'\r\n                                        }\r\n                                    }\r\n                                    eval(path)[objkey]['value'] = val+\"index\"\r\n                                }\r\n                                let fmv = path.split('.fields').join('')\r\n                                fmv = fmv.split('abc.').join('')\r\n                                eval('formValues.' + fmv)[objkey] = eval(path)[objkey]['value']\r\n                            }\r\n                            else if (eval(path)[objkey].type === \"arrayofjson\") {\r\n                                if (eval(path)[objkey].hasOwnProperty('value')) {\r\n                                    // abc['fields'][objkey]['fields'] = abc['fields'][objkey].fields\r\n                                }\r\n                                else if (eval(path)[objkey].hasOwnProperty('fields')) {\r\n                                    eval(path)[objkey]['value'] = [{ type: \"object\", \"fields\": eval(path)[objkey]['fields'] }]\r\n                                }\r\n                            }\r\n                            else if (eval(path)[objkey].type === \"Array\") {\r\n                                if (eval(path)[objkey].hasOwnProperty('value')) {\r\n                                    // abc['fields'][objkey]['fields'] = abc['fields'][objkey].fields\r\n                                }\r\n                                else if (eval(path)[objkey].hasOwnProperty('default')) {\r\n                                    eval(path)[objkey]['value'] = [eval(path)[objkey]['default']]\r\n                                }\r\n                            }\r\n                            else if (eval(path)[objkey].type === \"boolean\") {\r\n                                if (eval(path)[objkey].hasOwnProperty('value')) {\r\n                                    eval(path)[objkey]['value'] = eval(path)[objkey].value\r\n                                }\r\n                                else if (eval(path)[objkey].hasOwnProperty('default')) {\r\n                                    eval(path)[objkey]['value'] = eval(path)[objkey]['default']\r\n                                }\r\n                                let fmv = path.split('.fields').join('')\r\n                                fmv = fmv.split('abc.').join('')\r\n                                formValues[fmv][objkey] = eval(path)[objkey]['value']\r\n                            }\r\n                            else if (eval(path)[objkey].type === \"object\") {\r\n                                let fmv = path.split('.fields').join('')\r\n                                fmv = fmv.split('abc.').join('')\r\n                                formValues[fmv][objkey] = {}\r\n                            }\r\n                            return (\r\n                                <Grid item xs={12} md={Obj['fields'][objkey].type === \"string\" ? 6 : (Obj['fields'][objkey].type === \"number\" ? 6 : 12)} style={{ padding: Obj['fields'][objkey].type === \"string\" ? '0 5px 0 0' : (Obj['fields'][objkey].type === \"number\" ? '0 5px 0 0' : '0'), marginBottom: 8 }} key={objindex}>\r\n                                    {\r\n                                        Obj['fields'][objkey].type === \"string\" || Obj['fields'][objkey].type === \"number\" || Obj['fields'][objkey].type === \"boolean\" ?\r\n                                            Obj['fields'][objkey].hasOwnProperty('dependson') === true ?\r\n                                                Obj['fields'][Obj['fields'][objkey]['dependson'].split('/')[0]]['value'] === (\"true\" === Obj['fields'][objkey]['dependson'].split('/')[1]) ?\r\n                                                    < Box style={{ borderColor: 'lightgray' }} key={objindex}>\r\n                                                        <ProcessNormalInput Field={Obj['fields'][objkey]} parent={objkey} path={path + \".\" + objkey} />\r\n                                                    </Box>\r\n                                                    :\r\n                                                    null\r\n                                                :\r\n                                                < Box style={{ borderColor: 'lightgray' }} key={objindex}>\r\n                                                    <ProcessNormalInput Field={Obj['fields'][objkey]} parent={objkey} path={path + \".\" + objkey} />\r\n                                                </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        Obj['fields'][objkey].type === \"object\" ?\r\n                                            Obj['fields'][objkey].hasOwnProperty('dependson') === true ?\r\n                                                Obj['fields'][Obj['fields'][objkey]['dependson'].split('/')[0]]['value'] === (\"true\" === Obj['fields'][objkey]['dependson'].split('/')[1]) ?\r\n                                                    <Box p={1} border={1} style={{ borderColor: 'lightgray' }} key={objindex} pb={0}>\r\n                                                        <Box mb={1} display=\"flex\" alignItems=\"center\">\r\n                                                            <Box mr={4}>\r\n                                                                <Typography align=\"left\" style={{ fontWeight: 'bold' }}>{objkey}&nbsp;{Obj['fields'][objkey].hasOwnProperty('description') === true ? Obj['fields'][objkey]['description'] : ''}</Typography>\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                        <Box>\r\n                                                            <Processobject Obj={Obj['fields'][objkey]} parent={objkey} path={path + \".\" + objkey + \".fields\"} />\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                    :\r\n                                                    null\r\n                                                :\r\n                                                <Box p={1} border={1} style={{ borderColor: 'lightgray' }} key={objindex} pb={0}>\r\n                                                    <Box mb={1} display=\"flex\" alignItems=\"center\">\r\n                                                        <Box mr={4}>\r\n                                                            <Typography align=\"left\" style={{ fontWeight: 'bold' }}>{objkey}&nbsp;{Obj['fields'][objkey].hasOwnProperty('description') === true ? Obj['fields'][objkey]['description'] : ''}</Typography>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                    <Box>\r\n                                                        <Processobject Obj={Obj['fields'][objkey]} parent={objkey} path={path + \".\" + objkey + \".fields\"} />\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        Obj['fields'][objkey].type === \"arrayofjson\" ?\r\n                                            <Box key={objindex} p={1} pb={0} border={1} style={{ borderColor: 'lightgray' }}>\r\n                                                <Box mb={1} display=\"flex\" alignItems=\"center\">\r\n                                                    <Box mr={4}>\r\n                                                        <Typography align=\"left\" style={{ fontWeight: 'bold' }}>{objkey}&nbsp;({Obj['fields'][objkey].hasOwnProperty('description') === true ? Obj['fields'][objkey]['description'] : ''})</Typography>\r\n                                                    </Box>\r\n                                                    <Box>\r\n                                                        <Button\r\n                                                            variant=\"outlined\"\r\n                                                            color=\"primary\"\r\n                                                            onClick={() => handleAddJSOn(path + \".\" + objkey)}\r\n                                                        >\r\n                                                            Add {objkey}\r\n                                                        </Button>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                {/* {\r\n                                                    Obj['fields'][objkey]['fields'].length === undefined ?\r\n                                                        <Box border={1} style={{ borderColor: 'lightgrey' }} p={1}>\r\n                                                            <Box display=\"flex\" justifyContent=\"flex-end\">\r\n                                                                <Button\r\n                                                                    variant=\"text\"\r\n                                                                    color=\"primary\"\r\n                                                                    startIcon={<EditIcon />}\r\n                                                                    onClick={() => handleEditForm(Obj['fields'][objkey]['fields'], path + \".\" + objkey + \".fields\")}\r\n                                                                >\r\n                                                                    Edit\r\n                                                                </Button>\r\n                                                            </Box>\r\n                                                            <Processobject Obj={Obj['fields'][objkey]} parent={objkey} path={path + \".\" + objkey + \".fields\"} />\r\n                                                        </Box>\r\n\r\n                                                        :\r\n                                                        null\r\n                                                }\r\n                                                {\r\n                                                    Obj['fields'][objkey]['fields'].length !== undefined ? */}\r\n                                                <Processarrayofjson List={Obj['fields'][objkey]['fields']} parent={objkey} path={path + \".\" + objkey + \".fields\"} />\r\n                                                {/* : */}\r\n                                                {/* null */}\r\n                                                {/* } */}\r\n                                            </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        Obj['fields'][objkey].type === \"array\" ?\r\n                                            <Box key={objindex} p={1} style={{ borderColor: 'lightgray' }}>\r\n                                                <Box mb={1} display=\"flex\" alignItems=\"center\">\r\n                                                    <Box mr={4}>\r\n                                                        <Typography align=\"left\" style={{ fontWeight: 'bold' }}>{objkey}&nbsp;({Obj['fields'][objkey].hasOwnProperty('description') === true ? Obj['fields'][objkey]['description'] : ''})</Typography>\r\n                                                    </Box>\r\n                                                    <Box>\r\n                                                        <Button\r\n                                                            variant=\"outlined\"\r\n                                                            color=\"primary\"\r\n                                                        >\r\n                                                            Add {objkey}\r\n                                                        </Button>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                <Box display=\"flex\" flexWrap=\"wrap\" alignItems=\"center\">\r\n                                                    {\r\n                                                        Obj['fields'][objkey].fields.map((arritem, arrindex) => {\r\n                                                            return (\r\n                                                                <Chip label={arritem} onDelete={handleDelete} color=\"primary\" key={arrindex} />\r\n                                                            )\r\n                                                        })\r\n                                                    }\r\n                                                </Box>\r\n                                            </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Box >\r\n        )\r\n    }\r\n\r\n    const ProcessNormalInput = ({ Field, parent, path }) => {\r\n        let value = ''\r\n        if (Field.hasOwnProperty('value')) {\r\n            value = Field.value\r\n        }\r\n        else if (Field.hasOwnProperty('default')) {\r\n            value = Field['default']\r\n        }\r\n        else if (Field.hasOwnProperty('allowedvalues') && Field.allowedvalues.length > 0) {\r\n            value = \"\"\r\n        }\r\n        else {\r\n            if (Field.type === \"number\") {\r\n                if (Field.hasOwnProperty('minvalue')) {\r\n                    value = Field.minvalue\r\n                }\r\n                else if (Field.hasOwnProperty('maxvalue')) {\r\n                    value = Field.maxvalue\r\n                }\r\n                else {\r\n                    value = 0\r\n                }\r\n            }\r\n            else {\r\n                value = ''\r\n            }\r\n        }\r\n        if(Field.hasOwnProperty('autopopulate') && Field.autopopulate){\r\n            let val = ''\r\n            for(let i = 0;i<Field['populatevalues'].length;i++){\r\n                if(abc['fields'][Field['populatevalues'][i]].hasOwnProperty('value') && abc['fields'][Field['populatevalues'][i]]['value'] !==\"\"){\r\n                    val = val+abc['fields'][Field['populatevalues'][i]]['value']+'-'\r\n                }\r\n            }\r\n            value = val+\"index\"\r\n        }\r\n        let fmv = path.split('.fields').join('')\r\n        fmv = fmv.split('abc.').join('')\r\n        eval['formValues.' + fmv] = eval(path)['value']\r\n        return (\r\n            <Box p={1} display=\"flex\" flexDirection=\"column\">\r\n                {\r\n                    Field.type === \"string\" ?\r\n                        <Box>\r\n                            {\r\n                                Field.hasOwnProperty('allowedvalues') === true ?\r\n                                    <FormControl fullWidth>\r\n                                        <label htmlFor={parent} required={Field.hasOwnProperty('mandatory') === true ? (Field['mandatory'] === true ? true : false) : false} style={{ fontWeight: 'bold' }}>{parent}{\r\n                                            Field.hasOwnProperty('ConstraintDescription') === true ?\r\n                                                <span style={{ fontSize: '0.8rem', fontWeight: 'normal', color: 'grey' }}>&nbsp;({Field.ConstraintDescription})</span>\r\n                                                :\r\n                                                null\r\n                                        }</label>\r\n                                        <Select\r\n                                            native\r\n                                            disabled={Field.hasOwnProperty('readonly') === true ? Field['readonly'] : false}\r\n                                            labelId={parent}\r\n                                            id={parent}\r\n                                            variant=\"outlined\"\r\n                                            // defaultValue=\"\"\r\n                                            value={value}\r\n                                            onChange={handleFormChange.bind(this, parent, Field.type, -1, 0, path)}\r\n                                        >\r\n                                            <option value=\"\">Select {parent}</option>\r\n                                            {\r\n                                                Field.hasOwnProperty('condition') === true ?\r\n                                                    Field.condition.hasOwnProperty('onchange') === true ?\r\n                                                        Field.allowedvalues.map((valItem, valIndex) => {\r\n                                                            let pt = path.split('.')\r\n                                                            pt.pop()\r\n                                                            pt = pt.join('.')\r\n                                                            let oper = Field.condition.onchange.split('/')\r\n                                                            let val = eval(pt + '.' + oper[1] + \".value\")\r\n                                                            if (valItem !== val) {\r\n                                                                return (\r\n                                                                    <option fields={valItem} key={valIndex}>{valItem}</option>\r\n                                                                )\r\n                                                            }\r\n                                                            // else{\r\n                                                            //     eval(path)['value'] = ''\r\n                                                            //     eval['formValues.' + fmv] = ''\r\n                                                            // }\r\n                                                        })\r\n                                                        :\r\n                                                        Field.allowedvalues.map((valItem, valIndex) => {\r\n                                                            return (\r\n                                                                <option fields={valItem} key={valIndex}>{valItem}</option>\r\n                                                            )\r\n                                                        })\r\n                                                    :\r\n                                                    Field.allowedvalues.map((valItem, valIndex) => {\r\n                                                        return (\r\n                                                            <option fields={valItem} key={valIndex}>{valItem}</option>\r\n                                                        )\r\n                                                    })\r\n                                            }\r\n                                        </Select>\r\n                                        {\r\n                                            Field.hasOwnProperty('Description') === true ?\r\n                                                <FormHelperText>{Field.Description}</FormHelperText>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </FormControl>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            {\r\n                                Field.hasOwnProperty('allowedvalues') === false ?\r\n                                    <FormControl fullWidth>\r\n                                        <label htmlFor={parent} required={Field.hasOwnProperty('mandatory') === true ? (Field['mandatory'] === true ? true : false) : false} style={{ fontWeight: 'bold' }}>{parent}{\r\n                                            Field.hasOwnProperty('ConstraintDescription') === true ?\r\n                                                <span style={{ fontSize: '0.8rem', fontWeight: 'normal', color: 'grey' }}>&nbsp;({Field.ConstraintDescription})</span>\r\n                                                :\r\n                                                null\r\n                                        }</label>\r\n                                        <TextField\r\n                                            id={parent}\r\n                                            helperText={Field.hasOwnProperty('Description') === true ? Field.Description : ''}\r\n                                            defaultValue={value}\r\n                                            disabled={Field.hasOwnProperty('readonly') === true ? Field['readonly'] : false}\r\n                                            fullWidth\r\n                                            placeholder={\"Enter \" + parent}\r\n                                            onChange={handleFormChange.bind(this, parent, Field.type, -1, 0, path)}\r\n                                            variant=\"outlined\"\r\n                                        >\r\n                                        </TextField>\r\n                                    </FormControl>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </Box>\r\n                        :\r\n                        null\r\n                }\r\n                {\r\n                    Field.type === \"number\" ?\r\n                        <Box>\r\n                            {\r\n                                Field.hasOwnProperty('allowedvalues') === true ?\r\n                                    <FormControl fullWidth>\r\n                                        <label htmlFor={parent} required={Field.hasOwnProperty('mandatory') === true ? (Field['mandatory'] === true ? true : false) : false} style={{ fontWeight: 'bold' }}>{parent}{\r\n                                            Field.hasOwnProperty('ConstraintDescription') === true ?\r\n                                                <span style={{ fontSize: '0.8rem', fontWeight: 'normal', color: 'grey' }}>&nbsp;({Field.ConstraintDescription})</span>\r\n                                                :\r\n                                                null\r\n                                        }</label>\r\n                                        <Select\r\n                                            native\r\n                                            labelId={parent}\r\n                                            id={parent}\r\n                                            // defaultValue=\"\"\r\n                                            value={value}\r\n                                            variant=\"outlined\"\r\n                                            disabled={Field.hasOwnProperty('readonly') === true ? Field['readonly'] : false}\r\n                                            onChange={handleFormChange.bind(this, parent, Field.type, -1, 0, path)}\r\n                                        >\r\n                                            <option value=\"\">Select {parent}</option>\r\n                                            {\r\n                                                Field.hasOwnProperty('condition') === true ?\r\n                                                    Field.condition.hasOwnProperty('onchange') === true ?\r\n                                                        Field.allowedvalues.map((valItem, valIndex) => {\r\n                                                            let pt = path.split('.')\r\n                                                            pt.pop()\r\n                                                            pt = pt.join('.')\r\n                                                            let oper = Field.condition.onchange.split('/')\r\n                                                            let val = eval(pt + '.' + oper[1] + \".value\")\r\n                                                            if (valItem !== val) {\r\n                                                                return (\r\n                                                                    <option fields={valItem} key={valIndex}>{valItem}</option>\r\n                                                                )\r\n                                                            }\r\n                                                            // else{\r\n                                                            //     eval(path)['value'] = ''\r\n                                                            //     eval['formValues.' + fmv] = ''\r\n                                                            // }\r\n                                                        })\r\n                                                        :\r\n                                                        Field.allowedvalues.map((valItem, valIndex) => {\r\n                                                            return (\r\n                                                                <option fields={valItem} key={valIndex}>{valItem}</option>\r\n                                                            )\r\n                                                        })\r\n                                                    :\r\n                                                    Field.allowedvalues.map((valItem, valIndex) => {\r\n                                                        return (\r\n                                                            <option fields={valItem} key={valIndex}>{valItem}</option>\r\n                                                        )\r\n                                                    })\r\n                                            }\r\n                                        </Select>\r\n                                        {\r\n                                            Field.hasOwnProperty('Description') === true ?\r\n                                                <FormHelperText>{Field.Description}</FormHelperText>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </FormControl>\r\n                                    :\r\n                                    null\r\n                            }\r\n                            {\r\n                                Field.hasOwnProperty('allowedvalues') === false ?\r\n                                    <Box>\r\n                                        <FormControl fullWidth>\r\n                                            <label htmlFor={parent} required={Field.hasOwnProperty('mandatory') === true ? (Field['mandatory'] === true ? true : false) : false} style={{ fontWeight: 'bold' }}>{parent}{\r\n                                                Field.hasOwnProperty('ConstraintDescription') === true ?\r\n                                                    <span style={{ fontSize: '0.8rem', fontWeight: 'normal', color: 'grey' }}>&nbsp;({Field.ConstraintDescription})</span>\r\n                                                    :\r\n                                                    null\r\n                                            }</label>\r\n                                            <TextField\r\n                                                id={parent}\r\n                                                helperText={Field.hasOwnProperty('Description') === true ? Field.Description : ''}\r\n                                                defaultValue={value}\r\n                                                fullWidth\r\n                                                disabled={Field.hasOwnProperty('readonly') === true ? Field['readonly'] : false}\r\n                                                type=\"number\"\r\n                                                placeholder={\"Enter \" + parent}\r\n                                                onChange={handleFormChange.bind(this, parent, Field.type, Field.hasOwnProperty('minvalue') ? Field.minvalue : \"\", Field.hasOwnProperty('maxvalue') ? Field.maxvalue : \"\", path)}\r\n                                                variant=\"outlined\"\r\n                                            >\r\n                                            </TextField>\r\n                                        </FormControl>\r\n                                    </Box>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </Box>\r\n                        :\r\n                        null\r\n                }\r\n                {\r\n                    Field.type === \"boolean\" ?\r\n                        <FormControl component=\"fieldset\" fullWidth>\r\n                            <label htmlFor=\"Region\" required={Field.hasOwnProperty('mandatory') === true ? (Field['mandatory'] === true ? true : false) : false}>{parent}</label>\r\n                            <RadioGroup aria-label=\"gender\" value={value.toString()} defaultValue=\"true\" onChange={handleFormChange.bind(this, parent, Field.type, -1, 0, path)} style={{ flexDirection: 'row' }}>\r\n                                <FormControlLabel value=\"true\" control={<Radio />} label=\"true\" disabled={Field.hasOwnProperty('readonly') === true ? (Field.readonly === true ? true : false) : false} />\r\n                                <FormControlLabel value=\"false\" control={<Radio />} label=\"false\" disabled={Field.hasOwnProperty('readonly') === true ? (Field.readonly === true ? true : false) : false} />\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                        :\r\n                        null\r\n                }\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    const handleAddJSOn = (path) => {\r\n        // if (eval(path)['fields'].length === undefined) {\r\n        //     let obj = abc, tmp = { \"type\": \"object\", \"fields\": eval(path)['fields'] }\r\n        //     path = path.replace('abc', 'obj')\r\n        //     // eval\r\n        //     eval(path)['fields'] = [tmp, tmp]\r\n        //     // console.log(eval(path))\r\n        //     let tmporder = [...order]\r\n        //     // setAbc({})\r\n        //     setOrder([])\r\n        //     setAbc(obj)\r\n        //     setOrder(tmporder)\r\n        // }\r\n        // else {\r\n        let obj = abc\r\n        path = path.replace('abc', 'obj')\r\n        eval(path)['fields'].push(eval(path)['fields'][0])\r\n        let tmporder = [...order]\r\n        // setAbc({})\r\n        setOrder([])\r\n        setAbc(obj)\r\n        setOrder(tmporder)\r\n        // }\r\n    }\r\n\r\n    const handleRemJson = (path, index) => {\r\n        let obj = abc\r\n        path = path.replace('abc', 'obj')\r\n        let temparr = eval(path)\r\n        temparr = temparr.splice(index, 1)\r\n        // eval(path) = temparr\r\n        let tmppath = path.split('.')\r\n        tmppath.pop()\r\n        tmppath = tmppath.join('.')\r\n        eval(tmppath)['fields'] = temparr\r\n        let tmporder = [...order]\r\n        // setAbc({})\r\n        setOrder([])\r\n        setAbc(obj)\r\n        setOrder(tmporder)\r\n        // console.log(eval(path), index)\r\n    }\r\n\r\n    const Processarrayofjson = ({ List, path, parent }) => {\r\n        return (\r\n            <Box>\r\n                {\r\n                    List.map((item, index) => {\r\n                        return (\r\n                            <Box key={index} border={1} mb={1} style={{ borderColor: 'lightgray' }} p={1}>\r\n                                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\">\r\n                                    <Box mr={2}>\r\n                                        <Button\r\n                                            variant=\"text\"\r\n                                            color=\"primary\"\r\n                                            startIcon={<EditIcon />}\r\n                                            onClick={() => handleEditForm(item['fields'], path + \"[\" + index + \"]\")}\r\n                                        >\r\n                                            Edit\r\n                                        </Button>\r\n                                    </Box>\r\n                                    <Box>\r\n                                        <Button\r\n                                            variant=\"text\"\r\n                                            color=\"secondary\"\r\n                                            onClick={() => handleRemJson(path, index)}\r\n                                        >\r\n                                            <ClearIcon />\r\n                                        </Button>\r\n                                    </Box>\r\n                                </Box>\r\n                                <Processobject Obj={item} parent={parent} path={path + \"[\" + index + \"].fields\"} />\r\n                            </Box>\r\n                        )\r\n                    })\r\n                }\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    const IterateJSON = () => {\r\n        return (\r\n            <Box p={1} className=\"template-design\" style={{ width: '100%', borderColor: 'lightgray' }} mt={2} mb={2} pb={0} pr={0.5} border={1}>\r\n                {/* <Box style={{ width: '100%' }} >\r\n                    <Box style={{ width: '100%' }} display=\"flex\" justifyContent=\"flex-end\" >\r\n                        <Button\r\n                            variant=\"text\"\r\n                            color=\"primary\"\r\n                            startIcon={<EditIcon />}\r\n                            onClick={() => handleEditForm(abc['fields'], \"abc\")}\r\n                        >\r\n                            Edit\r\n                        </Button>\r\n                    </Box>\r\n                </Box> */}\r\n                <Grid container>\r\n                    {\r\n                        order.map((objkey, objindex) => {\r\n                            if (abc['fields'][objkey].type === \"string\" || abc['fields'][objkey].type === \"number\") {\r\n                                if (abc['fields'][objkey].hasOwnProperty('value')) {\r\n                                    abc['fields'][objkey]['value'] = abc['fields'][objkey].value\r\n                                }\r\n                                else if (abc['fields'][objkey].hasOwnProperty('default')) {\r\n                                    abc['fields'][objkey]['value'] = abc['fields'][objkey]['default']\r\n                                }\r\n                                else if (abc['fields'][objkey].hasOwnProperty('allowedvalues') && abc['fields'][objkey].allowedvalues.length > 0) {\r\n                                    if (abc['fields'][objkey].hasOwnProperty('mandatory') && abc['fields'][objkey]['mandatory']) {\r\n                                        abc['fields'][objkey]['value'] = abc['fields'][objkey].allowedvalues[0]\r\n                                    }\r\n                                    else {\r\n                                        abc['fields'][objkey]['value'] = ''\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (abc['fields'][objkey].type === \"number\") {\r\n                                        if (abc['fields'][objkey].hasOwnProperty('minvalue')) {\r\n                                            abc['fields'][objkey]['value'] = abc['fields'][objkey].minvalue\r\n                                        }\r\n                                        else if (abc['fields'][objkey].hasOwnProperty('maxvalue')) {\r\n                                            abc['fields'][objkey]['value'] = abc['fields'][objkey].maxvalue\r\n                                        }\r\n                                        else {\r\n                                            abc['fields'][objkey]['value'] = 0\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        abc['fields'][objkey]['value'] = ''\r\n                                    }\r\n                                }\r\n                                if(abc['fields'][objkey].hasOwnProperty('autopopulate') && abc['fields'][objkey].autopopulate){\r\n                                    let val = ''\r\n                                    for(let i = 0;i<abc['fields'][objkey]['populatevalues'].length;i++){\r\n                                        if(abc['fields'][abc['fields'][objkey]['populatevalues'][i]].hasOwnProperty('value') && abc['fields'][abc['fields'][objkey]['populatevalues'][i]]['value'] !==\"\"){\r\n                                            val = val+abc['fields'][abc['fields'][objkey]['populatevalues'][i]]['value']+'-'\r\n                                        }\r\n                                    }\r\n                                    abc['fields'][objkey]['value'] = val+\"index\"\r\n                                }\r\n                                formValues[objkey] = abc['fields'][objkey]['value']\r\n                            }\r\n                            else if (abc['fields'][objkey].type === \"arrayofjson\") {\r\n                                if (abc['fields'][objkey].hasOwnProperty('value')) {\r\n                                    // abc['fields'][objkey]['fields'] = abc['fields'][objkey].fields\r\n                                }\r\n                                else if (abc['fields'][objkey].hasOwnProperty('fields')) {\r\n                                    abc['fields'][objkey]['value'] = [{ type: \"object\", \"fields\": abc['fields'][objkey]['fields'] }]\r\n                                }\r\n                            }\r\n                            else if (abc['fields'][objkey].type === \"Array\") {\r\n                                if (abc['fields'][objkey].hasOwnProperty('fields')) {\r\n                                    // abc['fields'][objkey]['fields'] = abc['fields'][objkey].fields\r\n                                }\r\n                                else if (abc['fields'][objkey].hasOwnProperty('Default')) {\r\n                                    abc['fields'][objkey]['fields'] = [abc['fields'][objkey]['Default']]\r\n                                }\r\n                            }\r\n                            else if (abc['fields'][objkey].type === \"boolean\") {\r\n                                if (abc['fields'][objkey].hasOwnProperty('value')) {\r\n                                    abc['fields'][objkey]['value'] = abc['fields'][objkey].value\r\n                                }\r\n                                else if (abc['fields'][objkey].hasOwnProperty('default')) {\r\n                                    abc['fields'][objkey]['value'] = [abc['fields'][objkey]['default']]\r\n                                }\r\n                            }\r\n                            else if (abc['fields'][objkey].type === \"object\") {\r\n                                formValues[objkey] = {}\r\n                            }\r\n                            return (\r\n                                <Grid item xs={12} md={abc['fields'][objkey].type === \"string\" ? 6 : (abc['fields'][objkey].type === \"number\" ? 6 : 12)} style={{ padding: '0px 5px 0 0', marginBottom: 8 }} key={objindex}>\r\n                                    {\r\n                                        abc['fields'][objkey].type === \"string\" || abc['fields'][objkey].type === \"number\" || abc['fields'][objkey].type === \"boolean\" ?\r\n                                            abc['fields'][objkey].hasOwnProperty('dependson') === true ?\r\n                                                abc['fields'][abc['fields'][objkey]['dependson'].split('/')[0]]['value'] === (\"true\" === abc['fields'][objkey]['dependson'].split('/')[1]) ?\r\n                                                    <Box key={objindex} style={{ borderColor: 'lightgray' }}>\r\n                                                        <ProcessNormalInput Field={abc['fields'][objkey]} parent={objkey} path={\"abc.fields.\" + objkey} />\r\n                                                    </Box>\r\n                                                    :\r\n                                                    null\r\n                                                :\r\n                                                <Box key={objindex} style={{ borderColor: 'lightgray' }}>\r\n                                                    <ProcessNormalInput Field={abc['fields'][objkey]} parent={objkey} path={\"abc.fields.\" + objkey} />\r\n                                                </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        abc['fields'][objkey].type === \"object\" ?\r\n                                            abc['fields'][objkey].hasOwnProperty('dependson') === true ?\r\n                                                abc['fields'][abc['fields'][objkey]['dependson'].split('/')[0]]['value'] === (\"true\" === abc['fields'][objkey]['dependson'].split('/')[1]) ?\r\n                                                    <Box key={objindex} p={1} border={1} style={{ borderColor: 'lightgray' }} pb={0}>\r\n                                                        <Box mb={1} display=\"flex\" alignItems=\"center\">\r\n                                                            <Box mr={4}>\r\n                                                                <Typography align=\"left\" style={{ fontWeight: 'bold' }}>{abc['fields'][objkey].title}&nbsp;{abc['fields'][objkey].hasOwnProperty('Description') === true ? abc['fields'][objkey]['Description'] : ''}</Typography>\r\n                                                            </Box>\r\n                                                        </Box>\r\n                                                        <Box>\r\n                                                            <Processobject Obj={abc['fields'][objkey]} parent={objkey} path={\"abc.fields.\" + objkey + \".fields\"} />\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                    :\r\n                                                    null\r\n                                                :\r\n                                                <Box key={objindex} p={1} border={1} style={{ borderColor: 'lightgray' }} pb={0}>\r\n                                                    <Box mb={1} display=\"flex\" alignItems=\"center\">\r\n                                                        <Box mr={4}>\r\n                                                            <Typography align=\"left\" style={{ fontWeight: 'bold' }}>{objkey}&nbsp;{abc['fields'][objkey].hasOwnProperty('Description') === true ? abc['fields'][objkey]['Description'] : ''}</Typography>\r\n                                                        </Box>\r\n                                                    </Box>\r\n                                                    <Box>\r\n                                                        <Processobject Obj={abc['fields'][objkey]} parent={objkey} path={\"abc.fields.\" + objkey + \".fields\"} />\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        abc['fields'][objkey].type === \"Array\" ?\r\n                                            <Box key={objindex} p={1} style={{ borderColor: 'lightgray' }}>\r\n                                                <Box mb={1} display=\"flex\" alignItems=\"center\">\r\n                                                    <Box mr={4}>\r\n                                                        <Typography align=\"left\" style={{ fontWeight: 'bold' }}>{objkey}&nbsp;({abc['fields'][objkey].hasOwnProperty('Description') === true ? abc['fields'][objkey]['Description'] : ''})</Typography>\r\n                                                    </Box>\r\n                                                    <Box>\r\n                                                        <Button\r\n                                                            variant=\"outlined\"\r\n                                                            color=\"primary\"\r\n                                                        >\r\n                                                            Add {objkey}\r\n                                                        </Button>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                <Box display=\"flex\" flexWrap=\"wrap\" alignItems=\"center\">\r\n                                                    {\r\n                                                        abc['fields'][objkey].fields.map((arritem, arrindex) => {\r\n                                                            return (\r\n                                                                <Chip key={arrindex} label={arritem} onDelete={handleDelete} color=\"primary\" />\r\n                                                            )\r\n                                                        })\r\n                                                    }\r\n                                                </Box>\r\n                                            </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    {\r\n                                        abc['fields'][objkey].type === \"arrayofjson\" ?\r\n                                            <Box key={objindex} p={1} border={1} style={{ borderColor: 'lightgray' }}>\r\n                                                <Box mb={1} display=\"flex\" alignItems=\"center\">\r\n                                                    <Box mr={4}>\r\n                                                        <Typography align=\"left\" style={{ fontWeight: 'bold' }}>{objkey}&nbsp;({abc['fields'][objkey].hasOwnProperty('Description') === true ? abc['fields'][objkey]['Description'] : ''})</Typography>\r\n                                                    </Box>\r\n                                                    <Box>\r\n                                                        <Button\r\n                                                            variant=\"outlined\"\r\n                                                            color=\"primary\"\r\n                                                            // onClick={() => handleAddJSOn(\"abc.fields.\" + objkey)}\r\n                                                            onClick={() => handleAddJSOn(\"abc.fields.\" + objkey)}\r\n                                                        >\r\n                                                            Add {objkey}\r\n                                                        </Button>\r\n                                                    </Box>\r\n                                                </Box>\r\n                                                <Box p={1} border={1} style={{ borderColor: 'lightgray' }} pb={0}>\r\n                                                    {/* {\r\n                                                        abc['fields'][objkey]['fields'].length === undefined ?\r\n                                                            <Box>\r\n                                                                <Box>\r\n                                                                    <Button\r\n                                                                        variant=\"text\"\r\n                                                                        color=\"primary\"\r\n                                                                        startIcon={<EditIcon />}\r\n                                                                        onClick={() => handleEditForm(abc['fields'][objkey]['fields'], \"abc.fields.\" + objkey + \".fields\")}\r\n                                                                    >\r\n                                                                        Edit\r\n                                                                    </Button>\r\n                                                                </Box>\r\n                                                                <Processobject Obj={abc['fields'][objkey]} parent={objkey} path={\"abc.fields.\" + objkey + \".fields\"} />\r\n                                                            </Box>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    {\r\n                                                        abc['fields'][objkey]['fields'].length !== undefined ? */}\r\n                                                    <Processarrayofjson List={abc['fields'][objkey]['fields']} parent={objkey} path={\"abc.fields.\" + objkey + \".fields\"} />\r\n                                                    {/* : */}\r\n                                                    {/* null */}\r\n                                                    {/* } */}\r\n                                                </Box>\r\n                                            </Box>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    const handleEditForm = (Obj, path) => {\r\n        setCurFormObj(Obj)\r\n        setCurPath(path)\r\n        setFormDialog(true)\r\n    }\r\n\r\n    const handleFormChange = (field, type, minvalue, maxvalue, path, event) => {\r\n        console.log(formValues)\r\n        console.log(abc)\r\n        if (type === 'number') {\r\n            if (maxvalue !== \"\") {\r\n                if (parseInt(event.target.value) > maxvalue) {\r\n                    // setMessage('Maximum limit reached')\r\n                    // setSeverrity('error')\r\n                    // setOpenAlert(true)\r\n                    eval(path)['value'] = maxvalue\r\n                    event.target.value = maxvalue\r\n                    // setDisableBtn(true)\r\n                }\r\n                else {\r\n                    eval(path)['value'] = parseInt(event.target.value)\r\n                    event.target.value = parseInt(event.target.value)\r\n                }\r\n            }\r\n            else {\r\n                // setDisableBtn(false)\r\n                eval(path)['value'] = parseInt(event.target.value)\r\n            }\r\n            if (minvalue !== \"\") {\r\n                if (parseInt(event.target.value) < minvalue) {\r\n                    // setOpenAlert(true)\r\n                    // setMessage('Minimum limit reached')\r\n                    // setSeverrity('error')\r\n                    eval(path)['value'] = minvalue\r\n                    event.target.value = minvalue\r\n                    // setDisableBtn(true)\r\n                }\r\n                else {\r\n                    eval(path)['value'] = parseInt(event.target.value)\r\n                    event.target.value = parseInt(event.target.value)\r\n                }\r\n            }\r\n            else {\r\n                if (parseInt(event.target.value) > 0) {\r\n                    // setDisableBtn(false)\r\n                    eval(path)['value'] = parseInt(event.target.value)\r\n                }\r\n                else {\r\n                    eval(path)['value'] = 0\r\n                    event.target.value = 0\r\n                }\r\n            }\r\n        }\r\n        else if (type === 'yaml') {\r\n            eval(path)['value'] = event\r\n        }\r\n        else if (type === \"boolean\") {\r\n            eval(path)['value'] = (\"true\" === event.target.value)\r\n        }\r\n        else {\r\n            // setDisableBtn(false)\r\n\r\n            eval(path)['value'] = event.target.value;\r\n        }\r\n        let ords = [...order]\r\n        setOrder([])\r\n        setOrder(ords)\r\n        let fmv = path.split('.fields').join('')\r\n        fmv = fmv.split('obj.').join('')\r\n        eval['formValues.' + fmv] = eval(path)['value']\r\n    }\r\n\r\n    const handleFormSubmit = (boolean) => {\r\n        delete formValues['dummy']\r\n        if (boolean) {\r\n            clickHandler(boolean, formValues)\r\n        }\r\n        else {\r\n            clickHandler(boolean)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={true}\r\n                onClose={() => handleFormSubmit(false)}\r\n                aria-labelledby=\"acc-dialog-title\"\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle id=\"acc-dialog-title\" style={{ borderBottom: '1px solid lightgrey' }}>{formname}</DialogTitle>\r\n                <DialogContent>\r\n                    <Box>\r\n                        <IterateJSON Obj={abc} />\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => handleFormSubmit(false)} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        variant=\"contained\"\r\n                        className='api-btn'\r\n                        onClick={handleFormSubmit}\r\n                    >\r\n                        Submit\r\n                \t</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TemplateIp;","import React, { useState } from 'react';\r\n\r\n//Material UI\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nconst Confirm = ({ confirmText, clickHandler }) => {\r\n    const [text, setText] = useState('no')\r\n\r\n    const handleText = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            open={true}\r\n            onClose={() => clickHandler(false)}\r\n            aria-labelledby=\"form-dialog-title\"\r\n            fullWidth={true}\r\n            maxWidth=\"sm\"\r\n        >\r\n            <DialogTitle id=\"form-dialog-title\">Confirmation</DialogTitle>\r\n            <DialogContent>\r\n                <FormControl fullWidth>\r\n                    <label>{confirmText}</label>\r\n                    <label >Please enter \"yes\" to confirm</label>\r\n                    <TextField\r\n                        id=\"ClassName\"\r\n                        required\r\n                        fullWidth\r\n                        placeholder=\"yes\"\r\n                        onChange={handleText}\r\n                        variant=\"outlined\"\r\n                    >\r\n                    </TextField>\r\n                </FormControl>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => clickHandler(false)} color=\"primary\" className=\"action-btn\">\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={text === 'yes' ? false : true} variant=\"contained\" onClick={() => clickHandler(true)} className=\"api-btn\">\r\n                    Confirm\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default Confirm; "],"sourceRoot":""}